<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns="http://www.codeontime.com/2008/codedom-compiler"  xmlns:a="urn:schemas-codeontime-com:data-aquarium-project"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt" exclude-result-prefixes="msxsl a"
>
	<xsl:output method="xml" indent="yes"/>
	<xsl:param name="TargetFramework" select="a:project/@targetFramework"/>
	<xsl:param name="TargetFramework45Plus"/>
	<xsl:param name="ScriptOnly" select="a:project/a:features/a:framework/@scriptOnly"/>
	<xsl:param name="PageImplementation" select="a:project/@pageImplementation"/>
	<xsl:param name="IsUnlimited"/>
	<xsl:param name="IsPremium"/>
	<xsl:param name="Mobile"/>
	<xsl:param name="ProjectId"/>

	<xsl:variable name="Theme" select="a:project/a:theme/@name"/>
	<xsl:variable name="MembershipEnabled" select="a:project/a:membership/@enabled"/>
	<xsl:variable name="CustomSecurity" select="a:project/a:membership/@customSecurity"/>

	<xsl:variable name="Namespace" select="a:project/a:namespace"/>

	<xsl:template match="/">
		<compileUnit namespace="{$Namespace}.Services.Rest">
			<imports>
				<namespaceImport name="System"/>
				<namespaceImport name="System.Collections.Generic"/>
				<namespaceImport name="System.ComponentModel"/>
				<namespaceImport name="System.Data"/>
				<namespaceImport name="System.IO"/>
				<namespaceImport name="System.Net"/>
				<namespaceImport name="System.Text"/>
				<namespaceImport name="System.Text.RegularExpressions"/>
				<namespaceImport name="System.Web"/>
				<namespaceImport name="System.Web.Caching"/>
				<namespaceImport name="System.Web.Security"/>
				<namespaceImport name="System.Xml.XPath"/>
				<namespaceImport name="Newtonsoft.Json.Linq"/>
				<namespaceImport name="{$Namespace}.Data"/>
				<namespaceImport name="{$Namespace}.Handlers"/>
				<namespaceImport name="{$Namespace}.Web"/>
			</imports>
			<types>
				<!-- class RESTfulResource -->
				<typeDeclaration name="RESTfulResource" isPartial="true">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="RESTfulResourceBase"/>
					</baseTypes>
					<members>
						<!-- static constructor() -->
						<typeConstructor>
							<statements>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="OperationTypes"/>
										</target>
										<indices>
											<primitiveExpression value="Number"/>
										</indices>
									</arrayIndexerExpression>
									<arrayCreateExpression>
										<createType type="System.String"/>
										<initializers>
											<primitiveExpression value="="/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[<>]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[<]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[>]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[<=]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[>=]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression value="$between"/>
											<primitiveExpression value="$in"/>
											<primitiveExpression value="$notin"/>
											<primitiveExpression value="$isnotempty"/>
											<primitiveExpression value="$isempty"/>
										</initializers>
									</arrayCreateExpression>
								</assignStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="OperationTypes"/>
										</target>
										<indices>
											<primitiveExpression value="Text"/>
										</indices>
									</arrayIndexerExpression>
									<arrayCreateExpression>
										<createType type="System.String"/>
										<initializers>
											<primitiveExpression value="="/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[<>]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression value="$beginswith"/>
											<primitiveExpression value="$doesnotbeginwith"/>
											<primitiveExpression value="$contains"/>
											<primitiveExpression value="$doesnotcontain"/>
											<primitiveExpression value="$endswith"/>
											<primitiveExpression value="$doesnotendwith"/>
											<primitiveExpression value="$in"/>
											<primitiveExpression value="$notin"/>
											<primitiveExpression value="$isnotempty"/>
											<primitiveExpression value="$isempty"/>
										</initializers>
									</arrayCreateExpression>
								</assignStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="OperationTypes"/>
										</target>
										<indices>
											<primitiveExpression value="Logical"/>
										</indices>
									</arrayIndexerExpression>
									<arrayCreateExpression>
										<createType type="System.String"/>
										<initializers>
											<primitiveExpression value="$true"/>
											<primitiveExpression value="$false"/>
											<primitiveExpression value="$isnotempty"/>
											<primitiveExpression value="$isempty"/>
										</initializers>
									</arrayCreateExpression>
								</assignStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="OperationTypes"/>
										</target>
										<indices>
											<primitiveExpression value="Date"/>
										</indices>
									</arrayIndexerExpression>
									<arrayCreateExpression>
										<createType type="System.String"/>
										<initializers>
											<primitiveExpression value="="/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[<>]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[<]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[>]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[<=]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[>=]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression value="$between"/>
											<primitiveExpression value="$in"/>
											<primitiveExpression value="$notin"/>
											<primitiveExpression value="$isnotempty"/>
											<primitiveExpression value="$isempty"/>
											<primitiveExpression value="$tomorrow"/>
											<primitiveExpression value="$today"/>
											<primitiveExpression value="$yesterday"/>
											<primitiveExpression value="$nextweek"/>
											<primitiveExpression value="$thisweek"/>
											<primitiveExpression value="$lastweek"/>
											<primitiveExpression value="$nextmonth"/>
											<primitiveExpression value="$thismonth"/>
											<primitiveExpression value="$lastmonth"/>
											<primitiveExpression value="$nextquarter"/>
											<primitiveExpression value="$thisquarter"/>
											<primitiveExpression value="$lastquarter"/>
											<primitiveExpression value="$thisyear"/>
											<primitiveExpression value="$nextyear"/>
											<primitiveExpression value="$lastyear"/>
											<primitiveExpression value="$yeartodate"/>
											<primitiveExpression value="$past"/>
											<primitiveExpression value="$future"/>
											<primitiveExpression value="$quarter1"/>
											<primitiveExpression value="$quarter2"/>
											<primitiveExpression value="$quarter3"/>
											<primitiveExpression value="$quarter4"/>
											<primitiveExpression value="$month1"/>
											<primitiveExpression value="$month2"/>
											<primitiveExpression value="$month3"/>
											<primitiveExpression value="$month4"/>
											<primitiveExpression value="$month5"/>
											<primitiveExpression value="$month6"/>
											<primitiveExpression value="$month7"/>
											<primitiveExpression value="$month8"/>
											<primitiveExpression value="$month9"/>
											<primitiveExpression value="$month10"/>
											<primitiveExpression value="$month11"/>
											<primitiveExpression value="$month12"/>
										</initializers>
									</arrayCreateExpression>
								</assignStatement>
								<!-- = -->
								<comment><![CDATA[=]]></comment>
								<variableDeclarationStatement name="c">
									<init>
										<objectCreateExpression type="OpConstraint"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[equals,=]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Op">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[=]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MinValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MaxValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="ArrayOp">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="includes"/>
								</assignStatement>
								<!-- <> -->
								<comment><![CDATA[<>]]></comment>
								<assignStatement>
									<variableReferenceExpression name="c"/>
									<objectCreateExpression type="OpConstraint"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[doesNotEqual,<>,!=]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Op">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[<>]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MinValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MaxValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="ArrayOp">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="doesNotInclude"/>
								</assignStatement>
								<!-- > -->
								<comment><![CDATA[>]]></comment>
								<assignStatement>
									<variableReferenceExpression name="c"/>
									<objectCreateExpression type="OpConstraint"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[greaterThan,>]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Op">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[>]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MinValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MaxValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<!-- >= -->
								<comment><![CDATA[>=]]></comment>
								<assignStatement>
									<variableReferenceExpression name="c"/>
									<objectCreateExpression type="OpConstraint"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[greaterThanOrEqual,>=]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Op">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[>=]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MinValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MaxValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<!-- $between -->
								<comment><![CDATA[$between]]></comment>
								<assignStatement>
									<variableReferenceExpression name="c"/>
									<objectCreateExpression type="OpConstraint"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[between]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Op">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[$between]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MinValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="2"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MaxValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="2"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Join">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="$and$"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="UrlArrays">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="true"/>
								</assignStatement>
								<!-- $in -->
								<comment><![CDATA[$in]]></comment>
								<assignStatement>
									<variableReferenceExpression name="c"/>
									<objectCreateExpression type="OpConstraint"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[includes]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Op">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[$in]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MinValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MaxValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<propertyReferenceExpression name="MaxValue">
										<typeReferenceExpression type="System.Int32"/>
									</propertyReferenceExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Join">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="$or$"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="UrlArrays">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="true"/>
								</assignStatement>
								<!-- $notin -->
								<comment><![CDATA[$notin]]></comment>
								<assignStatement>
									<variableReferenceExpression name="c"/>
									<objectCreateExpression type="OpConstraint"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[doesNotInclude]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Op">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[$notin]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MinValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MaxValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<propertyReferenceExpression name="MaxValue">
										<typeReferenceExpression type="System.Int32"/>
									</propertyReferenceExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Join">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="$or$"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="UrlArrays">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="true"/>
								</assignStatement>
								<!-- $isempty -->
								<comment><![CDATA[$isempty]]></comment>
								<assignStatement>
									<variableReferenceExpression name="c"/>
									<objectCreateExpression type="OpConstraint"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[empty,isEmtpy,isNull]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Op">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[$isempty]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="NegativeOp">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="notEmpty"/>
								</assignStatement>
								<!-- $isnotempty -->
								<comment><![CDATA[$isnotempty]]></comment>
								<assignStatement>
									<variableReferenceExpression name="c"/>
									<objectCreateExpression type="OpConstraint"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[notEmpty,isNotEmpty,isNotNull]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Op">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[$isnotempty]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="NegativeOp">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="empty"/>
								</assignStatement>
								<!-- < -->
								<comment><![CDATA[<]]></comment>
								<assignStatement>
									<variableReferenceExpression name="c"/>
									<objectCreateExpression type="OpConstraint"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[lessThan,<]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Op">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[>]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MinValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MaxValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<!-- <=  -->
								<comment><![CDATA[<=]]></comment>
								<assignStatement>
									<variableReferenceExpression name="c"/>
									<objectCreateExpression type="OpConstraint"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[lessThanOrEqual,<=]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Op">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[<=]]></xsl:attribute>
									</primitiveExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MinValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MaxValCount">
										<variableReferenceExpression name="c"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
							</statements>
						</typeConstructor>
						<!-- constructor() -->
						<constructor>
							<attributes public="true"/>
							<statements>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="Items">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</target>
										<indices>
											<primitiveExpression value="RESTfulResource_Current"/>
										</indices>
									</arrayIndexerExpression>
									<thisReferenceExpression/>
								</assignStatement>
							</statements>
						</constructor>
						<!-- property Current -->
						<memberProperty type="RESTfulResource" name="Current">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<castExpression targetType="RESTfulResource">
										<arrayIndexerExpression>
											<target>
												<propertyReferenceExpression name="Items">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<indices>
												<primitiveExpression value="RESTfulResource_Current"/>
											</indices>
										</arrayIndexerExpression>
									</castExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- field ApiRegex -->
						<memberField type="Regex" name="ApiRegex">
							<attributes public="true" static="false"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[~(\/oauth2)?\/v2(\/|$)]]></xsl:attribute>
										</primitiveExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- field BasicAuthSupportedRegex -->
						<memberField type="Regex" name="BasicAuthSupportedRegex">
							<attributes public="true" static="false"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[~\/oauth2\/v2\/(token|revoke)$]]></xsl:attribute>
										</primitiveExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- field AnonymousAccessSupportedRegex -->
						<memberField type="Regex" name="AnonymousAccessSupportedRegex">
							<attributes public="true" static="false"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[~\/v2($|\/js\/)]]></xsl:attribute>
										</primitiveExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- property IsRequested -->
						<memberProperty type="System.Boolean" name="IsRequested">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="IsMatch">
										<target>
											<propertyReferenceExpression name="ApiRegex"/>
										</target>
										<parameters>
											<propertyReferenceExpression name="AppRelativeCurrentExecutionFilePath">
												<propertyReferenceExpression name="Request">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property BasicAuthSupported -->
						<memberProperty type="System.Boolean" name="BasicAuthSupported">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="IsMatch">
										<target>
											<propertyReferenceExpression name="BasicAuthSupportedRegex"/>
										</target>
										<parameters>
											<propertyReferenceExpression name="AppRelativeCurrentExecutionFilePath">
												<propertyReferenceExpression name="Request">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property IsOAuth -->
						<memberProperty type="System.Boolean" name="IsOAuth">
							<attributes public="true" static="true"/>
							<getStatements>
								<variableDeclarationStatement name="m">
									<init>
										<methodInvokeExpression methodName="Match">
											<target>
												<propertyReferenceExpression name="ApiRegex"/>
											</target>
											<parameters>
												<propertyReferenceExpression name="AppRelativeCurrentExecutionFilePath">
													<propertyReferenceExpression name="Request">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<methodReturnStatement>
									<binaryOperatorExpression operator="BooleanAnd">
										<propertyReferenceExpression name="Success">
											<variableReferenceExpression name="m"/>
										</propertyReferenceExpression>
										<binaryOperatorExpression operator="GreaterThan">
											<propertyReferenceExpression name="Length">
												<propertyReferenceExpression name="Value">
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Groups">
																<variableReferenceExpression name="m"/>
															</propertyReferenceExpression>
														</target>
														<indices>
															<primitiveExpression value="1"/>
														</indices>
													</arrayIndexerExpression>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property AnonymousAccessSupported -->
						<memberProperty type="System.Boolean" name="AnonymousAccessSupported">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="IsMatch">
										<target>
											<propertyReferenceExpression name="AnonymousAccessSupportedRegex"/>
										</target>
										<parameters>
											<propertyReferenceExpression name="AppRelativeCurrentExecutionFilePath">
												<propertyReferenceExpression name="Request">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property PublicApiKey -->
						<memberProperty type="System.String" name="PublicApiKey">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<castExpression targetType="System.String">
										<arrayIndexerExpression>
											<target>
												<propertyReferenceExpression name="Items">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<indices>
												<primitiveExpression value="x-api-key"/>
											</indices>
										</arrayIndexerExpression>
									</castExpression>
								</methodReturnStatement>
							</getStatements>
							<setStatements>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="Items">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</target>
										<indices>
											<primitiveExpression value="x-api-key"/>
										</indices>
									</arrayIndexerExpression>
									<propertySetValueReferenceExpression/>
								</assignStatement>
							</setStatements>
						</memberProperty>
						<!-- property PublicApiKeyInPath -->
						<memberProperty type="System.String" name="PublicApiKeyInPath">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<castExpression targetType="System.String">
										<arrayIndexerExpression>
											<target>
												<propertyReferenceExpression name="Items">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<indices>
												<primitiveExpression value="x-api-key-in-path"/>
											</indices>
										</arrayIndexerExpression>
									</castExpression>
								</methodReturnStatement>
							</getStatements>
							<setStatements>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="Items">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</target>
										<indices>
											<primitiveExpression value="x-api-key-in-path"/>
										</indices>
									</arrayIndexerExpression>
									<propertySetValueReferenceExpression/>
								</assignStatement>
							</setStatements>
						</memberProperty>
						<!-- method IsAuthorized(string, string) -->
						<memberMethod returnType="System.Boolean" name="IsAuthorized">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="action"/>
								<parameter type="System.String" name="schemaDef"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="IsAuthorized">
										<parameters>
											<castExpression targetType="JObject">
												<arrayIndexerExpression>
													<target>
														<methodInvokeExpression methodName="ParseYamlOrJson">
															<target>
																<typeReferenceExpression type="TextUtility"/>
															</target>
															<parameters>
																<argumentReferenceExpression name="schemaDef"/>
																<primitiveExpression value="true"/>
															</parameters>
														</methodInvokeExpression>
													</target>
													<indices>
														<argumentReferenceExpression name="action"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method IsAuthorized(JObject) -->
						<memberMethod returnType="System.Boolean" name="IsAuthorized">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="JObject" name="actionSchema"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<argumentReferenceExpression name="actionSchema"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="roles">
											<init>
												<convertExpression to="String">
													<arrayIndexerExpression>
														<target>
															<argumentReferenceExpression name="actionSchema"/>
														</target>
														<indices>
															<primitiveExpression value="_roles"/>
														</indices>
													</arrayIndexerExpression>
												</convertExpression>
											</init>
										</variableDeclarationStatement>
										<methodReturnStatement>
											<binaryOperatorExpression operator="BooleanOr">
												<unaryOperatorExpression operator="IsNullOrEmpty">
													<variableReferenceExpression name="roles"/>
												</unaryOperatorExpression>
												<methodInvokeExpression methodName="UserIsInRole">
													<target>
														<typeReferenceExpression type="DataControllerBase"/>
													</target>
													<parameters>
														<variableReferenceExpression name="roles"/>
													</parameters>
												</methodInvokeExpression>
											</binaryOperatorExpression>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<primitiveExpression value="true"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method AuthorizationToLogin(string) -->
						<memberMethod returnType="System.String[]" name="AuthorizationToLogin">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="authorization"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<argumentReferenceExpression name="authorization"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<argumentReferenceExpression name="authorization"/>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Headers">
														<propertyReferenceExpression name="Request">
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="HttpContext"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="Authorization"/>
												</indices>
											</arrayIndexerExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityInequality">
												<variableReferenceExpression name="authorization"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<methodInvokeExpression methodName="StartsWith">
												<target>
													<variableReferenceExpression name="authorization"/>
												</target>
												<parameters>
													<primitiveExpression value="Basic "/>
													<propertyReferenceExpression name="OrdinalIgnoreCase">
														<typeReferenceExpression type="StringComparison"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="login">
											<init>
												<methodInvokeExpression methodName="Split">
													<target>
														<methodInvokeExpression methodName="GetString">
															<target>
																<propertyReferenceExpression name="UTF8">
																	<typeReferenceExpression type="Encoding"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<methodInvokeExpression methodName="FromBase64String">
																	<target>
																		<typeReferenceExpression type="Convert"/>
																	</target>
																	<parameters>
																		<methodInvokeExpression methodName="Substring">
																			<target>
																				<variableReferenceExpression name="authorization"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="6"/>
																			</parameters>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</target>
													<parameters>
														<arrayCreateExpression>
															<createType type="System.Char"/>
															<initializers>
																<primitiveExpression value=":" convertTo="Char"/>
															</initializers>
														</arrayCreateExpression>
														<primitiveExpression value="2"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="Length">
														<variableReferenceExpression name="login"/>
													</propertyReferenceExpression>
													<primitiveExpression value="1"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<arrayCreateExpression>
														<createType type="System.String"/>
														<initializers>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="login"/>
																</target>
																<indices>
																	<primitiveExpression value="0"/>
																</indices>
															</arrayIndexerExpression>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="login"/>
																</target>
																<indices>
																	<primitiveExpression value="0"/>
																</indices>
															</arrayIndexerExpression>
														</initializers>
													</arrayCreateExpression>
												</methodReturnStatement>
											</trueStatements>
											<falseStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="Length">
																<variableReferenceExpression name="login"/>
															</propertyReferenceExpression>
															<primitiveExpression value="2"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodReturnStatement>
															<variableReferenceExpression name="login"/>
														</methodReturnStatement>
													</trueStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<primitiveExpression value="null"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ThrowError(string, string, params object[]) -->
						<memberMethod name="ThrowError">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="error"/>
								<parameter type="System.String" name="description"/>
								<parameter type="params System.Object[]" name="args"/>
							</parameters>
							<statements>
								<methodInvokeExpression methodName="ThrowError">
									<parameters>
										<primitiveExpression value="-1"/>
										<argumentReferenceExpression name="error"/>
										<argumentReferenceExpression name="description"/>
										<argumentReferenceExpression name="args"/>
									</parameters>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method ThrowError(int, string, string, params object[]) -->
						<memberMethod name="ThrowError">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.Int32" name="httpCode"/>
								<parameter type="System.String" name="error"/>
								<parameter type="System.String" name="description"/>
								<parameter type="params System.Object[]" name="args"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="GreaterThan">
											<propertyReferenceExpression name="Length">
												<argumentReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="description"/>
											<methodInvokeExpression methodName="Format">
												<target>
													<typeReferenceExpression type="System.String"/>
												</target>
												<parameters>
													<argumentReferenceExpression name="description"/>
													<argumentReferenceExpression name="args"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<throwExceptionStatement>
									<objectCreateExpression type="RESTfulResourceException">
										<parameters>
											<argumentReferenceExpression name="httpCode"/>
											<argumentReferenceExpression name="error"/>
											<argumentReferenceExpression name="description"/>
										</parameters>
									</objectCreateExpression>
								</throwExceptionStatement>
							</statements>
						</memberMethod>
						<!-- method ThrowError(int, bool, string, string, params object[]) -->
						<memberMethod name="ThrowError">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.Int32" name="httpCode"/>
								<parameter type="System.Boolean" name="schemaHint"/>
								<parameter type="System.String" name="error"/>
								<parameter type="System.String" name="description"/>
								<parameter type="params System.Object[]" name="args"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="GreaterThan">
											<propertyReferenceExpression name="Length">
												<argumentReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="description"/>
											<methodInvokeExpression methodName="Format">
												<target>
													<typeReferenceExpression type="System.String"/>
												</target>
												<parameters>
													<argumentReferenceExpression name="description"/>
													<argumentReferenceExpression name="args"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<throwExceptionStatement>
									<objectCreateExpression type="RESTfulResourceException">
										<parameters>
											<argumentReferenceExpression name="httpCode"/>
											<argumentReferenceExpression name="schemaHint"/>
											<argumentReferenceExpression name="error"/>
											<argumentReferenceExpression name="description"/>
										</parameters>
									</objectCreateExpression>
								</throwExceptionStatement>
							</statements>
						</memberMethod>
						<!-- property Scopes -->
						<memberProperty type="List" name="Scopes">
							<typeArguments>
								<typeReference type="System.String"/>
							</typeArguments>"
							<attributes public ="true" static="true"/>
							<getStatements>
								<variableDeclarationStatement name="scope">
									<init>
										<convertExpression to="String">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Items">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="OAuth2_scope"/>
												</indices>
											</arrayIndexerExpression>
										</convertExpression>
									</init>
								</variableDeclarationStatement>
								<methodReturnStatement>
									<objectCreateExpression type="List">
										<typeArguments>
											<typeReference type="System.String"/>
										</typeArguments>
										<parameters>
											<methodInvokeExpression methodName="Split">
												<target>
													<variableReferenceExpression name="scope"/>
												</target>
												<parameters>
													<arrayCreateExpression>
														<createType type="System.Char"/>
														<initializers>
															<primitiveExpression value=" " convertTo="Char"/>
															<primitiveExpression value="," convertTo="Char"/>
														</initializers>
													</arrayCreateExpression>
													<propertyReferenceExpression name="RemoveEmptyEntries">
														<typeReferenceExpression type="StringSplitOptions"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</parameters>
									</objectCreateExpression>
								</methodReturnStatement>
							</getStatements>
							<setStatements>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="Items">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</target>
										<indices>
											<primitiveExpression value="OAuth2_scope"/>
										</indices>
									</arrayIndexerExpression>
									<propertySetValueReferenceExpression/>
								</assignStatement>
							</setStatements>
						</memberProperty>
						<!-- property IdToken -->
						<memberProperty type="JObject" name="IdToken">
							<attributes public="true" static="true"/>
							<getStatements>
								<variableDeclarationStatement name="token">
									<init>
										<castExpression targetType="JObject">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Items">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="RESTfulResource_IdToken"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="token"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="token"/>
											<objectCreateExpression type="JObject"/>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="IdToken"/>
											<variableReferenceExpression name="token"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="token"/>
								</methodReturnStatement>
							</getStatements>
							<setStatements>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="Items">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</target>
										<indices>
											<primitiveExpression value="RESTfulResource_IdToken"/>
										</indices>
									</arrayIndexerExpression>
									<propertySetValueReferenceExpression/>
								</assignStatement>
							</setStatements>
						</memberProperty>
						<!-- property LatestVersion -->
						<memberProperty type="System.String" name="LatestVersion">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<castExpression targetType="System.String">
										<arrayIndexerExpression>
											<target>
												<propertyReferenceExpression name="Items">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<indices>
												<primitiveExpression value="RESTfulResource_LatestVersion"/>
											</indices>
										</arrayIndexerExpression>
									</castExpression>
								</methodReturnStatement>
							</getStatements>
							<setStatements>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="Items">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</target>
										<indices>
											<primitiveExpression value="RESTfulResource_LatestVersion"/>
										</indices>
									</arrayIndexerExpression>
									<propertySetValueReferenceExpression/>
								</assignStatement>
							</setStatements>
						</memberProperty>
						<!-- method LoadContent() -->
						<memberMethod returnType="System.String" name="LoadContent">
							<attributes public="true" static="true"/>
							<statements>
								<variableDeclarationStatement type="System.String" name="result" var="false">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<xsl:if test="$IsUnlimited='true'">
									<variableDeclarationStatement name="context">
										<init>
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement name="oauthCookie">
										<init>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Cookies">
														<propertyReferenceExpression name="Request">
															<variableReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value=".oauth2"/>
												</indices>
											</arrayIndexerExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="IdentityInequality">
												<variableReferenceExpression name="oauthCookie"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<variableDeclarationStatement name="oauth2Request">
												<init>
													<methodInvokeExpression methodName="Match">
														<target>
															<typeReferenceExpression type="Regex"/>
														</target>
														<parameters>
															<propertyReferenceExpression name="Value">
																<variableReferenceExpression name="oauthCookie"/>
															</propertyReferenceExpression>
															<primitiveExpression>
																<xsl:attribute name="value"><![CDATA[^(.+?)(\:consent)?$]]></xsl:attribute>
															</primitiveExpression>
														</parameters>
													</methodInvokeExpression>
												</init>
											</variableDeclarationStatement>
											<conditionStatement>
												<condition>
													<propertyReferenceExpression name="Success">
														<variableReferenceExpression name="oauth2Request"/>
													</propertyReferenceExpression>
												</condition>
												<trueStatements>
													<variableDeclarationStatement name="requestId">
														<init>
															<propertyReferenceExpression name="Value">
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="Groups">
																			<variableReferenceExpression name="oauth2Request"/>
																		</propertyReferenceExpression>
																	</target>
																	<indices>
																		<primitiveExpression value="1"/>
																	</indices>
																</arrayIndexerExpression>
															</propertyReferenceExpression>
														</init>
													</variableDeclarationStatement>
													<variableDeclarationStatement name="authData">
														<init>
															<methodInvokeExpression methodName="AppDataReadAllText">
																<target>
																	<propertyReferenceExpression name="Current">
																		<typeReferenceExpression type="ApplicationServicesBase"/>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<methodInvokeExpression methodName="OAuth2FileName">
																		<parameters>
																			<primitiveExpression value="requests"/>
																			<variableReferenceExpression name="requestId"/>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
														</init>
													</variableDeclarationStatement>
													<conditionStatement>
														<condition>
															<binaryOperatorExpression operator="IdentityInequality">
																<variableReferenceExpression name="authData"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
														</condition>
														<trueStatements>
															<variableDeclarationStatement name="authRequest">
																<init>
																	<methodInvokeExpression methodName="ParseYamlOrJson">
																		<target>
																			<typeReferenceExpression type="TextUtility"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="authData"/>
																		</parameters>
																	</methodInvokeExpression>
																</init>
															</variableDeclarationStatement>
															<variableDeclarationStatement name="appState">
																<init>
																	<objectCreateExpression type="JObject"/>
																</init>
															</variableDeclarationStatement>
															<assignStatement>
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="Items">
																			<variableReferenceExpression name="context"/>
																		</propertyReferenceExpression>
																	</target>
																	<indices>
																		<primitiveExpression value="AppState"/>
																	</indices>
																</arrayIndexerExpression>
																<variableReferenceExpression name="appState"/>
															</assignStatement>
															<assignStatement>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="appState"/>
																	</target>
																	<indices>
																		<primitiveExpression value="type"/>
																	</indices>
																</arrayIndexerExpression>
																<primitiveExpression value="oauth2"/>
															</assignStatement>
															<assignStatement>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="appState"/>
																	</target>
																	<indices>
																		<primitiveExpression value="name"/>
																	</indices>
																</arrayIndexerExpression>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="authRequest"/>
																	</target>
																	<indices>
																		<primitiveExpression value="name"/>
																	</indices>
																</arrayIndexerExpression>
															</assignStatement>
															<assignStatement>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="appState"/>
																	</target>
																	<indices>
																		<primitiveExpression value="author"/>
																	</indices>
																</arrayIndexerExpression>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="authRequest"/>
																	</target>
																	<indices>
																		<primitiveExpression value="author"/>
																	</indices>
																</arrayIndexerExpression>
															</assignStatement>
															<assignStatement>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="appState"/>
																	</target>
																	<indices>
																		<primitiveExpression value="trusted"/>
																	</indices>
																</arrayIndexerExpression>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="authRequest"/>
																	</target>
																	<indices>
																		<primitiveExpression value="trusted"/>
																	</indices>
																</arrayIndexerExpression>
															</assignStatement>
															<assignStatement>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="appState"/>
																	</target>
																	<indices>
																		<primitiveExpression value="request_id"/>
																	</indices>
																</arrayIndexerExpression>
																<variableReferenceExpression name="requestId"/>
															</assignStatement>
															<assignStatement>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="appState"/>
																	</target>
																	<indices>
																		<primitiveExpression value="consent"/>
																	</indices>
																</arrayIndexerExpression>
																<binaryOperatorExpression operator="ValueEquality">
																	<propertyReferenceExpression name="Value">
																		<arrayIndexerExpression>
																			<target>
																				<propertyReferenceExpression name="Groups">
																					<variableReferenceExpression name="oauth2Request"/>
																				</propertyReferenceExpression>
																			</target>
																			<indices>
																				<primitiveExpression value="2"/>
																			</indices>
																		</arrayIndexerExpression>
																	</propertyReferenceExpression>
																	<primitiveExpression value=":consent"/>
																</binaryOperatorExpression>
															</assignStatement>
															<variableDeclarationStatement name="resource">
																<init>
																	<objectCreateExpression type="RESTfulResource"/>
																</init>
															</variableDeclarationStatement>
															<methodInvokeExpression methodName="TrimScopesIn">
																<target>
																	<variableReferenceExpression name="resource"/>
																</target>
																<parameters>
																	<argumentReferenceExpression name="authRequest"/>
																</parameters>
															</methodInvokeExpression>
															<assignStatement>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="appState"/>
																	</target>
																	<indices>
																		<primitiveExpression value="scope"/>
																	</indices>
																</arrayIndexerExpression>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="authRequest"/>
																	</target>
																	<indices>
																		<primitiveExpression value="scope"/>
																	</indices>
																</arrayIndexerExpression>
															</assignStatement>
														</trueStatements>
														<falseStatements>
															<assignStatement>
																<propertyReferenceExpression name="Expires">
																	<variableReferenceExpression name="oauthCookie"/>
																</propertyReferenceExpression>
																<methodInvokeExpression methodName="AddDays">
																	<target>
																		<propertyReferenceExpression name="Now">
																			<typeReferenceExpression type="DateTime"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="-10"/>
																	</parameters>
																</methodInvokeExpression>
															</assignStatement>
															<assignStatement>
																<propertyReferenceExpression name="Value">
																	<variableReferenceExpression name="oauthCookie"/>
																</propertyReferenceExpression>
																<primitiveExpression value="null"/>
															</assignStatement>
															<methodInvokeExpression methodName="SetCookie">
																<target>
																	<typeReferenceExpression type="ApplicationServices"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="oauthCookie"/>
																</parameters>
															</methodInvokeExpression>
														</falseStatements>
													</conditionStatement>
												</trueStatements>
											</conditionStatement>
											<conditionStatement>
												<condition>
													<propertyReferenceExpression name="IsAuthenticated">
														<propertyReferenceExpression name="Identity">
															<propertyReferenceExpression name="User">
																<variableReferenceExpression name="context"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</condition>
												<trueStatements>
													<assignStatement>
														<variableReferenceExpression name="result"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[<div data-app-role="page"></div>]]></xsl:attribute>
														</primitiveExpression>
													</assignStatement>
												</trueStatements>
											</conditionStatement>
										</trueStatements>
									</conditionStatement>
								</xsl:if>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method AccessTokenToSelfEncryptedToken(string, out string) -->
						<memberMethod returnType="System.Boolean" name="AccessTokenToSelfEncryptedToken">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="accessToken"/>
								<parameter type="System.String" name="selfEncryptedToken" direction="Out"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="result">
									<init>
										<primitiveExpression value="true"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<argumentReferenceExpression name="selfEncryptedToken"/>
									<argumentReferenceExpression name="accessToken"/>
								</assignStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<argumentReferenceExpression name="accessToken"/>
											</unaryOperatorExpression>
											<binaryOperatorExpression operator="LessThanOrEqual">
												<propertyReferenceExpression name="Length">
													<argumentReferenceExpression name="accessToken"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="AccessTokenSize"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<comment>80 - access_token; 64 - refresh_token</comment>
										<variableDeclarationStatement name="tokenData">
											<init>
												<methodInvokeExpression methodName="AppDataReadAllText">
													<target>
														<methodInvokeExpression methodName="Create">
															<target>
																<typeReferenceExpression type="ApplicationServices"/>
															</target>
														</methodInvokeExpression>
													</target>
													<parameters>
														<methodInvokeExpression methodName="OAuth2FileName">
															<parameters>
																<primitiveExpression value="tokens/%"/>
																<argumentReferenceExpression name="accessToken"/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="tokenData"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="tokenRequest">
													<init>
														<methodInvokeExpression methodName="ParseYamlOrJson">
															<target>
																<typeReferenceExpression type="TextUtility"/>
															</target>
															<parameters>
																<variableReferenceExpression name="tokenData"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<assignStatement>
													<variableReferenceExpression name="selfEncryptedToken"/>
													<castExpression targetType="System.String">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="tokenRequest"/>
															</target>
															<indices>
																<primitiveExpression value="token"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNullOrEmpty">
															<variableReferenceExpression name="accessToken"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="result"/>
															<primitiveExpression value="false"/>
														</assignStatement>
													</trueStatements>
													<falseStatements>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<propertyReferenceExpression name="Items">
																		<propertyReferenceExpression name="Current">
																			<typeReferenceExpression type="HttpContext"/>
																		</propertyReferenceExpression>
																	</propertyReferenceExpression>
																</target>
																<indices>
																	<primitiveExpression value="OAuth2_scope"/>
																</indices>
															</arrayIndexerExpression>
															<convertExpression to="String">
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="tokenRequest"/>
																	</target>
																	<indices>
																		<primitiveExpression value="scope"/>
																	</indices>
																</arrayIndexerExpression>
															</convertExpression>
														</assignStatement>
														<assignStatement>
															<propertyReferenceExpression name="IdToken"/>
															<castExpression targetType="JObject">
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="tokenRequest"/>
																	</target>
																	<indices>
																		<primitiveExpression value="id_token"/>
																	</indices>
																</arrayIndexerExpression>
															</castExpression>
														</assignStatement>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<variableReferenceExpression name="result"/>
													<primitiveExpression value="false"/>
												</assignStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method AddLatestVersionLink(JObject, DataCacheItem) -->
						<memberMethod name="AddLatestVersionLink">
							<attributes public="true" final="true"/>
							<parameters>
								<parameter type="JObject" name="result"/>
								<parameter type="DataCacheItem" name="cacheItem"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<propertyReferenceExpression name="IsImmutable"/>
											<propertyReferenceExpression name="Hypermedia"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="latestVersionLink">
											<init>
												<methodInvokeExpression methodName="ToApiName">
													<parameters>
														<primitiveExpression value="latestVersionLink"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="selfLink">
											<init>
												<methodInvokeExpression methodName="ToApiName">
													<parameters>
														<primitiveExpression value="selfLink"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="links">
											<init>
												<methodInvokeExpression methodName="Property">
													<target>
														<argumentReferenceExpression name="result"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="LinksKey"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<variableReferenceExpression name="links"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement/>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement type="JToken" name="latestVersionObj" var="false">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="latestVersionHref">
											<init>
												<primitiveExpression value="href"/>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="JToken" name="selfControl" var="false">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="LinkStyle"/>
													<primitiveExpression value="object"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="selfControl"/>
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Value">
																<variableReferenceExpression name="links"/>
															</propertyReferenceExpression>
														</target>
														<indices>
															<variableReferenceExpression name="selfLink"/>
														</indices>
													</arrayIndexerExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<variableReferenceExpression name="selfControl"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="latestVersionObj"/>
															<methodInvokeExpression methodName="AddLink">
																<parameters>
																	<variableReferenceExpression name="latestVersionLink"/>
																	<primitiveExpression value="GET"/>
																	<variableReferenceExpression name="links"/>
																	<castExpression targetType="System.String">
																		<arrayIndexerExpression>
																			<target>
																				<variableReferenceExpression name="selfControl"/>
																			</target>
																			<indices>
																				<primitiveExpression value="href"/>
																			</indices>
																		</arrayIndexerExpression>
																	</castExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<methodInvokeExpression methodName="Remove">
															<target>
																<variableReferenceExpression name="latestVersionObj"/>
															</target>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="AddAfterSelf">
															<target>
																<propertyReferenceExpression name="Parent">
																	<variableReferenceExpression name="selfControl"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<variableReferenceExpression name="latestVersionObj"/>
															</parameters>
														</methodInvokeExpression>
														<assignStatement>
															<variableReferenceExpression name="latestVersionObj"/>
															<propertyReferenceExpression name="Value">
																<castExpression targetType="JProperty">
																	<variableReferenceExpression name="latestVersionObj"/>
																</castExpression>
															</propertyReferenceExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
											<falseStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="LinkStyle"/>
															<primitiveExpression value="array"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="i">
															<init>
																<primitiveExpression value="0"/>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="linksArray">
															<init>
																<castExpression targetType="JArray">
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="links"/>
																	</propertyReferenceExpression>
																</castExpression>
															</init>
														</variableDeclarationStatement>
														<foreachStatement>
															<variable type="JObject" name="control" var="false"/>
															<target>
																<variableReferenceExpression name="linksArray"/>
															</target>
															<statements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<castExpression targetType="System.String">
																				<arrayIndexerExpression>
																					<target>
																						<variableReferenceExpression name="control"/>
																					</target>
																					<indices>
																						<primitiveExpression value="rel"/>
																					</indices>
																				</arrayIndexerExpression>
																			</castExpression>
																			<variableReferenceExpression name="selfLink"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="selfControl"/>
																			<variableReferenceExpression name="control"/>
																		</assignStatement>
																		<assignStatement>
																			<variableReferenceExpression name="latestVersionObj"/>
																			<methodInvokeExpression methodName="AddLink">
																				<parameters>
																					<variableReferenceExpression name="latestVersionLink"/>
																					<primitiveExpression value="GET"/>
																					<variableReferenceExpression name="links"/>
																					<castExpression targetType="System.String">
																						<arrayIndexerExpression>
																							<target>
																								<variableReferenceExpression name="control"/>
																							</target>
																							<indices>
																								<primitiveExpression value="href"/>
																							</indices>
																						</arrayIndexerExpression>
																					</castExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																		<methodInvokeExpression methodName="Remove">
																			<target>
																				<variableReferenceExpression name="linksArray"/>
																			</target>
																			<parameters>
																				<variableReferenceExpression name="latestVersionObj"/>
																			</parameters>
																		</methodInvokeExpression>
																		<methodInvokeExpression methodName="Insert">
																			<target>
																				<variableReferenceExpression name="linksArray"/>
																			</target>
																			<parameters>
																				<binaryOperatorExpression operator="Add">
																					<variableReferenceExpression name="i"/>
																					<primitiveExpression value="1"/>
																				</binaryOperatorExpression>
																				<variableReferenceExpression name="latestVersionObj"/>
																			</parameters>
																		</methodInvokeExpression>
																		<breakStatement/>
																	</trueStatements>
																</conditionStatement>
																<assignStatement>
																	<variableReferenceExpression name="i"/>
																	<binaryOperatorExpression operator="Add">
																		<variableReferenceExpression name="i"/>
																		<primitiveExpression value="1"/>
																	</binaryOperatorExpression>
																</assignStatement>
															</statements>
														</foreachStatement>
													</trueStatements>
													<falseStatements>
														<assignStatement>
															<variableReferenceExpression name="selfControl"/>
															<methodInvokeExpression methodName="Property">
																<target>
																	<castExpression targetType="JObject">
																		<propertyReferenceExpression name="Value">
																			<variableReferenceExpression name="links"/>
																		</propertyReferenceExpression>
																	</castExpression>
																</target>
																<parameters>
																	<variableReferenceExpression name="selfLink"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<variableReferenceExpression name="selfControl"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="latestVersionObj"/>
																	<methodInvokeExpression methodName="AddLink">
																		<parameters>
																			<variableReferenceExpression name="latestVersionLink"/>
																			<primitiveExpression value="GET"/>
																			<variableReferenceExpression name="links"/>
																			<castExpression targetType="System.String">
																				<propertyReferenceExpression name="Value">
																					<castExpression targetType="JProperty">
																						<variableReferenceExpression name="selfControl"/>
																					</castExpression>
																				</propertyReferenceExpression>
																			</castExpression>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
																<methodInvokeExpression methodName="Remove">
																	<target>
																		<variableReferenceExpression name="latestVersionObj"/>
																	</target>
																</methodInvokeExpression>
																<methodInvokeExpression methodName="AddAfterSelf">
																	<target>
																		<variableReferenceExpression name="selfControl"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="latestVersionObj"/>
																	</parameters>
																</methodInvokeExpression>
																<assignStatement>
																	<variableReferenceExpression name="latestVersionObj"/>
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="links"/>
																	</propertyReferenceExpression>
																</assignStatement>
																<assignStatement>
																	<variableReferenceExpression name="latestVersionHref"/>
																	<variableReferenceExpression name="latestVersionLink"/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="latestVersionObj"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="href">
													<init>
														<castExpression targetType="System.String">
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="latestVersionObj"/>
																</target>
																<indices>
																	<variableReferenceExpression name="latestVersionHref"/>
																</indices>
															</arrayIndexerExpression>
														</castExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="Contains">
															<target>
																<variableReferenceExpression name="href"/>
															</target>
															<parameters>
																<primitiveExpression value="?"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="href"/>
															<methodInvokeExpression methodName="Replace">
																<target>
																	<variableReferenceExpression name="href"/>
																</target>
																<parameters>
																	<primitiveExpression value="?"/>
																	<stringFormatExpression>
																		<xsl:attribute name="format"><![CDATA[/{0}?]]></xsl:attribute>
																		<propertyReferenceExpression name="LatestVersionLink"/>
																	</stringFormatExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</trueStatements>
													<falseStatements>
														<assignStatement>
															<variableReferenceExpression name="href"/>
															<stringFormatExpression>
																<xsl:attribute name="format"><![CDATA[{0}/{1}]]></xsl:attribute>
																<variableReferenceExpression name="href"/>
																<propertyReferenceExpression name="LatestVersionLink"/>
															</stringFormatExpression>
														</assignStatement>
													</falseStatements>
												</conditionStatement>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="latestVersionObj"/>
														</target>
														<indices>
															<variableReferenceExpression name="latestVersionHref"/>
														</indices>
													</arrayIndexerExpression>
													<variableReferenceExpression name="href"/>
												</assignStatement>
												<methodInvokeExpression methodName="AddLinkProperty">
													<parameters>
														<variableReferenceExpression name="selfControl"/>
														<primitiveExpression value="max-age"/>
														<propertyReferenceExpression name="Duration">
															<variableReferenceExpression name="cacheItem"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class RESTfulResourceBase -->
				<typeDeclaration name="RESTfulResourceBase" isPartial="true">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="RESTfulResourceConfiguration"/>
					</baseTypes>
					<members>
						<!-- property Operatons -->
						<memberField type="SortedDictionary" name="Operations">
							<typeArguments>
								<typeReference type="System.String"/>
								<typeReference type="OpConstraint"/>
							</typeArguments>
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="SortedDictionary">
									<typeArguments>
										<typeReference type="System.String"/>
										<typeReference type="OpConstraint"/>
									</typeArguments>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- property Operatons -->
						<memberField type="SortedDictionary" name="OperationTypes">
							<typeArguments>
								<typeReference type="System.String"/>
								<typeReference type="System.String[]"/>
							</typeArguments>
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="SortedDictionary">
									<typeArguments>
										<typeReference type="System.String"/>
										<typeReference type="System.String[]"/>
									</typeArguments>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- field masterConfig-->
						<memberField type="ControllerConfiguration" name="masterConfig"/>
						<!-- field masterResrouce -->
						<memberField type="System.String" name="masterResource"/>
						<!-- field lookupConfig -->
						<memberField type="ControllerConfiguration" name="lookupConfig"/>
						<!-- field lookupResource -->
						<memberField type="System.String" name="lookupResource"/>
						<!-- field controller -->
						<memberField type="System.String" name="controller"/>
						<!-- field specifiedView -->
						<memberField type="System.String" name="specifiedView"/>
						<!-- property Controller -->
						<memberProperty type="System.String" name="Controller">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="controller"/>
								</methodReturnStatement>
							</getStatements>
							<setStatements>
								<assignStatement>
									<propertyReferenceExpression name="Config"/>
									<methodInvokeExpression methodName="GetConfig">
										<parameters>
											<propertySetValueReferenceExpression/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<methodInvokeExpression methodName="AllowController">
												<parameters>
													<propertyReferenceExpression name="ControllerName">
														<propertyReferenceExpression name="Config"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="ThrowError">
											<target>
												<typeReferenceExpression type="RESTfulResource"/>
											</target>
											<parameters>
												<primitiveExpression value="403"/>
												<primitiveExpression value="unauthorized"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[Access to the resource '{0}' is denied.]]></xsl:attribute>
												</primitiveExpression>
												<propertyReferenceExpression name="Location"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<fieldReferenceExpression name="controller"/>
									<propertyReferenceExpression name="ControllerName">
										<propertyReferenceExpression name="Config"/>
									</propertyReferenceExpression>
								</assignStatement>
								<assignStatement>
									<fieldReferenceExpression name="specifiedView"/>
									<primitiveExpression value="null"/>
								</assignStatement>
							</setStatements>
						</memberProperty>
						<!-- property View -->
						<memberField type="System.String" name="view"/>
						<memberField type="XPathNavigator" name="viewNav"/>
						<memberField type="ConfigDictionary" name="viewMap"/>
						<memberField type ="ConfigDictionary" name="excludedFields"/>
						<memberProperty type="System.String" name="View">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="view"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property Id -->
						<memberField type="System.String" name="id"/>
						<memberProperty type="System.String" name="Id">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="id"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property Action -->
						<memberField type="XPathNavigator" name="action"/>
						<memberProperty type="XPathNavigator" name="Action">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="action"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property ActionName -->
						<memberField type="System.String" name="actionPathName"/>
						<memberProperty type="System.String" name="ActionPathName">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="actionPathName"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property IsReport -->
						<memberProperty type="System.Boolean" name="IsReport">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<binaryOperatorExpression operator="BooleanAnd">
										<binaryOperatorExpression operator="IdentityInequality">
											<fieldReferenceExpression name="action"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
										<methodInvokeExpression methodName="IsMatch">
											<target>
												<typeReferenceExpression type="Regex"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="GetAttribute">
													<target>
														<fieldReferenceExpression name="action"/>
													</target>
													<parameters>
														<primitiveExpression value="commandName"/>
														<stringEmptyExpression/>
													</parameters>
												</methodInvokeExpression>
												<primitiveExpression value="^Report"/>
											</parameters>
										</methodInvokeExpression>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property PK -->
						<memberField type="List" name="pk">
							<typeArguments>
								<typeReference type="FieldValue"/>
							</typeArguments>
						</memberField>
						<memberProperty type="List" name="PK">
							<typeArguments>
								<typeReference type="FieldValue"/>
							</typeArguments>
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="pk"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property Filter -->
						<memberField type="List" name="filter">
							<typeArguments>
								<typeReference type="FieldValue"/>
							</typeArguments>
						</memberField>
						<memberProperty type="List" name="Filter">
							<typeArguments>
								<typeReference type="FieldValue"/>
							</typeArguments>
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="filter"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property FollowTo -->
						<memberField type="System.String" name="followTo"/>
						<memberProperty type="System.String" name="FollowTo">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="followTo"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property Following -->
						<memberProperty type="System.Boolean" name="Following">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<unaryOperatorExpression operator="IsNotNullOrEmpty">
										<fieldReferenceExpression name="followTo"/>
									</unaryOperatorExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property Field -->
						<memberField type="System.String" name="field"/>
						<memberField type="XPathNavigator" name="fieldNav"/>
						<memberProperty type="System.String" name="Field">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="field"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property BlobFileName -->
						<memberField type="System.String" name="blobFileName"/>
						<memberProperty type="System.String" name="BlobFileName">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="blobFileName"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property Location -->
						<memberField type="List" name="resourceLocation">
							<typeArguments>
								<typeReference type="System.String"/>
							</typeArguments>
						</memberField>
						<memberProperty type="System.String" name="Location">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<binaryOperatorExpression operator="Add">
										<primitiveExpression value="/v2/"/>
										<methodInvokeExpression methodName="Join">
											<target>
												<typeReferenceExpression type="System.String"/>
											</target>
											<parameters>
												<primitiveExpression value="/"/>
												<fieldReferenceExpression name="resourceLocation"/>
											</parameters>
										</methodInvokeExpression>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property FieldMap -->
						<memberField type="ConfigDictionary" name="fieldMap"/>
						<memberProperty type="ConfigDictionary" name="FieldMap">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="fieldMap"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property IsRoot -->
						<memberField type="System.Boolean" name="isRoot"/>
						<memberProperty type="System.Boolean" name="IsRoot">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="isRoot"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property IsCollection -->
						<memberField type="System.Boolean" name="isCollection"/>
						<memberProperty type="System.Boolean" name="IsCollection">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="isCollection"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property IsSingleton -->
						<memberProperty type="System.Boolean" name="IsSingleton">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<unaryOperatorExpression operator="Not">
										<propertyReferenceExpression name="IsCollection"/>
									</unaryOperatorExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- field args -->
						<memberField type="JObject" name="args"/>
						<!-- field result -->
						<memberField type="JToken" name="result"/>
						<!-- property OAuth2Schema -->
						<memberProperty type="System.String" name="OAuth2Schema">
							<attributes public="true" static="true"/>
							<getStatements>
								<variableDeclarationStatement name="filename">
									<init>
										<primitiveExpression value="~/config/oauth2-schema.yaml"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="schema">
									<init>
										<castExpression targetType="System.String">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Cache">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<variableReferenceExpression name="filename"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<variableReferenceExpression name="schema"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="fullPath">
											<init>
												<methodInvokeExpression methodName="MapPath">
													<target>
														<propertyReferenceExpression name="Server">
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="HttpContext"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<variableReferenceExpression name="filename"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<variableReferenceExpression name="schema"/>
											<methodInvokeExpression methodName="ReadAllText">
												<target>
													<typeReferenceExpression type="File"/>
												</target>
												<parameters>
													<variableReferenceExpression name="fullPath"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<propertyReferenceExpression name="Cache">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<variableReferenceExpression name="filename"/>
												<variableReferenceExpression name="schema"/>
												<objectCreateExpression type="CacheDependency">
													<parameters>
														<variableReferenceExpression name="fullPath"/>
													</parameters>
												</objectCreateExpression>
												<propertyReferenceExpression name="NoAbsoluteExpiration">
													<typeReferenceExpression type="Cache"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="NoSlidingExpiration">
													<typeReferenceExpression type="Cache"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="Normal">
													<typeReferenceExpression type="CacheItemPriority"/>
												</propertyReferenceExpression>
												<primitiveExpression value="null"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="schema"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- field customSchemaPath -->
						<memberField type="GroupCollection" name="customSchemaPath"/>
						<!-- property CustomSchema -->
						<memberProperty type="JObject" name="CustomSchema">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- method RetractLocation() -->
						<memberMethod name="RetractLocation">
							<attributes family="true" final="true"/>
							<statements>
								<methodInvokeExpression methodName="RemoveAt">
									<target>
										<fieldReferenceExpression name="resourceLocation"/>
									</target>
									<parameters>
										<binaryOperatorExpression operator="Subtract">
											<propertyReferenceExpression name="Count">
												<fieldReferenceExpression name="resourceLocation"/>
											</propertyReferenceExpression>
											<primitiveExpression value="1"/>
										</binaryOperatorExpression>
									</parameters>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method FindSchema(string, string) -->
						<memberMethod returnType="JObject" name="FindSchema">
							<attributes public="true" final="true"/>
							<parameters>
								<parameter type="System.String" name="schemaDef"/>
								<parameter type="System.String" name="action"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="schema">
									<init>
										<castExpression targetType="JObject">
											<methodInvokeExpression methodName="ParseYamlOrJson">
												<target>
													<typeReferenceExpression type="TextUtility"/>
												</target>
												<parameters>
													<methodInvokeExpression methodName="Replace">
														<target>
															<typeReferenceExpression type="Regex"/>
														</target>
														<parameters>
															<argumentReferenceExpression name="schemaDef"/>
															<primitiveExpression value="\$Application"/>
															<propertyReferenceExpression name="DisplayName">
																<propertyReferenceExpression name="App"/>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
													<primitiveExpression value="true"/>
												</parameters>
											</methodInvokeExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="resourceSchema">
									<init>
										<castExpression targetType="JObject">
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="schema"/>
												</target>
												<indices>
													<argumentReferenceExpression name="action"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="resourceSchema"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<foreachStatement>
											<variable name="p"/>
											<target>
												<variableReferenceExpression name="schema"/>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="Contains">
															<target>
																<propertyReferenceExpression name="Key">
																	<variableReferenceExpression name="p"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<primitiveExpression value="$"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="re">
															<init>
																<objectCreateExpression type="Regex">
																	<parameters>
																		<binaryOperatorExpression operator="Add">
																			<primitiveExpression value="^"/>
																			<methodInvokeExpression methodName="Replace">
																				<target>
																					<typeReferenceExpression type="Regex"/>
																				</target>
																				<parameters>
																					<propertyReferenceExpression name="Key">
																						<variableReferenceExpression name="p"/>
																					</propertyReferenceExpression>
																					<primitiveExpression>
																						<xsl:attribute name="value"><![CDATA[\$(\w+)]]></xsl:attribute>
																					</primitiveExpression>
																					<primitiveExpression>
																						<xsl:attribute name="value"><![CDATA[(?'$1'.+?)(?=/|$)]]></xsl:attribute>
																					</primitiveExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</binaryOperatorExpression>
																	</parameters>
																</objectCreateExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="m">
															<init>
																<methodInvokeExpression methodName="Match">
																	<target>
																		<variableReferenceExpression name="re"/>
																	</target>
																	<parameters>
																		<argumentReferenceExpression name="action"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<propertyReferenceExpression name="Success">
																		<variableReferenceExpression name="m"/>
																	</propertyReferenceExpression>
																	<binaryOperatorExpression operator="ValueEquality">
																		<propertyReferenceExpression name="Length">
																			<propertyReferenceExpression name="Value">
																				<variableReferenceExpression name="m"/>
																			</propertyReferenceExpression>
																		</propertyReferenceExpression>
																		<propertyReferenceExpression name="Length">
																			<argumentReferenceExpression name="action"/>
																		</propertyReferenceExpression>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<fieldReferenceExpression name="customSchemaPath"/>
																	<propertyReferenceExpression name="Groups">
																		<variableReferenceExpression name="m"/>
																	</propertyReferenceExpression>
																</assignStatement>
																<assignStatement>
																	<variableReferenceExpression name="resourceSchema"/>
																	<castExpression targetType="JObject">
																		<arrayIndexerExpression>
																			<target>
																				<variableReferenceExpression name="schema"/>
																			</target>
																			<indices>
																				<propertyReferenceExpression name="Key">
																					<variableReferenceExpression name="p"/>
																				</propertyReferenceExpression>
																			</indices>
																		</arrayIndexerExpression>
																	</castExpression>
																</assignStatement>
																<breakStatement/>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="resourceSchema"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method LocalPathToSchema(List<string>, sting, int) -->
						<memberMethod returnType="JObject" name="LocalPathToSchema">
							<attributes public="true"/>
							<parameters>
								<parameter type="List" name="localPath">
									<typeArguments>
										<typeReference type="System.String"/>
									</typeArguments>
								</parameter>
								<parameter type="System.String" name="segment"/>
								<parameter type="System.Int32" name="index"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="JObject" name="schema" var="false">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="IsOAuth">
											<typeReferenceExpression type="RESTfulResource"/>
										</propertyReferenceExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertyReferenceExpression name="OAuth"/>
											<argumentReferenceExpression name="segment"/>
										</assignStatement>
										<!-- 
										if (index < localPath.Count - 1)         // <<< Removed from the final code
												OAuthMethod = localPath[index + 1];  // <<< 
										OAuthMethod = string.Join("/", new ArraySegment<string>(localPath.ToArray(), index + 1, localPath.Count - index - 1));
										-->
										<!--
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="LessThan">
													<argumentReferenceExpression name="index"/>
													<binaryOperatorExpression operator="Subtract">
														<propertyReferenceExpression name="Count">
															<argumentReferenceExpression name="localPath"/>
														</propertyReferenceExpression>
														<primitiveExpression value="1"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<propertyReferenceExpression name="OAuthMethod"/>
													<arrayIndexerExpression>
														<target>
															<argumentReferenceExpression name="localPath"/>
														</target>
														<indices>
															<binaryOperatorExpression operator="Subtract">
																<argumentReferenceExpression name="index"/>
																<primitiveExpression value="1"/>
															</binaryOperatorExpression>
														</indices>
													</arrayIndexerExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>-->
										<assignStatement>
											<propertyReferenceExpression name="OAuthMethod"/>
											<methodInvokeExpression methodName="Join">
												<target>
													<typeReferenceExpression type="System.String"/>
												</target>
												<parameters>
													<primitiveExpression value="/"/>
													<objectCreateExpression type="ArraySegment">
														<typeArguments>
															<typeReference type="System.String"/>
														</typeArguments>
														<parameters>
															<methodInvokeExpression methodName="ToArray">
																<target>
																	<argumentReferenceExpression name="localPath"/>
																</target>
															</methodInvokeExpression>
															<binaryOperatorExpression operator="Add">
																<argumentReferenceExpression name="index"/>
																<primitiveExpression value="1"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="Subtract">
																<binaryOperatorExpression operator="Subtract">
																	<propertyReferenceExpression name="Count">
																		<argumentReferenceExpression name="localPath"/>
																	</propertyReferenceExpression>
																	<argumentReferenceExpression name="index"/>
																</binaryOperatorExpression>
																<primitiveExpression value="1"/>
															</binaryOperatorExpression>
														</parameters>
													</objectCreateExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<variableReferenceExpression name="schema"/>
											<methodInvokeExpression methodName="FindSchema">
												<parameters>
													<propertyReferenceExpression name="OAuth2Schema"/>
													<propertyReferenceExpression name="OAuthMethodName"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<variableReferenceExpression name="schema"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="availableMethods">
													<init>
														<objectCreateExpression type="List">
															<typeArguments>
																<typeReference type="System.String"/>
															</typeArguments>
														</objectCreateExpression>
													</init>
												</variableDeclarationStatement>
												<foreachStatement>
													<variable name="method"/>
													<target>
														<propertyReferenceExpression name="SupportedMethods">
															<typeReferenceExpression type="V2ServiceRequestHandlerBase"/>
														</propertyReferenceExpression>
													</target>
													<statements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<methodInvokeExpression methodName="FindSchema">
																		<parameters>
																			<propertyReferenceExpression name="OAuth2Schema"/>
																			<binaryOperatorExpression operator="Add">
																				<methodInvokeExpression methodName="ToLower">
																					<target>
																						<variableReferenceExpression name="method"/>
																					</target>
																				</methodInvokeExpression>
																				<binaryOperatorExpression operator="Add">
																					<primitiveExpression value="/"/>
																					<propertyReferenceExpression name="OAuthMethodPath"/>
																				</binaryOperatorExpression>
																			</binaryOperatorExpression>
																		</parameters>
																	</methodInvokeExpression>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="availableMethods"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="method"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</statements>
												</foreachStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="GreaterThan">
															<propertyReferenceExpression name="Count">
																<variableReferenceExpression name="availableMethods"/>
															</propertyReferenceExpression>
															<primitiveExpression value="0"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="invalid_method"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Method {0} is not allowed with the '{1}' resource. Use {2} instead.]]></xsl:attribute>
																</primitiveExpression>
																<propertyReferenceExpression name="HttpMethod"/>
																<propertyReferenceExpression name="OAuthMethodPath"/>
																<methodInvokeExpression methodName="Join">
																	<target>
																		<typeReferenceExpression type="System.String"/>
																	</target>
																	<parameters>
																		<primitiveExpression value=", "/>
																		<variableReferenceExpression name="availableMethods"/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="invalid_path"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Unknown OAuth resource '{0}' is specified.]]></xsl:attribute>
														</primitiveExpression>
														<propertyReferenceExpression name="OAuthMethodPath"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="schema"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method Navigate(JObject) -->
						<memberMethod name="Navigate">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<assignStatement>
									<fieldReferenceExpression name="args"/>
									<argumentReferenceExpression name="args"/>
								</assignStatement>
								<assignStatement>
									<fieldReferenceExpression name="filter"/>
									<objectCreateExpression type="List">
										<typeArguments>
											<typeReference type="FieldValue"/>
										</typeArguments>
									</objectCreateExpression>
								</assignStatement>
								<assignStatement>
									<fieldReferenceExpression name="pk"/>
									<objectCreateExpression type="List">
										<typeArguments>
											<typeReference type="FieldValue"/>
										</typeArguments>
									</objectCreateExpression>
								</assignStatement>
								<assignStatement>
									<fieldReferenceExpression name="excludedFields"/>
									<objectCreateExpression type="ConfigDictionary"/>
								</assignStatement>
								<variableDeclarationStatement name="url">
									<init>
										<propertyReferenceExpression name="Url">
											<propertyReferenceExpression name="Request">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<methodInvokeExpression methodName="ValidateApiUri">
												<parameters>
													<variableReferenceExpression name="url"/>
												</parameters>
											</methodInvokeExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertyReferenceExpression name="StatusCode">
												<propertyReferenceExpression name="Response">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
											<primitiveExpression value="404"/>
										</assignStatement>
										<methodInvokeExpression methodName="End">
											<target>
												<propertyReferenceExpression name="Response">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="localPathString">
									<init>
										<propertyReferenceExpression name="LocalPath">
											<variableReferenceExpression name="url"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="EndsWith">
											<target>
												<variableReferenceExpression name="localPathString"/>
											</target>
											<parameters>
												<primitiveExpression value="/"/>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="ThrowError">
											<target>
												<typeReferenceExpression type="RESTfulResource"/>
											</target>
											<parameters>
												<primitiveExpression value="invalid_uri"/>
												<primitiveExpression value="The resource path cannot end with the '/' symbol."/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="localPath">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
											<parameters>
												<methodInvokeExpression methodName="Split">
													<target>
														<typeReferenceExpression type="Regex"/>
													</target>
													<parameters>
														<variableReferenceExpression name="localPathString"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[\/]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="pathIndex">
									<init>
										<primitiveExpression value="0"/>
									</init>
								</variableDeclarationStatement>
								<whileStatement>
									<test>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="ValueInequality">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="localPath"/>
													</target>
													<indices>
														<variableReferenceExpression name="pathIndex"/>
													</indices>
												</arrayIndexerExpression>
												<primitiveExpression value="v2"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="LessThan">
												<variableReferenceExpression name="pathIndex"/>
												<propertyReferenceExpression name="Count">
													<variableReferenceExpression name="localPath"/>
												</propertyReferenceExpression>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</test>
									<statements>
										<assignStatement>
											<variableReferenceExpression name="pathIndex"/>
											<binaryOperatorExpression operator="Add">
												<variableReferenceExpression name="pathIndex"/>
												<primitiveExpression value="1"/>
											</binaryOperatorExpression>
										</assignStatement>
									</statements>
								</whileStatement>
								<assignStatement>
									<variableReferenceExpression name="pathIndex"/>
									<binaryOperatorExpression operator="Add">
										<variableReferenceExpression name="pathIndex"/>
										<primitiveExpression value="1"/>
									</binaryOperatorExpression>
								</assignStatement>
								<variableDeclarationStatement name="isLatestVersion">
									<init>
										<primitiveExpression value="false"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<propertyReferenceExpression name="IsOAuth">
												<typeReferenceExpression type="RESTfulResource"/>
											</propertyReferenceExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="localPath"/>
														</target>
														<indices>
															<binaryOperatorExpression operator="Subtract">
																<propertyReferenceExpression name="Count">
																	<variableReferenceExpression name="localPath"/>
																</propertyReferenceExpression>
																<primitiveExpression value="1"/>
															</binaryOperatorExpression>
														</indices>
													</arrayIndexerExpression>
													<propertyReferenceExpression name="LatestVersionLink"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="isLatestVersion"/>
													<primitiveExpression value="true"/>
												</assignStatement>
												<methodInvokeExpression methodName="RemoveAt">
													<target>
														<variableReferenceExpression name="localPath"/>
													</target>
													<parameters>
														<binaryOperatorExpression operator="Subtract">
															<propertyReferenceExpression name="Count">
																<variableReferenceExpression name="localPath"/>
															</propertyReferenceExpression>
															<primitiveExpression value="1"/>
														</binaryOperatorExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement name="resourceFileName">
											<init>
												<methodInvokeExpression methodName="Match">
													<target>
														<typeReferenceExpression type="Regex"/>
													</target>
													<parameters>
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="localPath"/>
															</target>
															<indices>
																<binaryOperatorExpression operator="Subtract">
																	<propertyReferenceExpression name="Count">
																		<variableReferenceExpression name="localPath"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="1"/>
																</binaryOperatorExpression>
															</indices>
														</arrayIndexerExpression>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[^(\w+)\.(\w+)$]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="Success">
													<variableReferenceExpression name="resourceFileName"/>
												</propertyReferenceExpression>
											</condition>
											<trueStatements>
												<tryStatement>
													<statements>
														<variableDeclarationStatement name="blobIdentifier">
															<init>
																<methodInvokeExpression methodName="Split">
																	<target>
																		<methodInvokeExpression methodName="GetString">
																			<target>
																				<propertyReferenceExpression name="UTF8">
																					<typeReferenceExpression type="Encoding"/>
																				</propertyReferenceExpression>
																			</target>
																			<parameters>
																				<methodInvokeExpression methodName="FromBase64UrlEncoded">
																					<target>
																						<typeReferenceExpression type="TextUtility"/>
																					</target>
																					<parameters>
																						<propertyReferenceExpression name="Value">
																							<arrayIndexerExpression>
																								<target>
																									<propertyReferenceExpression name="Groups">
																										<variableReferenceExpression name="resourceFileName"/>
																									</propertyReferenceExpression>
																								</target>
																								<indices>
																									<primitiveExpression value="1"/>
																								</indices>
																							</arrayIndexerExpression>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="/" convertTo="Char"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<binaryOperatorExpression operator="ValueEquality">
																		<propertyReferenceExpression name="Length">
																			<variableReferenceExpression name="blobIdentifier"/>
																		</propertyReferenceExpression>
																		<primitiveExpression value="3"/>
																	</binaryOperatorExpression>
																	<binaryOperatorExpression operator="BooleanAnd">
																		<binaryOperatorExpression operator="ValueEquality">
																			<arrayIndexerExpression>
																				<target>
																					<variableReferenceExpression name="blobIdentifier"/>
																				</target>
																				<indices>
																					<primitiveExpression value="1"/>
																				</indices>
																			</arrayIndexerExpression>
																			<methodInvokeExpression methodName="UrlEncode">
																				<target>
																					<typeReferenceExpression type="HttpUtility"/>
																				</target>
																				<parameters>
																					<arrayIndexerExpression>
																						<target>
																							<variableReferenceExpression name="blobIdentifier"/>
																						</target>
																						<indices>
																							<primitiveExpression value="1"/>
																						</indices>
																					</arrayIndexerExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</binaryOperatorExpression>
																		<binaryOperatorExpression operator="ValueEquality">
																			<arrayIndexerExpression>
																				<target>
																					<variableReferenceExpression name="blobIdentifier"/>
																				</target>
																				<indices>
																					<primitiveExpression value="2"/>
																				</indices>
																			</arrayIndexerExpression>
																			<methodInvokeExpression methodName="Substring">
																				<target>
																					<propertyReferenceExpression name="Value">
																						<arrayIndexerExpression>
																							<target>
																								<propertyReferenceExpression name="Groups">
																									<variableReferenceExpression name="resourceFileName"/>
																								</propertyReferenceExpression>
																							</target>
																							<indices>
																								<primitiveExpression value="2"/>
																							</indices>
																						</arrayIndexerExpression>
																					</propertyReferenceExpression>
																				</target>
																				<parameters>
																					<primitiveExpression value="0"/>
																					<primitiveExpression value="1"/>
																				</parameters>
																			</methodInvokeExpression>
																		</binaryOperatorExpression>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="RemoveAt">
																	<target>
																		<variableReferenceExpression name="localPath"/>
																	</target>
																	<parameters>
																		<binaryOperatorExpression operator="Subtract">
																			<propertyReferenceExpression name="Count">
																				<variableReferenceExpression name="localPath"/>
																			</propertyReferenceExpression>
																			<primitiveExpression value="1"/>
																		</binaryOperatorExpression>
																	</parameters>
																</methodInvokeExpression>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<arrayIndexerExpression>
																				<target>
																					<variableReferenceExpression name="localPath"/>
																				</target>
																				<indices>
																					<binaryOperatorExpression operator="Subtract">
																						<propertyReferenceExpression name="Count">
																							<variableReferenceExpression name="localPath"/>
																						</propertyReferenceExpression>
																						<primitiveExpression value="1"/>
																					</binaryOperatorExpression>
																				</indices>
																			</arrayIndexerExpression>
																			<propertyReferenceExpression name="LatestVersionLink"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="isLatestVersion"/>
																			<primitiveExpression value="true"/>
																		</assignStatement>
																		<methodInvokeExpression methodName="RemoveAt">
																			<target>
																				<variableReferenceExpression name="localPath"/>
																			</target>
																			<parameters>
																				<binaryOperatorExpression operator="Subtract">
																					<propertyReferenceExpression name="Count">
																						<variableReferenceExpression name="localPath"/>
																					</propertyReferenceExpression>
																					<primitiveExpression value="1"/>
																				</binaryOperatorExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="localPath"/>
																	</target>
																	<parameters>
																		<arrayIndexerExpression>
																			<target>
																				<variableReferenceExpression name="blobIdentifier"/>
																			</target>
																			<indices>
																				<primitiveExpression value="0"/>
																			</indices>
																		</arrayIndexerExpression>
																	</parameters>
																</methodInvokeExpression>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="localPath"/>
																	</target>
																	<parameters>
																		<arrayIndexerExpression>
																			<target>
																				<variableReferenceExpression name="blobIdentifier"/>
																			</target>
																			<indices>
																				<primitiveExpression value="1"/>
																			</indices>
																		</arrayIndexerExpression>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</statements>
													<catch exceptionType="Exception"></catch>
												</tryStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<fieldReferenceExpression name="resourceLocation"/>
									<objectCreateExpression type="List">
										<typeArguments>
											<typeReference type="System.String"/>
										</typeArguments>
									</objectCreateExpression>
								</assignStatement>
								<variableDeclarationStatement name="segment">
									<init>
										<stringEmptyExpression/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="apiKey">
									<init>
										<stringEmptyExpression/>
									</init>
								</variableDeclarationStatement>
								<tryStatement>
									<statements>
										<whileStatement>
											<test>
												<binaryOperatorExpression operator="LessThan">
													<variableReferenceExpression name="pathIndex"/>
													<propertyReferenceExpression name="Count">
														<variableReferenceExpression name="localPath"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</test>
											<statements>
												<assignStatement>
													<variableReferenceExpression name="segment"/>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="localPath"/>
														</target>
														<indices>
															<variableReferenceExpression name="pathIndex"/>
														</indices>
													</arrayIndexerExpression>
												</assignStatement>
												<methodInvokeExpression methodName="Add">
													<target>
														<fieldReferenceExpression name="resourceLocation"/>
													</target>
													<parameters>
														<variableReferenceExpression name="segment"/>
													</parameters>
												</methodInvokeExpression>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityEquality">
															<fieldReferenceExpression name="controller"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<variableReferenceExpression name="segment"/>
																	<primitiveExpression value="js"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="StreamJSResource">
																	<parameters>
																		<methodInvokeExpression methodName="PathArrayToString">
																			<parameters>
																				<variableReferenceExpression name="localPath"/>
																				<binaryOperatorExpression operator="Add">
																					<variableReferenceExpression name="pathIndex"/>
																					<primitiveExpression value="1"/>
																				</binaryOperatorExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<propertyReferenceExpression name="CustomSchema"/>
															<methodInvokeExpression methodName="LocalPathToSchema">
																<parameters>
																	<variableReferenceExpression name="localPath"/>
																	<variableReferenceExpression name="segment"/>
																	<variableReferenceExpression name="pathIndex"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<propertyReferenceExpression name="CustomSchema"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<breakStatement/>
															</trueStatements>
														</conditionStatement>
														<variableDeclarationStatement name="endpoint">
															<init>
																<methodInvokeExpression methodName="PathArrayToString">
																	<parameters>
																		<variableReferenceExpression name="localPath"/>
																		<variableReferenceExpression name="pathIndex"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="Not">
																	<methodInvokeExpression methodName="AllowEndpoint">
																		<parameters>
																			<variableReferenceExpression name="endpoint"/>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="403"/>
																		<primitiveExpression value="invalid_path"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[The endpoint '{0}' is not available.]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="endpoint"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<unaryOperatorExpression operator="IsNullOrEmpty">
																		<variableReferenceExpression name="apiKey"/>
																	</unaryOperatorExpression>
																	<binaryOperatorExpression operator="ValueEquality">
																		<propertyReferenceExpression name="PublicApiKeyInPath">
																			<typeReferenceExpression type="RESTfulResource"/>
																		</propertyReferenceExpression>
																		<variableReferenceExpression name="segment"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="apiKey"/>
																	<variableReferenceExpression name="segment"/>
																</assignStatement>
																<assignStatement>
																	<variableReferenceExpression name="pathIndex"/>
																	<binaryOperatorExpression operator="Add">
																		<variableReferenceExpression name="pathIndex"/>
																		<primitiveExpression value="1"/>
																	</binaryOperatorExpression>
																</assignStatement>
																<continueStatement/>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<propertyReferenceExpression name="Controller"/>
															<variableReferenceExpression name="segment"/>
														</assignStatement>
														<assignStatement>
															<fieldReferenceExpression name="isRoot"/>
															<primitiveExpression value="true"/>
														</assignStatement>
														<assignStatement>
															<fieldReferenceExpression name="isCollection"/>
															<primitiveExpression value="true"/>
														</assignStatement>
													</trueStatements>
													<falseStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityEquality">
																	<fieldReferenceExpression name="view"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="GetView">
																				<parameters>
																					<primitiveExpression value="auto"/>
																					<variableReferenceExpression name="segment"/>
																					<directionExpression direction="Out">
																						<fieldReferenceExpression name="view"/>
																					</directionExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="RetractLocation"/>
																		<continueStatement/>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityEquality">
																			<fieldReferenceExpression name="id"/>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<fieldReferenceExpression name="isRoot"/>
																			<primitiveExpression value="false"/>
																		</assignStatement>
																		<conditionStatement>
																			<condition>
																				<unaryOperatorExpression operator="Not">
																					<methodInvokeExpression methodName="GetView">
																						<parameters>
																							<primitiveExpression value="auto"/>
																							<variableReferenceExpression name="segment"/>
																							<directionExpression direction="Out">
																								<fieldReferenceExpression name="view"/>
																							</directionExpression>
																						</parameters>
																					</methodInvokeExpression>
																				</unaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="BooleanAnd">
																							<binaryOperatorExpression operator="ValueEquality">
																								<variableReferenceExpression name="segment"/>
																								<propertyReferenceExpression name="RootKey"/>
																							</binaryOperatorExpression>
																							<unaryOperatorExpression operator="Not">
																								<propertyReferenceExpression name="Following"/>
																							</unaryOperatorExpression>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<assignStatement>
																							<fieldReferenceExpression name="followTo"/>
																							<variableReferenceExpression name="segment"/>
																						</assignStatement>
																						<assignStatement>
																							<fieldReferenceExpression name="id"/>
																							<stringEmptyExpression/>
																						</assignStatement>
																						<assignStatement>
																							<variableReferenceExpression name="pathIndex"/>
																							<binaryOperatorExpression operator="Add">
																								<variableReferenceExpression name="pathIndex"/>
																								<primitiveExpression value="1"/>
																							</binaryOperatorExpression>
																						</assignStatement>
																						<continueStatement/>
																					</trueStatements>
																					<falseStatements>
																						<assignStatement>
																							<fieldReferenceExpression name="id"/>
																							<variableReferenceExpression name="segment"/>
																						</assignStatement>
																						<assignStatement>
																							<propertyReferenceExpression name="LastEntity"/>
																							<fieldReferenceExpression name="id"/>
																						</assignStatement>
																						<variableDeclarationStatement name="pkValue">
																							<init>
																								<methodInvokeExpression methodName="Split">
																									<target>
																										<typeReferenceExpression type="Regex"/>
																									</target>
																									<parameters>
																										<fieldReferenceExpression name="id"/>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[\s*_\s*]]></xsl:attribute>
																										</primitiveExpression>
																									</parameters>
																								</methodInvokeExpression>
																							</init>
																						</variableDeclarationStatement>
																						<variableDeclarationStatement name="pkIndex">
																							<init>
																								<primitiveExpression value="0"/>
																							</init>
																						</variableDeclarationStatement>
																						<foreachStatement>
																							<variable name="pkField"/>
																							<target>
																								<propertyReferenceExpression name="PK"/>
																							</target>
																							<statements>
																								<conditionStatement>
																									<condition>
																										<binaryOperatorExpression operator="LessThan">
																											<variableReferenceExpression name="pkIndex"/>
																											<propertyReferenceExpression name="Length">
																												<variableReferenceExpression name="pkValue"/>
																											</propertyReferenceExpression>
																										</binaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<variableDeclarationStatement name="fieldType">
																											<init>
																												<methodInvokeExpression methodName="GetAttribute">
																													<target>
																														<arrayIndexerExpression>
																															<target>
																																<fieldReferenceExpression name="fieldMap"/>
																															</target>
																															<indices>
																																<propertyReferenceExpression name="Name">
																																	<variableReferenceExpression name="pkField"/>
																																</propertyReferenceExpression>
																															</indices>
																														</arrayIndexerExpression>
																													</target>
																													<parameters>
																														<primitiveExpression value="type"/>
																														<stringEmptyExpression/>
																													</parameters>
																												</methodInvokeExpression>
																											</init>
																										</variableDeclarationStatement>
																										<variableDeclarationStatement name="v">
																											<init>
																												<arrayIndexerExpression>
																													<target>
																														<variableReferenceExpression name="pkValue"/>
																													</target>
																													<indices>
																														<variableReferenceExpression name="pkIndex"/>
																													</indices>
																												</arrayIndexerExpression>
																											</init>
																										</variableDeclarationStatement>
																										<tryStatement>
																											<statements>
																												<assignStatement>
																													<propertyReferenceExpression name="Value">
																														<variableReferenceExpression name="pkField"/>
																													</propertyReferenceExpression>
																													<methodInvokeExpression methodName="StringToValue">
																														<target>
																															<typeReferenceExpression type="DataControllerBase"/>
																														</target>
																														<parameters>
																															<variableReferenceExpression name="fieldType"/>
																															<variableReferenceExpression name="v"/>
																														</parameters>
																													</methodInvokeExpression>
																												</assignStatement>
																											</statements>
																											<catch exceptionType="Exception">
																												<conditionStatement>
																													<condition>
																														<binaryOperatorExpression operator="IdentityInequality">
																															<methodInvokeExpression methodName="FindAction">
																																<parameters>
																																	<variableReferenceExpression name="v"/>
																																</parameters>
																															</methodInvokeExpression>
																															<primitiveExpression value="null"/>
																														</binaryOperatorExpression>
																													</condition>
																													<trueStatements>
																														<methodInvokeExpression methodName="ThrowError">
																															<target>
																																<typeReferenceExpression type="RESTfulResource"/>
																															</target>
																															<parameters>
																																<primitiveExpression value="invalid_method"/>
																																<primitiveExpression>
																																	<xsl:attribute name="value"><![CDATA[Action '{0}' cannot be invoked with the {1} method. Use POST instead.]]></xsl:attribute>
																																</primitiveExpression>
																																<variableReferenceExpression name="v"/>
																																<propertyReferenceExpression name="HttpMethod"/>
																															</parameters>
																														</methodInvokeExpression>
																													</trueStatements>
																												</conditionStatement>
																												<methodInvokeExpression methodName="ThrowError">
																													<target>
																														<typeReferenceExpression type="RESTfulResource"/>
																													</target>
																													<parameters>
																														<primitiveExpression value="invalid_path"/>
																														<primitiveExpression>
																															<xsl:attribute name="value"><![CDATA[Error converting '{0}' to '{1}' at {2} in the url.]]></xsl:attribute>
																														</primitiveExpression>
																														<variableReferenceExpression name="v"/>
																														<variableReferenceExpression name="fieldType"/>
																														<propertyReferenceExpression name="Location"/>
																													</parameters>
																												</methodInvokeExpression>
																											</catch>
																										</tryStatement>
																									</trueStatements>
																									<falseStatements>
																										<methodInvokeExpression methodName="ThrowError">
																											<target>
																												<typeReferenceExpression type="RESTfulResource"/>
																											</target>
																											<parameters>
																												<primitiveExpression value="invalid_parameter"/>
																												<primitiveExpression>
																													<xsl:attribute name="value"><![CDATA[Incorrect number of the key values in the url.]]></xsl:attribute>
																												</primitiveExpression>
																											</parameters>
																										</methodInvokeExpression>
																									</falseStatements>
																								</conditionStatement>
																								<assignStatement>
																									<variableReferenceExpression name="pkIndex"/>
																									<binaryOperatorExpression operator="Add">
																										<variableReferenceExpression name="pkIndex"/>
																										<primitiveExpression value="1"/>
																									</binaryOperatorExpression>
																								</assignStatement>
																							</statements>
																						</foreachStatement>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="ValueEquality">
																									<variableReferenceExpression name="pkIndex"/>
																									<primitiveExpression value="0"/>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<methodInvokeExpression methodName="ThrowError">
																									<target>
																										<typeReferenceExpression type="RESTfulResource"/>
																									</target>
																									<parameters>
																										<primitiveExpression value="invalid_path"/>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[Object cannot be selected by resource key specified at {0} in the path.]]></xsl:attribute>
																										</primitiveExpression>
																										<propertyReferenceExpression name="Location"/>
																									</parameters>
																								</methodInvokeExpression>
																							</trueStatements>
																							<falseStatements>
																								<conditionStatement>
																									<condition>
																										<binaryOperatorExpression operator="LessThan">
																											<variableReferenceExpression name="pkIndex"/>
																											<propertyReferenceExpression name="Length">
																												<variableReferenceExpression name="pkValue"/>
																											</propertyReferenceExpression>
																										</binaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<methodInvokeExpression methodName="ThrowError">
																											<target>
																												<typeReferenceExpression type="RESTfulResource"/>
																											</target>
																											<parameters>
																												<primitiveExpression value="invalid_path"/>
																												<primitiveExpression>
																													<xsl:attribute name="value"><![CDATA[Too many key values at {0} in the path.]]></xsl:attribute>
																												</primitiveExpression>
																												<propertyReferenceExpression name="Location"/>
																											</parameters>
																										</methodInvokeExpression>
																									</trueStatements>
																								</conditionStatement>
																							</falseStatements>
																						</conditionStatement>
																						<variableDeclarationStatement name="originalFilter">
																							<init>
																								<propertyReferenceExpression name="Filter"/>
																							</init>
																						</variableDeclarationStatement>
																						<assignStatement>
																							<fieldReferenceExpression name="filter"/>
																							<objectCreateExpression type="List">
																								<typeArguments>
																									<typeReference type="FieldValue"/>
																								</typeArguments>
																								<parameters>
																									<propertyReferenceExpression name="PK"/>
																								</parameters>
																							</objectCreateExpression>
																						</assignStatement>
																						<methodInvokeExpression methodName="AddRange">
																							<target>
																								<fieldReferenceExpression name="filter"/>
																							</target>
																							<parameters>
																								<variableReferenceExpression name="originalFilter"/>
																							</parameters>
																						</methodInvokeExpression>
																						<comment>read the current row to figure the value of the lookp field</comment>
																						<conditionStatement>
																							<condition>
																								<unaryOperatorExpression operator="IsNotNullOrWhiteSpace">
																									<methodInvokeExpression methodName="GetAttribute">
																										<target>
																											<fieldReferenceExpression name="viewNav"/>
																										</target>
																										<parameters>
																											<primitiveExpression value="filter"/>
																											<stringEmptyExpression/>
																										</parameters>
																									</methodInvokeExpression>
																								</unaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<variableDeclarationStatement name="p">
																									<init>
																										<methodInvokeExpression methodName="GetContext">
																											<parameters>
																												<methodInvokeExpression methodName="PrimaryKeyToFieldNames"/>
																											</parameters>
																										</methodInvokeExpression>
																									</init>
																								</variableDeclarationStatement>
																								<conditionStatement>
																									<condition>
																										<binaryOperatorExpression operator="ValueEquality">
																											<propertyReferenceExpression name="Count">
																												<propertyReferenceExpression name="Rows">
																													<variableReferenceExpression name="p"/>
																												</propertyReferenceExpression>
																											</propertyReferenceExpression>
																											<primitiveExpression value="0"/>
																										</binaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<methodInvokeExpression methodName="ThrowError">
																											<target>
																												<typeReferenceExpression type="RESTfulResource"/>
																											</target>
																											<parameters>
																												<primitiveExpression value="404"/>
																												<primitiveExpression value="invalid_path"/>
																												<primitiveExpression>
																													<xsl:attribute name="value"><![CDATA[Entity {0} does not exist.]]></xsl:attribute>
																												</primitiveExpression>
																												<methodInvokeExpression methodName="TrimLocationToIdentifier"/>
																											</parameters>
																										</methodInvokeExpression>
																									</trueStatements>
																								</conditionStatement>
																							</trueStatements>
																						</conditionStatement>
																						<assignStatement>
																							<fieldReferenceExpression name="field"/>
																							<primitiveExpression value="null"/>
																						</assignStatement>
																						<assignStatement>
																							<fieldReferenceExpression name="isCollection"/>
																							<primitiveExpression value="false"/>
																						</assignStatement>
																						<methodInvokeExpression methodName="GetView">
																							<parameters>
																								<primitiveExpression value="singleton"/>
																								<methodInvokeExpression methodName="DefaultView">
																									<parameters>
																										<primitiveExpression value="singleton"/>
																									</parameters>
																								</methodInvokeExpression>
																								<directionExpression direction="Out">
																									<fieldReferenceExpression name="view"/>
																								</directionExpression>
																							</parameters>
																						</methodInvokeExpression>
																						<assignStatement>
																							<fieldReferenceExpression name="specifiedView"/>
																							<primitiveExpression value="null"/>
																						</assignStatement>
																					</falseStatements>
																				</conditionStatement>
																			</trueStatements>
																		</conditionStatement>
																	</trueStatements>
																	<falseStatements>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="IdentityEquality">
																					<fieldReferenceExpression name="field"/>
																					<primitiveExpression value="null"/>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<conditionStatement>
																					<condition>
																						<unaryOperatorExpression operator="Not">
																							<methodInvokeExpression methodName="GetView">
																								<parameters>
																									<primitiveExpression value="auto"/>
																									<variableReferenceExpression name="segment"/>
																									<directionExpression direction="Out">
																										<fieldReferenceExpression name="view"/>
																									</directionExpression>
																								</parameters>
																							</methodInvokeExpression>
																						</unaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<conditionStatement>
																							<condition>
																								<unaryOperatorExpression operator="Not">
																									<methodInvokeExpression methodName="TryGetValue">
																										<target>
																											<propertyReferenceExpression name="FieldMap"/>
																										</target>
																										<parameters>
																											<variableReferenceExpression name="segment"/>
																											<directionExpression direction="Out">
																												<fieldReferenceExpression name="fieldNav"/>
																											</directionExpression>
																										</parameters>
																									</methodInvokeExpression>
																								</unaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<conditionStatement>
																									<condition>
																										<binaryOperatorExpression operator="BooleanAnd">
																											<binaryOperatorExpression operator="ValueEquality">
																												<variableReferenceExpression name="segment"/>
																												<propertyReferenceExpression name="ChildrenKey"/>
																											</binaryOperatorExpression>
																											<unaryOperatorExpression operator="Not">
																												<propertyReferenceExpression name="Following"/>
																											</unaryOperatorExpression>
																										</binaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<assignStatement>
																											<fieldReferenceExpression name="followTo"/>
																											<variableReferenceExpression name="segment"/>
																										</assignStatement>
																										<assignStatement>
																											<variableReferenceExpression name="pathIndex"/>
																											<binaryOperatorExpression operator="Add">
																												<variableReferenceExpression name="pathIndex"/>
																												<primitiveExpression value="1"/>
																											</binaryOperatorExpression>
																										</assignStatement>
																										<continueStatement/>
																									</trueStatements>
																									<falseStatements>
																										<conditionStatement>
																											<condition>
																												<binaryOperatorExpression operator="IdentityInequality">
																													<methodInvokeExpression methodName="FindAction">
																														<parameters>
																															<variableReferenceExpression name="segment"/>
																														</parameters>
																													</methodInvokeExpression>
																													<primitiveExpression value="null"/>
																												</binaryOperatorExpression>
																											</condition>
																											<trueStatements>
																												<methodInvokeExpression methodName="ThrowError">
																													<target>
																														<typeReferenceExpression type="RESTfulResource"/>
																													</target>
																													<parameters>
																														<primitiveExpression value="invalid_method"/>
																														<primitiveExpression>
																															<xsl:attribute name="value"><![CDATA[Action '{0}' cannot be used with the {1} method. Use POST instead.]]></xsl:attribute>
																														</primitiveExpression>
																														<methodInvokeExpression methodName="ToApiFieldName">
																															<parameters>
																																<variableReferenceExpression name="segment"/>
																															</parameters>
																														</methodInvokeExpression>
																														<propertyReferenceExpression name="HttpMethod"/>
																													</parameters>
																												</methodInvokeExpression>
																											</trueStatements>
																											<falseStatements>
																												<methodInvokeExpression methodName="ThrowError">
																													<target>
																														<typeReferenceExpression type="RESTfulResource"/>
																													</target>
																													<parameters>
																														<primitiveExpression value="404"/>
																														<primitiveExpression value="true"/>
																														<primitiveExpression value="invalid_path"/>
																														<primitiveExpression>
																															<xsl:attribute name="value"><![CDATA[Unexpected field '{0}' is specifed at {1} in the path.]]></xsl:attribute>
																														</primitiveExpression>
																														<methodInvokeExpression methodName="ToApiFieldName">
																															<parameters>
																																<variableReferenceExpression name="segment"/>
																															</parameters>
																														</methodInvokeExpression>
																														<propertyReferenceExpression name="Location"/>
																													</parameters>
																												</methodInvokeExpression>
																											</falseStatements>
																										</conditionStatement>
																									</falseStatements>
																								</conditionStatement>
																							</trueStatements>
																							<falseStatements>
																							</falseStatements>
																						</conditionStatement>
																						<assignStatement>
																							<propertyReferenceExpression name="LastEntity"/>
																							<variableReferenceExpression name="segment"/>
																						</assignStatement>
																						<assignStatement>
																							<fieldReferenceExpression name="field"/>
																							<methodInvokeExpression methodName="GetAttribute">
																								<target>
																									<fieldReferenceExpression name="fieldNav"/>
																								</target>
																								<parameters>
																									<primitiveExpression value="name"/>
																									<stringEmptyExpression/>
																								</parameters>
																							</methodInvokeExpression>
																						</assignStatement>
																						<variableDeclarationStatement name="dataField">
																							<init>
																								<methodInvokeExpression methodName="SelectSingleNode">
																									<target>
																										<propertyReferenceExpression name="Config"/>
																									</target>
																									<parameters>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[/c:dataController/c:views/c:view[@id='{0}']//c:dataField[@fieldName='{1}' or @aliasFieldName='{1}']]]></xsl:attribute>
																										</primitiveExpression>
																										<fieldReferenceExpression name="view"/>
																										<fieldReferenceExpression name="field"/>
																									</parameters>
																								</methodInvokeExpression>
																							</init>
																						</variableDeclarationStatement>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="BooleanOr">
																									<binaryOperatorExpression operator="BooleanAnd">
																										<binaryOperatorExpression operator="IdentityEquality">
																											<variableReferenceExpression name="dataField"/>
																											<primitiveExpression value="null"/>
																										</binaryOperatorExpression>
																										<binaryOperatorExpression operator="ValueInequality">
																											<methodInvokeExpression methodName="GetAttribute">
																												<target>
																													<fieldReferenceExpression name="fieldNav"/>
																												</target>
																												<parameters>
																													<primitiveExpression value="isPrimaryKey"/>
																													<stringEmptyExpression/>
																												</parameters>
																											</methodInvokeExpression>
																											<primitiveExpression value="true" convertTo="String"/>
																										</binaryOperatorExpression>
																									</binaryOperatorExpression>
																									<methodInvokeExpression methodName="ContainsKey">
																										<target>
																											<fieldReferenceExpression name="_excludedFields"/>
																										</target>
																										<parameters>
																											<fieldReferenceExpression name="field"/>
																										</parameters>
																									</methodInvokeExpression>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<methodInvokeExpression methodName="ThrowError">
																									<target>
																										<typeReferenceExpression type="RESTfulResource"/>
																									</target>
																									<parameters>
																										<primitiveExpression value="403"/>
																										<primitiveExpression value="true"/>
																										<primitiveExpression value="invalid_path"/>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[Access to the field '{0}' is denied.]]></xsl:attribute>
																										</primitiveExpression>
																										<methodInvokeExpression methodName="ToApiFieldName">
																											<parameters>
																												<fieldReferenceExpression name="field"/>
																											</parameters>
																										</methodInvokeExpression>
																									</parameters>
																								</methodInvokeExpression>
																							</trueStatements>
																						</conditionStatement>
																						<variableDeclarationStatement name="dataType">
																							<init>
																								<methodInvokeExpression methodName="GetAttribute">
																									<target>
																										<fieldReferenceExpression name="fieldNav"/>
																									</target>
																									<parameters>
																										<primitiveExpression value="type"/>
																										<stringEmptyExpression/>
																									</parameters>
																								</methodInvokeExpression>
																							</init>
																						</variableDeclarationStatement>
																						<conditionStatement>
																							<condition>
																								<unaryOperatorExpression operator="IsNotNullOrEmpty">
																									<methodInvokeExpression methodName="GetAttribute">
																										<target>
																											<fieldReferenceExpression name="fieldNav"/>
																										</target>
																										<parameters>
																											<primitiveExpression value="onDemand"/>
																											<stringEmptyExpression/>
																										</parameters>
																									</methodInvokeExpression>
																								</unaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<conditionStatement>
																									<condition>
																										<binaryOperatorExpression operator="LessThanOrEqual">
																											<binaryOperatorExpression operator="Add">
																												<variableReferenceExpression name="pathIndex"/>
																												<primitiveExpression value="1"/>
																											</binaryOperatorExpression>
																											<binaryOperatorExpression operator="Subtract">
																												<propertyReferenceExpression name="Count">
																													<variableReferenceExpression name="localPath"/>
																												</propertyReferenceExpression>
																												<primitiveExpression value="1"/>
																											</binaryOperatorExpression>
																										</binaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<assignStatement>
																											<fieldReferenceExpression name="blobFileName"/>
																											<arrayIndexerExpression>
																												<target>
																													<variableReferenceExpression name="localPath"/>
																												</target>
																												<indices>
																													<binaryOperatorExpression operator="Add">
																														<variableReferenceExpression name="pathIndex"/>
																														<primitiveExpression value="1"/>
																													</binaryOperatorExpression>
																												</indices>
																											</arrayIndexerExpression>
																										</assignStatement>
																										<methodInvokeExpression methodName="Add">
																											<target>
																												<fieldReferenceExpression name="resourceLocation"/>
																											</target>
																											<parameters>
																												<propertyReferenceExpression name="BlobFileName"/>
																											</parameters>
																										</methodInvokeExpression>
																										<assignStatement>
																											<variableReferenceExpression name="pathIndex"/>
																											<binaryOperatorExpression operator="Add">
																												<variableReferenceExpression name="pathIndex"/>
																												<primitiveExpression value="1"/>
																											</binaryOperatorExpression>
																										</assignStatement>
																										<conditionStatement>
																											<condition>
																												<binaryOperatorExpression operator="LessThan">
																													<variableReferenceExpression name="pathIndex"/>
																													<binaryOperatorExpression operator="Subtract">
																														<propertyReferenceExpression name="Count">
																															<variableReferenceExpression name="localPath"/>
																														</propertyReferenceExpression>
																														<primitiveExpression value="1"/>
																													</binaryOperatorExpression>
																												</binaryOperatorExpression>
																											</condition>
																											<trueStatements>
																												<methodInvokeExpression methodName="ThrowError">
																													<target>
																														<typeReferenceExpression type="RESTfulResource"/>
																													</target>
																													<parameters>
																														<primitiveExpression value="403"/>
																														<primitiveExpression value="true"/>
																														<primitiveExpression value="invalid_path"/>
																														<primitiveExpression>
																															<xsl:attribute name="value"><![CDATA[The path must terminate at {0} filename.]]></xsl:attribute>
																														</primitiveExpression>
																														<propertyReferenceExpression name="Location"/>
																													</parameters>
																												</methodInvokeExpression>
																											</trueStatements>
																										</conditionStatement>
																										<assignStatement>
																											<variableReferenceExpression name="pathIndex"/>
																											<binaryOperatorExpression operator="Add">
																												<variableReferenceExpression name="pathIndex"/>
																												<primitiveExpression value="1"/>
																											</binaryOperatorExpression>
																										</assignStatement>
																										<continueStatement/>
																									</trueStatements>
																								</conditionStatement>
																							</trueStatements>
																						</conditionStatement>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="BooleanAnd">
																									<binaryOperatorExpression operator="ValueEquality">
																										<variableReferenceExpression name="dataType"/>
																										<primitiveExpression value="DataView"/>
																									</binaryOperatorExpression>
																									<binaryOperatorExpression operator="ValueInequality">
																										<fieldReferenceExpression name="followTo"/>
																										<propertyReferenceExpression name="RootKey"/>
																									</binaryOperatorExpression>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<variableDeclarationStatement name="p">
																									<init>
																										<methodInvokeExpression methodName="GetContext">
																											<parameters>
																												<methodInvokeExpression methodName="PrimaryKeyToFieldNames"/>
																											</parameters>
																										</methodInvokeExpression>
																									</init>
																								</variableDeclarationStatement>
																								<conditionStatement>
																									<condition>
																										<binaryOperatorExpression operator="ValueEquality">
																											<propertyReferenceExpression name="Count">
																												<propertyReferenceExpression name="Rows">
																													<variableReferenceExpression name="p"/>
																												</propertyReferenceExpression>
																											</propertyReferenceExpression>
																											<primitiveExpression value="0"/>
																										</binaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<methodInvokeExpression methodName="ThrowError">
																											<target>
																												<typeReferenceExpression type="RESTfulResource"/>
																											</target>
																											<parameters>
																												<primitiveExpression value="404"/>
																												<primitiveExpression value="invalid_path"/>
																												<primitiveExpression>
																													<xsl:attribute name="value"><![CDATA[Entity '{0}' does not exist.]]></xsl:attribute>
																												</primitiveExpression>
																												<methodInvokeExpression methodName="TrimLocationToIdentifier"/>
																											</parameters>
																										</methodInvokeExpression>
																									</trueStatements>
																								</conditionStatement>
																								<assignStatement>
																									<fieldReferenceExpression name="followTo"/>
																									<primitiveExpression value="null"/>
																								</assignStatement>
																								<comment>navigate to the DataView field collection</comment>
																								<assignStatement>
																									<fieldReferenceExpression name="masterConfig"/>
																									<propertyReferenceExpression name="Config"/>
																								</assignStatement>
																								<assignStatement>
																									<fieldReferenceExpression name="masterResource"/>
																									<variableReferenceExpression name="segment"/>
																								</assignStatement>
																								<assignStatement>
																									<fieldReferenceExpression name="lookupConfig"/>
																									<primitiveExpression value="null"/>
																								</assignStatement>
																								<assignStatement>
																									<fieldReferenceExpression name="lookupResource"/>
																									<primitiveExpression value="null"/>
																								</assignStatement>
																								<variableDeclarationStatement name="dataView">
																									<init>
																										<methodInvokeExpression methodName="SelectSingleNode">
																											<target>
																												<fieldReferenceExpression name="fieldNav"/>
																											</target>
																											<parameters>
																												<primitiveExpression value="c:dataView"/>
																												<propertyReferenceExpression name="Resolver">
																													<propertyReferenceExpression name="Config"/>
																												</propertyReferenceExpression>
																											</parameters>
																										</methodInvokeExpression>
																									</init>
																								</variableDeclarationStatement>
																								<assignStatement>
																									<propertyReferenceExpression name="Controller"/>
																									<methodInvokeExpression methodName="GetAttribute">
																										<target>
																											<variableReferenceExpression name="dataView"/>
																										</target>
																										<parameters>
																											<primitiveExpression value="controller"/>
																											<stringEmptyExpression/>
																										</parameters>
																									</methodInvokeExpression>
																								</assignStatement>
																								<variableDeclarationStatement name="parentPK">
																									<init>
																										<objectCreateExpression type="List">
																											<typeArguments>
																												<typeReference type="FieldValue"/>
																											</typeArguments>
																											<parameters>
																												<propertyReferenceExpression name="PK"/>
																											</parameters>
																										</objectCreateExpression>
																									</init>
																								</variableDeclarationStatement>
																								<methodInvokeExpression methodName="RefreshConfigurationData"/>
																								<variableDeclarationStatement name="filterFields">
																									<init>
																										<methodInvokeExpression methodName="GetAttribute">
																											<target>
																												<variableReferenceExpression name="dataView"/>
																											</target>
																											<parameters>
																												<primitiveExpression value="filterFields"/>
																												<stringEmptyExpression/>
																											</parameters>
																										</methodInvokeExpression>
																									</init>
																								</variableDeclarationStatement>
																								<conditionStatement>
																									<condition>
																										<unaryOperatorExpression operator="IsNotNullOrEmpty">
																											<variableReferenceExpression name="filterFields"/>
																										</unaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<foreachStatement>
																											<variable name="fkFieldName"/>
																											<target>
																												<methodInvokeExpression methodName="Split">
																													<target>
																														<typeReferenceExpression type="Regex"/>
																													</target>
																													<parameters>
																														<variableReferenceExpression name="filterFields"/>
																														<primitiveExpression>
																															<xsl:attribute name="value"><![CDATA[\s*,\s*]]></xsl:attribute>
																														</primitiveExpression>
																													</parameters>
																												</methodInvokeExpression>
																											</target>
																											<statements>
																												<conditionStatement>
																													<condition>
																														<binaryOperatorExpression operator="BooleanAnd">
																															<unaryOperatorExpression operator="IsNotNullOrEmpty">
																																<variableReferenceExpression name="fkFieldName"/>
																															</unaryOperatorExpression>
																															<binaryOperatorExpression operator="LessThan">
																																<propertyReferenceExpression name="Count">
																																	<fieldReferenceExpression name="filter"/>
																																</propertyReferenceExpression>
																																<propertyReferenceExpression name="Count">
																																	<variableReferenceExpression name="parentPK"/>
																																</propertyReferenceExpression>
																															</binaryOperatorExpression>
																														</binaryOperatorExpression>
																													</condition>
																													<trueStatements>
																														<methodInvokeExpression methodName="Add">
																															<target>
																																<fieldReferenceExpression name="filter"/>
																															</target>
																															<parameters>
																																<objectCreateExpression type="FieldValue">
																																	<parameters>
																																		<variableReferenceExpression name="fkFieldName"/>
																																		<propertyReferenceExpression name="Value">
																																			<arrayIndexerExpression>
																																				<target>
																																					<variableReferenceExpression name="parentPK"/>
																																				</target>
																																				<indices>
																																					<propertyReferenceExpression name="Count">
																																						<fieldReferenceExpression name="filter"/>
																																					</propertyReferenceExpression>
																																				</indices>
																																			</arrayIndexerExpression>
																																		</propertyReferenceExpression>
																																	</parameters>
																																</objectCreateExpression>
																															</parameters>
																														</methodInvokeExpression>
																													</trueStatements>
																												</conditionStatement>
																											</statements>
																										</foreachStatement>
																									</trueStatements>
																								</conditionStatement>
																								<assignStatement>
																									<fieldReferenceExpression name="id"/>
																									<primitiveExpression value="null"/>
																								</assignStatement>
																								<assignStatement>
																									<fieldReferenceExpression name="field"/>
																									<primitiveExpression value="null"/>
																								</assignStatement>
																								<assignStatement>
																									<fieldReferenceExpression name="isCollection"/>
																									<primitiveExpression value="true"/>
																								</assignStatement>
																								<methodInvokeExpression methodName="GetView">
																									<parameters>
																										<primitiveExpression value="collection"/>
																										<methodInvokeExpression methodName="GetAttribute">
																											<target>
																												<variableReferenceExpression name="dataView"/>
																											</target>
																											<parameters>
																												<primitiveExpression value="view"/>
																												<stringEmptyExpression/>
																											</parameters>
																										</methodInvokeExpression>
																										<directionExpression direction="Out">
																											<fieldReferenceExpression name="view"/>
																										</directionExpression>
																									</parameters>
																								</methodInvokeExpression>
																								<assignStatement>
																									<fieldReferenceExpression name="specifiedView"/>
																									<primitiveExpression value="null"/>
																								</assignStatement>
																							</trueStatements>
																							<falseStatements>
																								<variableDeclarationStatement name="itemsDataControllerNav">
																									<init>
																										<methodInvokeExpression methodName="SelectSingleNode">
																											<target>
																												<fieldReferenceExpression name="fieldNav"/>
																											</target>
																											<parameters>
																												<primitiveExpression value="c:items/@dataController"/>
																												<propertyReferenceExpression name="Resolver">
																													<propertyReferenceExpression name="Config"/>
																												</propertyReferenceExpression>
																											</parameters>
																										</methodInvokeExpression>
																									</init>
																								</variableDeclarationStatement>
																								<conditionStatement>
																									<condition>
																										<binaryOperatorExpression operator="IdentityInequality">
																											<variableReferenceExpression name="itemsDataControllerNav"/>
																											<primitiveExpression value="null"/>
																										</binaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<assignStatement>
																											<fieldReferenceExpression name="masterConfig"/>
																											<primitiveExpression value="null"/>
																										</assignStatement>
																										<assignStatement>
																											<fieldReferenceExpression name="masterResource"/>
																											<primitiveExpression value="null"/>
																										</assignStatement>
																										<assignStatement>
																											<fieldReferenceExpression name="lookupConfig"/>
																											<propertyReferenceExpression name="Config"/>
																										</assignStatement>
																										<assignStatement>
																											<fieldReferenceExpression name="lookupResource"/>
																											<variableReferenceExpression name="segment"/>
																										</assignStatement>
																										<comment>navigate to the lookup singleton</comment>
																										<variableDeclarationStatement name="dataValueFieldNav">
																											<init>
																												<methodInvokeExpression methodName="SelectSingleNode">
																													<target>
																														<fieldReferenceExpression name="fieldNav"></fieldReferenceExpression>
																													</target>
																													<parameters>
																														<primitiveExpression value="c:items/@dataValueField"/>
																														<propertyReferenceExpression name="Resolver">
																															<propertyReferenceExpression name="Config"/>
																														</propertyReferenceExpression>
																													</parameters>
																												</methodInvokeExpression>
																											</init>
																										</variableDeclarationStatement>
																										<conditionStatement>
																											<condition>
																												<binaryOperatorExpression operator="IdentityInequality">
																													<variableReferenceExpression name="dataValueFieldNav"/>
																													<primitiveExpression value="null"/>
																												</binaryOperatorExpression>
																											</condition>
																											<trueStatements>
																												<variableDeclarationStatement name="lookupFields">
																													<init>
																														<objectCreateExpression type="List">
																															<typeArguments>
																																<typeReference type="System.String"/>
																															</typeArguments>
																														</objectCreateExpression>
																													</init>
																												</variableDeclarationStatement>
																												<methodInvokeExpression methodName="Add">
																													<target>
																														<variableReferenceExpression name="lookupFields"/>
																													</target>
																													<parameters>
																														<propertyReferenceExpression name="Value">
																															<variableReferenceExpression name="dataValueFieldNav"/>
																														</propertyReferenceExpression>
																													</parameters>
																												</methodInvokeExpression>
																												<variableDeclarationStatement name="fkFields">
																													<init>
																														<objectCreateExpression type="List">
																															<typeArguments>
																																<typeReference type="System.String"/>
																															</typeArguments>
																														</objectCreateExpression>
																													</init>
																												</variableDeclarationStatement>
																												<methodInvokeExpression methodName="Add">
																													<target>
																														<variableReferenceExpression name="fkFields"/>
																													</target>
																													<parameters>
																														<fieldReferenceExpression name="field"/>
																													</parameters>
																												</methodInvokeExpression>
																												<variableDeclarationStatement name="copy">
																													<init>
																														<methodInvokeExpression methodName="SelectSingleNode">
																															<target>
																																<fieldReferenceExpression name="fieldNav"/>
																															</target>
																															<parameters>
																																<primitiveExpression value="c:items/@copy"/>
																																<propertyReferenceExpression name="Resolver">
																																	<propertyReferenceExpression name="Config"/>
																																</propertyReferenceExpression>
																															</parameters>
																														</methodInvokeExpression>
																													</init>
																												</variableDeclarationStatement>
																												<conditionStatement>
																													<condition>
																														<binaryOperatorExpression operator="IdentityInequality">
																															<variableReferenceExpression name="copy"/>
																															<primitiveExpression value="null"/>
																														</binaryOperatorExpression>
																													</condition>
																													<trueStatements>
																														<foreachStatement>
																															<variable type="Match" name="m" var="false"/>
																															<target>
																																<methodInvokeExpression methodName="Matches">
																																	<target>
																																		<typeReferenceExpression type="Regex"/>
																																	</target>
																																	<parameters>
																																		<propertyReferenceExpression name="Value">
																																			<variableReferenceExpression name="copy"/>
																																		</propertyReferenceExpression>
																																		<primitiveExpression>
																																			<xsl:attribute name="value"><![CDATA[(\w+)\s*=\s*(\w+)]]></xsl:attribute>
																																		</primitiveExpression>
																																	</parameters>
																																</methodInvokeExpression>
																															</target>
																															<statements>
																																<variableDeclarationStatement name="fkFieldName">
																																	<init>
																																		<propertyReferenceExpression name="Value">
																																			<arrayIndexerExpression>
																																				<target>
																																					<propertyReferenceExpression name="Groups">
																																						<variableReferenceExpression name="m"/>
																																					</propertyReferenceExpression>
																																				</target>
																																				<indices>
																																					<primitiveExpression value="1"/>
																																				</indices>
																																			</arrayIndexerExpression>
																																		</propertyReferenceExpression>
																																	</init>
																																</variableDeclarationStatement>
																																<variableDeclarationStatement name="fkFieldNav">
																																	<init>
																																		<methodInvokeExpression methodName="SelectSingleNode">
																																			<target>
																																				<propertyReferenceExpression name="Config"/>
																																			</target>
																																			<parameters>
																																				<primitiveExpression>
																																					<xsl:attribute name="value"><![CDATA[/c:dataController/c:fields/c:field[@name='{0}' and c:items/@dataController='{1}']]]></xsl:attribute>
																																				</primitiveExpression>
																																				<variableReferenceExpression name="fkFieldName"/>
																																				<propertyReferenceExpression name="Value">
																																					<variableReferenceExpression name="itemsDataControllerNav"/>
																																				</propertyReferenceExpression>
																																			</parameters>
																																		</methodInvokeExpression>
																																	</init>
																																</variableDeclarationStatement>
																																<conditionStatement>
																																	<condition>
																																		<binaryOperatorExpression operator="IdentityInequality">
																																			<variableReferenceExpression name="fkFieldNav"/>
																																			<primitiveExpression value="null"/>
																																		</binaryOperatorExpression>
																																	</condition>
																																	<trueStatements>
																																		<methodInvokeExpression methodName="Add">
																																			<target>
																																				<variableReferenceExpression name="fkFields"/>
																																			</target>
																																			<parameters>
																																				<variableReferenceExpression name="fkFieldName"/>
																																			</parameters>
																																		</methodInvokeExpression>
																																		<methodInvokeExpression methodName="Add">
																																			<target>
																																				<variableReferenceExpression name="lookupFields"/>
																																			</target>
																																			<parameters>
																																				<propertyReferenceExpression name="Value">
																																					<arrayIndexerExpression>
																																						<target>
																																							<propertyReferenceExpression name="Groups">
																																								<variableReferenceExpression name="m"/>
																																							</propertyReferenceExpression>
																																						</target>
																																						<indices>
																																							<primitiveExpression value="2"/>
																																						</indices>
																																					</arrayIndexerExpression>
																																				</propertyReferenceExpression>
																																			</parameters>
																																		</methodInvokeExpression>
																																	</trueStatements>
																																</conditionStatement>
																															</statements>
																														</foreachStatement>
																													</trueStatements>
																												</conditionStatement>
																												<conditionStatement>
																													<condition>
																														<binaryOperatorExpression operator="BooleanAnd">
																															<propertyReferenceExpression name="Following"/>
																															<binaryOperatorExpression operator="ValueInequality">
																																<propertyReferenceExpression name="Value">
																																	<variableReferenceExpression name="itemsDataControllerNav"/>
																																</propertyReferenceExpression>
																																<propertyReferenceExpression name="ControllerName"/>
																															</binaryOperatorExpression>
																														</binaryOperatorExpression>
																													</condition>
																													<trueStatements>
																														<methodInvokeExpression methodName="ThrowError">
																															<target>
																																<typeReferenceExpression type="RESTfulResource"/>
																															</target>
																															<parameters>
																																<primitiveExpression value="404"/>
																																<primitiveExpression value="invalid_path"/>
																																<primitiveExpression>
																																	<xsl:attribute name="value"><![CDATA[Entity '{0}' does not have {1}.]]></xsl:attribute>
																																</primitiveExpression>
																																<propertyReferenceExpression name="Location"/>
																																<fieldReferenceExpression name="followTo"/>
																															</parameters>
																														</methodInvokeExpression>
																													</trueStatements>
																												</conditionStatement>

																												<conditionStatement>
																													<condition>
																														<binaryOperatorExpression operator="ValueEquality">
																															<fieldReferenceExpression name="followTo"/>
																															<propertyReferenceExpression name="RootKey"/>
																														</binaryOperatorExpression>
																													</condition>
																													<trueStatements>
																														<assignStatement>
																															<fieldReferenceExpression name="followTo"/>
																															<primitiveExpression value="null"/>
																														</assignStatement>
																														<assignStatement>
																															<fieldReferenceExpression name="filter"/>
																															<objectCreateExpression type="List">
																																<typeArguments>
																																	<typeReference type="FieldValue"/>
																																</typeArguments>
																															</objectCreateExpression>
																														</assignStatement>
																														<forStatement>
																															<variable name="i">
																																<init>
																																	<primitiveExpression value="0"/>
																																</init>
																															</variable>
																															<test>
																																<binaryOperatorExpression operator="LessThan">
																																	<variableReferenceExpression name="i"/>
																																	<propertyReferenceExpression name="Count">
																																		<variableReferenceExpression name="fkFields"/>
																																	</propertyReferenceExpression>
																																</binaryOperatorExpression>
																															</test>
																															<increment>
																																<variableReferenceExpression name="i"/>
																															</increment>
																															<statements>
																																<methodInvokeExpression methodName="Add">
																																	<target>
																																		<fieldReferenceExpression name="filter"/>
																																	</target>
																																	<parameters>
																																		<objectCreateExpression type="FieldValue">
																																			<parameters>
																																				<arrayIndexerExpression>
																																					<target>
																																						<variableReferenceExpression name="fkFields"/>
																																					</target>
																																					<indices>
																																						<variableReferenceExpression name="i"/>
																																					</indices>
																																				</arrayIndexerExpression>
																																				<primitiveExpression value="null"/>
																																			</parameters>
																																		</objectCreateExpression>
																																	</parameters>
																																</methodInvokeExpression>
																															</statements>
																														</forStatement>
																														<assignStatement>
																															<fieldReferenceExpression name="masterConfig"/>
																															<primitiveExpression value="null"/>
																														</assignStatement>
																														<assignStatement>
																															<fieldReferenceExpression name="masterResource"/>
																															<primitiveExpression value="null"/>
																														</assignStatement>
																														<assignStatement>
																															<fieldReferenceExpression name="lookupConfig"/>
																															<primitiveExpression value="null"/>
																														</assignStatement>
																														<assignStatement>
																															<fieldReferenceExpression name="lookupResource"/>
																															<primitiveExpression value="null"/>
																														</assignStatement>
																														<assignStatement>
																															<fieldReferenceExpression name="id"/>
																															<primitiveExpression value="null"/>
																														</assignStatement>
																														<assignStatement>
																															<fieldReferenceExpression name="field"/>
																															<primitiveExpression value="null"/>
																														</assignStatement>
																														<assignStatement>
																															<fieldReferenceExpression name="isCollection"/>
																															<primitiveExpression value="true"/>
																														</assignStatement>
																													</trueStatements>
																													<falseStatements>
																														<variableDeclarationStatement name="p">
																															<init>
																																<methodInvokeExpression methodName="GetContext">
																																	<parameters>
																																		<methodInvokeExpression methodName="ToArray">
																																			<target>
																																				<variableReferenceExpression name="fkFields"/>
																																			</target>
																																		</methodInvokeExpression>
																																	</parameters>
																																</methodInvokeExpression>
																															</init>
																														</variableDeclarationStatement>
																														<conditionStatement>
																															<condition>
																																<binaryOperatorExpression operator="ValueEquality">
																																	<propertyReferenceExpression name="Count">
																																		<propertyReferenceExpression name="Rows">
																																			<variableReferenceExpression name="p"/>
																																		</propertyReferenceExpression>
																																	</propertyReferenceExpression>
																																	<primitiveExpression value="0"/>
																																</binaryOperatorExpression>
																															</condition>
																															<trueStatements>
																																<methodInvokeExpression methodName="ThrowError">
																																	<target>
																																		<typeReferenceExpression type="RESTfulResource"/>
																																	</target>
																																	<parameters>
																																		<primitiveExpression value="404"/>
																																		<primitiveExpression value="invalid_path"/>
																																		<primitiveExpression>
																																			<xsl:attribute name="value"><![CDATA[Entity '{0}' does not exist.]]></xsl:attribute>
																																		</primitiveExpression>
																																		<methodInvokeExpression methodName="TrimLocationToIdentifier"/>
																																	</parameters>
																																</methodInvokeExpression>
																															</trueStatements>
																														</conditionStatement>
																														<assignStatement>
																															<propertyReferenceExpression name="LastEntity"/>
																															<variableReferenceExpression name="segment"/>
																														</assignStatement>
																														<assignStatement>
																															<propertyReferenceExpression name="Controller"/>
																															<propertyReferenceExpression name="Value">
																																<variableReferenceExpression name="itemsDataControllerNav"/>
																															</propertyReferenceExpression>
																														</assignStatement>
																														<methodInvokeExpression methodName="RefreshConfigurationData"/>
																														<conditionStatement>
																															<condition>
																																<propertyReferenceExpression name="Following"/>
																															</condition>
																															<trueStatements>
																																<assignStatement>
																																	<fieldReferenceExpression name="followTo"/>
																																	<primitiveExpression value="null"/>
																																</assignStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="filter"/>
																																	<objectCreateExpression type="List">
																																		<typeArguments>
																																			<typeReference type="FieldValue"/>
																																		</typeArguments>
																																	</objectCreateExpression>
																																</assignStatement>
																																<forStatement>
																																	<variable name="i">
																																		<init>
																																			<primitiveExpression value="0"/>
																																		</init>
																																	</variable>
																																	<test>
																																		<binaryOperatorExpression operator="LessThan">
																																			<variableReferenceExpression name="i"/>
																																			<propertyReferenceExpression name="Count">
																																				<variableReferenceExpression name="fkFields"/>
																																			</propertyReferenceExpression>
																																		</binaryOperatorExpression>
																																	</test>
																																	<increment>
																																		<variableReferenceExpression name="i"/>
																																	</increment>
																																	<statements>
																																		<methodInvokeExpression methodName="Add">
																																			<target>
																																				<fieldReferenceExpression name="filter"/>
																																			</target>
																																			<parameters>
																																				<objectCreateExpression type="FieldValue">
																																					<parameters>
																																						<arrayIndexerExpression>
																																							<target>
																																								<variableReferenceExpression name="fkFields"/>
																																							</target>
																																							<indices>
																																								<variableReferenceExpression name="i"/>
																																							</indices>
																																						</arrayIndexerExpression>
																																						<arrayIndexerExpression>
																																							<target>
																																								<arrayIndexerExpression>
																																									<target>
																																										<propertyReferenceExpression name="Rows">
																																											<variableReferenceExpression name="p"/>
																																										</propertyReferenceExpression>
																																									</target>
																																									<indices>
																																										<primitiveExpression value="0"/>
																																									</indices>
																																								</arrayIndexerExpression>
																																							</target>
																																							<indices>
																																								<methodInvokeExpression methodName="IndexOfField">
																																									<target>
																																										<variableReferenceExpression name="p"/>
																																									</target>
																																									<parameters>
																																										<arrayIndexerExpression>
																																											<target>
																																												<variableReferenceExpression name="lookupFields"/>
																																											</target>
																																											<indices>
																																												<variableReferenceExpression name="i"/>
																																											</indices>
																																										</arrayIndexerExpression>
																																									</parameters>
																																								</methodInvokeExpression>
																																							</indices>
																																						</arrayIndexerExpression>
																																					</parameters>
																																				</objectCreateExpression>
																																			</parameters>
																																		</methodInvokeExpression>
																																	</statements>
																																</forStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="masterConfig"/>
																																	<propertyReferenceExpression name="Config"/>
																																</assignStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="masterResource"/>
																																	<primitiveExpression value="null"/>
																																</assignStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="lookupConfig"/>
																																	<primitiveExpression value="null"/>
																																</assignStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="lookupResource"/>
																																	<primitiveExpression value="null"/>
																																</assignStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="id"/>
																																	<primitiveExpression value="null"/>
																																</assignStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="field"/>
																																	<primitiveExpression value="null"/>
																																</assignStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="isCollection"/>
																																	<primitiveExpression value="true"/>
																																</assignStatement>
																																<variableDeclarationStatement name="childrenViewId">
																																	<init>
																																		<stringEmptyExpression/>
																																	</init>
																																</variableDeclarationStatement>
																																<variableDeclarationStatement name="itemsDataViewNav">
																																	<init>
																																		<methodInvokeExpression methodName="SelectSingleNode">
																																			<target>
																																				<fieldReferenceExpression name="fieldNav"/>
																																			</target>
																																			<parameters>
																																				<primitiveExpression value="c:items/@dataView"/>
																																				<propertyReferenceExpression name="Resolver">
																																					<propertyReferenceExpression name="Config"/>
																																				</propertyReferenceExpression>
																																			</parameters>
																																		</methodInvokeExpression>
																																	</init>
																																</variableDeclarationStatement>
																																<conditionStatement>
																																	<condition>
																																		<binaryOperatorExpression operator="IdentityInequality">
																																			<variableReferenceExpression name="itemsDataViewNav"/>
																																			<primitiveExpression value="null"/>
																																		</binaryOperatorExpression>
																																	</condition>
																																	<trueStatements>
																																		<assignStatement>
																																			<variableReferenceExpression name="childrenViewId"/>
																																			<propertyReferenceExpression name="Value">
																																				<variableReferenceExpression name="itemsDataViewNav"/>
																																			</propertyReferenceExpression>
																																		</assignStatement>
																																	</trueStatements>
																																</conditionStatement>
																																<methodInvokeExpression methodName="GetView">
																																	<parameters>
																																		<primitiveExpression value="collection"/>
																																		<variableReferenceExpression name="childrenViewId"/>
																																		<directionExpression direction="Out">
																																			<fieldReferenceExpression name="view"/>
																																		</directionExpression>
																																	</parameters>
																																</methodInvokeExpression>
																																<assignStatement>
																																	<fieldReferenceExpression name="specifiedView"/>
																																	<primitiveExpression value="null"/>
																																</assignStatement>
																															</trueStatements>
																															<falseStatements>
																																<forStatement>
																																	<variable name="i">
																																		<init>
																																			<primitiveExpression value="0"/>
																																		</init>
																																	</variable>
																																	<test>
																																		<binaryOperatorExpression operator="LessThan">
																																			<variableReferenceExpression name="i"/>
																																			<propertyReferenceExpression name="Count">
																																				<variableReferenceExpression name="lookupFields"/>
																																			</propertyReferenceExpression>
																																		</binaryOperatorExpression>
																																	</test>
																																	<increment>
																																		<variableReferenceExpression name="i"/>
																																	</increment>
																																	<statements>
																																		<foreachStatement>
																																			<variable name="fvo"/>
																																			<target>
																																				<propertyReferenceExpression name="PK"/>
																																			</target>
																																			<statements>
																																				<conditionStatement>
																																					<condition>
																																						<binaryOperatorExpression operator="ValueEquality">
																																							<propertyReferenceExpression name="Name">
																																								<variableReferenceExpression name="fvo"/>
																																							</propertyReferenceExpression>
																																							<arrayIndexerExpression>
																																								<target>
																																									<variableReferenceExpression name="lookupFields"/>
																																								</target>
																																								<indices>
																																									<variableReferenceExpression name="i"/>
																																								</indices>
																																							</arrayIndexerExpression>
																																						</binaryOperatorExpression>
																																					</condition>
																																					<trueStatements>
																																						<assignStatement>
																																							<propertyReferenceExpression name="Value">
																																								<variableReferenceExpression name="fvo"/>
																																							</propertyReferenceExpression>
																																							<arrayIndexerExpression>
																																								<target>
																																									<arrayIndexerExpression>
																																										<target>
																																											<propertyReferenceExpression name="Rows">
																																												<variableReferenceExpression name="p"/>
																																											</propertyReferenceExpression>
																																										</target>
																																										<indices>
																																											<primitiveExpression value="0"/>
																																										</indices>
																																									</arrayIndexerExpression>
																																								</target>
																																								<indices>
																																									<variableReferenceExpression name="i"/>
																																								</indices>
																																							</arrayIndexerExpression>
																																						</assignStatement>
																																						<breakStatement/>
																																					</trueStatements>
																																				</conditionStatement>
																																			</statements>
																																		</foreachStatement>
																																	</statements>
																																</forStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="filter"/>
																																	<objectCreateExpression type="List">
																																		<typeArguments>
																																			<typeReference type="FieldValue"/>
																																		</typeArguments>
																																		<parameters>
																																			<propertyReferenceExpression name="PK"/>
																																		</parameters>
																																	</objectCreateExpression>
																																</assignStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="id"/>
																																	<methodInvokeExpression methodName="PrimaryKeyToPath"/>
																																</assignStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="field"/>
																																	<primitiveExpression value="null"/>
																																</assignStatement>
																																<assignStatement>
																																	<fieldReferenceExpression name="isCollection"/>
																																	<primitiveExpression value="false"/>
																																</assignStatement>
																																<methodInvokeExpression methodName="GetView">
																																	<parameters>
																																		<primitiveExpression value="singleton"/>
																																		<primitiveExpression value="null"/>
																																		<directionExpression direction="Out">
																																			<fieldReferenceExpression name="view"/>
																																		</directionExpression>
																																	</parameters>
																																</methodInvokeExpression>
																															</falseStatements>
																														</conditionStatement>
																													</falseStatements>
																												</conditionStatement>
																											</trueStatements>
																											<falseStatements>
																												<methodInvokeExpression methodName="ThrowError">
																													<target>
																														<typeReferenceExpression type="RESTfulResource"/>
																													</target>
																													<parameters>
																														<primitiveExpression value="404"/>
																														<primitiveExpression value="invalid_path"/>
																														<primitiveExpression>
																															<xsl:attribute name="value"><![CDATA[Unable to locate this resource.]]></xsl:attribute>
																														</primitiveExpression>
																													</parameters>
																												</methodInvokeExpression>

																											</falseStatements>
																										</conditionStatement>
																									</trueStatements>
																									<falseStatements>
																										<conditionStatement>
																											<condition>
																												<propertyReferenceExpression name="Following"/>
																											</condition>
																											<trueStatements>
																												<methodInvokeExpression methodName="ThrowError">
																													<target>
																														<typeReferenceExpression type="RESTfulResource"/>
																													</target>
																													<parameters>
																														<primitiveExpression value="404"/>
																														<primitiveExpression value="true"/>
																														<primitiveExpression value="invalid_path"/>
																														<primitiveExpression>
																															<xsl:attribute name="value"><![CDATA[The name of the field is expected when following to {0}.]]></xsl:attribute>
																														</primitiveExpression>
																														<fieldReferenceExpression name="_followTo"/>
																													</parameters>
																												</methodInvokeExpression>
																											</trueStatements>
																										</conditionStatement>
																									</falseStatements>
																								</conditionStatement>
																							</falseStatements>
																						</conditionStatement>
																					</trueStatements>
																				</conditionStatement>
																			</trueStatements>
																			<falseStatements>
																				<comment>All elements of the path are defined as controller/view/id/field.</comment>
																				<comment>This segment is either the view or an action.</comment>
																				<methodInvokeExpression methodName="ThrowError">
																					<target>
																						<typeReferenceExpression type="RESTfulResource"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="invalid_path"/>
																						<primitiveExpression>
																							<xsl:attribute name="value"><![CDATA[Unexpected entity '{0}' in the path.]]></xsl:attribute>
																						</primitiveExpression>
																						<variableReferenceExpression name="segment"/>
																					</parameters>
																				</methodInvokeExpression>
																			</falseStatements>
																		</conditionStatement>
																	</falseStatements>
																</conditionStatement>
															</falseStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
												<assignStatement>
													<variableReferenceExpression name="pathIndex"/>
													<binaryOperatorExpression operator="Add">
														<variableReferenceExpression name="pathIndex"/>
														<primitiveExpression value="1"/>
													</binaryOperatorExpression>
												</assignStatement>
											</statements>
										</whileStatement>
									</statements>
									<catch exceptionType="RESTfulResourceException" localName="ex">
										<methodInvokeExpression methodName="EnsurePathProperties"/>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="BooleanOr">
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="HttpMethod"/>
															<primitiveExpression value="POST"/>
														</binaryOperatorExpression>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="HttpMethod"/>
															<primitiveExpression value="GET"/>
														</binaryOperatorExpression>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="BooleanAnd">
														<binaryOperatorExpression operator="GreaterThanOrEqual">
															<variableReferenceExpression name="pathIndex"/>
															<binaryOperatorExpression operator="Subtract">
																<propertyReferenceExpression name="Count">
																	<variableReferenceExpression name="localPath"/>
																</propertyReferenceExpression>
																<primitiveExpression value="2"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="IdentityInequality">
																<propertyReferenceExpression name="Config"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
															<unaryOperatorExpression operator="IsNullOrEmpty">
																<fieldReferenceExpression name="blobFileName"/>
															</unaryOperatorExpression>
														</binaryOperatorExpression>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<variableReferenceExpression name="pathIndex"/>
															<binaryOperatorExpression operator="Subtract">
																<propertyReferenceExpression name="Count">
																	<variableReferenceExpression name="localPath"/>
																</propertyReferenceExpression>
																<primitiveExpression value="2"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<comment>Expected: '/view/action'</comment>
														<variableDeclarationStatement name="viewType">
															<init>
																<primitiveExpression value="singleton"/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<propertyReferenceExpression name="IsCollection"/>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="viewType"/>
																	<primitiveExpression value="collection"/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="GetView">
																	<parameters>
																		<variableReferenceExpression name="viewType"/>
																		<variableReferenceExpression name="segment"/>
																		<directionExpression direction="Out">
																			<fieldReferenceExpression name="view"/>
																		</directionExpression>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="pathIndex"/>
																	<binaryOperatorExpression operator="Add">
																		<variableReferenceExpression name="pathIndex"/>
																		<primitiveExpression value="1"/>
																	</binaryOperatorExpression>
																</assignStatement>
																<assignStatement>
																	<variableReferenceExpression name="segment"/>
																	<arrayIndexerExpression>
																		<target>
																			<variableReferenceExpression name="localPath"/>
																		</target>
																		<indices>
																			<variableReferenceExpression name="pathIndex"/>
																		</indices>
																	</arrayIndexerExpression>
																</assignStatement>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<fieldReferenceExpression name="resourceLocation"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="segment"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanOr">
																			<binaryOperatorExpression operator="ValueEquality">
																				<propertyReferenceExpression name="HttpCode">
																					<variableReferenceExpression name="ex"/>
																				</propertyReferenceExpression>
																				<primitiveExpression value="403"/>
																			</binaryOperatorExpression>
																			<binaryOperatorExpression operator="ValueEquality">
																				<propertyReferenceExpression name="HttpCode">
																					<variableReferenceExpression name="ex"/>
																				</propertyReferenceExpression>
																				<primitiveExpression value="404"/>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<throwExceptionStatement>
																			<variableReferenceExpression name="ex"/>
																		</throwExceptionStatement>
																	</trueStatements>
																</conditionStatement>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="invalid_path"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Entity '{0}' is not a valid view at {1} in the url.]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="segment"/>
																		<propertyReferenceExpression name="Location"/>
																	</parameters>
																</methodInvokeExpression>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
												<comment>Expected: '/view' or '/action' or '/id'</comment>
												<assignStatement>
													<fieldReferenceExpression name="action"/>
													<methodInvokeExpression methodName="FindAction">
														<parameters>
															<variableReferenceExpression name="segment"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<fieldReferenceExpression name="action"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<unaryOperatorExpression operator="Not">
																		<propertyReferenceExpression name="IsReport"/>
																	</unaryOperatorExpression>
																	<propertyReferenceExpression name="IsImmutable"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<throwExceptionStatement>
																	<variableReferenceExpression name="ex"/>
																</throwExceptionStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="Not">
																	<methodInvokeExpression methodName="IsPermittedActionIdentifier">
																		<parameters>
																			<variableReferenceExpression name="segment"/>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="403"/>
																		<primitiveExpression value="false"/>
																		<primitiveExpression value="method-rejected"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Action '{0}' is not allowed.]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="segment"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<fieldReferenceExpression name="actionPathName"/>
															<variableReferenceExpression name="segment"/>
														</assignStatement>
														<assignStatement>
															<fieldReferenceExpression name="field"/>
															<primitiveExpression value="null"/>
														</assignStatement>
														<assignStatement>
															<propertyReferenceExpression name="PathKey"/>
															<primitiveExpression value="null"/>
														</assignStatement>
														<assignStatement>
															<propertyReferenceExpression name="PathAction"/>
															<stringFormatExpression>
																<xsl:attribute name="format"><![CDATA[{0}/{1}]]></xsl:attribute>
																<propertyReferenceExpression name="Value">
																	<methodInvokeExpression methodName="SelectSingleNode">
																		<target>
																			<fieldReferenceExpression name="action"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="parent::*/@id"/>
																		</parameters>
																	</methodInvokeExpression>
																</propertyReferenceExpression>
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<fieldReferenceExpression name="action"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="id"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
															</stringFormatExpression>
														</assignStatement>
														<methodInvokeExpression methodName="BuildActionSchema"/>
													</trueStatements>
													<falseStatements>
														<variableDeclarationStatement name="a">
															<init>
																<methodInvokeExpression methodName="FindAction">
																	<parameters>
																		<variableReferenceExpression name="segment"/>
																		<primitiveExpression value="false"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<variableReferenceExpression name="a"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="IsPermittedActionIdentifier">
																				<parameters>
																					<variableReferenceExpression name="segment"/>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="403"/>
																				<primitiveExpression value="false"/>
																				<primitiveExpression value="method-rejected"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Action '{0}' is not allowed.]]></xsl:attribute>
																				</primitiveExpression>
																				<variableReferenceExpression name="segment"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
																<variableDeclarationStatement name="moreInfo">
																	<init>
																		<stringEmptyExpression/>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="ValueEquality">
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<variableReferenceExpression name="a"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="whenKeySelected"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																				<primitiveExpression value="true" convertTo="String"/>
																			</binaryOperatorExpression>
																			<propertyReferenceExpression name="IsCollection"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="moreInfo"/>
																			<binaryOperatorExpression operator="Add">
																				<variableReferenceExpression name="moreInfo"/>
																				<primitiveExpression value=" It requires a singleton."/>
																			</binaryOperatorExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="ValueInequality">
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<variableReferenceExpression name="a"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="whenKeySelected"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																				<primitiveExpression value="true" convertTo="String"/>
																			</binaryOperatorExpression>
																			<propertyReferenceExpression name="IsSingleton"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="moreInfo"/>
																			<binaryOperatorExpression operator="Add">
																				<variableReferenceExpression name="moreInfo"/>
																				<primitiveExpression value=" It requires a collection."/>
																			</binaryOperatorExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<unaryOperatorExpression operator="IsNullOrEmpty">
																				<variableReferenceExpression name="moreInfo"/>
																			</unaryOperatorExpression>
																			<unaryOperatorExpression operator="IsNotNullOrEmpty">
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<variableReferenceExpression name="a"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="whenView"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																			</unaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="moreInfo"/>
																			<binaryOperatorExpression operator="Add">
																				<variableReferenceExpression name="moreInfo"/>
																				<primitiveExpression value=" It requires another view."/>
																			</binaryOperatorExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="403"/>
																		<primitiveExpression value="false"/>
																		<primitiveExpression value="method-rejected"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Action '{0}' is not allowed.{1}]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="segment"/>
																		<variableReferenceExpression name="moreInfo"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanOr">
																			<binaryOperatorExpression operator="ValueEquality">
																				<propertyReferenceExpression name="HttpCode">
																					<variableReferenceExpression name="ex"/>
																				</propertyReferenceExpression>
																				<primitiveExpression value="403"/>
																			</binaryOperatorExpression>
																			<binaryOperatorExpression operator="ValueEquality">
																				<propertyReferenceExpression name="HttpCode">
																					<variableReferenceExpression name="ex"/>
																				</propertyReferenceExpression>
																				<primitiveExpression value="404"/>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<throwExceptionStatement>
																			<variableReferenceExpression name="ex"/>
																		</throwExceptionStatement>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="GetView">
																				<parameters>
																					<propertyReferenceExpression name="HttpMethod"/>
																					<variableReferenceExpression name="segment"/>
																					<directionExpression direction="Out">
																						<fieldReferenceExpression name="view"/>
																					</directionExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="400"/>
																				<primitiveExpression value="true"/>
																				<primitiveExpression value="invalid_path"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Identifier '{0}' is not a valid view or action at {1} in the url.]]></xsl:attribute>
																				</primitiveExpression>
																				<variableReferenceExpression name="segment"/>
																				<propertyReferenceExpression name="Location"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</falseStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
											<falseStatements>
												<throwExceptionStatement>
													<variableReferenceExpression name="ex"/>
												</throwExceptionStatement>
											</falseStatements>
										</conditionStatement>
									</catch>
								</tryStatement>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="Following"/>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="ThrowError">
											<target>
												<typeReferenceExpression type="RESTfulResource"/>
											</target>
											<parameters>
												<primitiveExpression value="404"/>
												<primitiveExpression value="true"/>
												<primitiveExpression value="invalid_path"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[The name of the field is expected when following to {0}.]]></xsl:attribute>
												</primitiveExpression>
												<fieldReferenceExpression name="followTo"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<fieldReferenceExpression name="controller"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNullOrEmpty">
													<fieldReferenceExpression name="view"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="GetView">
													<parameters>
														<propertyReferenceExpression name="HttpMethod"/>
														<primitiveExpression value="default"/>
														<directionExpression direction="Out">
															<fieldReferenceExpression name="view"/>
														</directionExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
											<falseStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="ValueEquality">
																<propertyReferenceExpression name="HttpMethod"/>
																<primitiveExpression value="POST"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="BooleanAnd">
																<binaryOperatorExpression operator="IdentityEquality">
																	<fieldReferenceExpression name="action"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
																<methodInvokeExpression methodName="IsViewOfType">
																	<parameters>
																		<fieldReferenceExpression name="view"/>
																		<primitiveExpression value="collection"/>
																	</parameters>
																</methodInvokeExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<comment>switch the view to the "POST" view createForm1 if the action is not specified</comment>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="GetView">
																	<parameters>
																		<propertyReferenceExpression name="HttpMethod"/>
																		<primitiveExpression value="default"/>
																		<directionExpression direction="Out">
																			<fieldReferenceExpression name="view"/>
																		</directionExpression>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="ValueInequality">
																				<variableReferenceExpression name="segment"/>
																				<primitiveExpression value="default"/>
																			</binaryOperatorExpression>
																			<binaryOperatorExpression operator="BooleanAnd">
																				<binaryOperatorExpression operator="ValueInequality">
																					<variableReferenceExpression name="segment"/>
																					<fieldReferenceExpression name="view"/>
																				</binaryOperatorExpression>
																				<methodInvokeExpression methodName="IsViewOfType">
																					<parameters>
																						<variableReferenceExpression name="segment"/>
																						<primitiveExpression value="collection"/>
																					</parameters>
																				</methodInvokeExpression>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="422"/>
																				<primitiveExpression value="invalid_path"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[View '{0}' cannot be used to post data.]]></xsl:attribute>
																				</primitiveExpression>
																				<variableReferenceExpression name="segment"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
															<falseStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="method_rejected"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Unable to post to this url.]]></xsl:attribute>
																		</primitiveExpression>
																	</parameters>
																</methodInvokeExpression>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<variableReferenceExpression name="isLatestVersion"/>
											</condition>
											<trueStatements>
												<assignStatement>
													<propertyReferenceExpression name="LatestVersion">
														<typeReferenceExpression type="RESTfulResource"/>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="Controller"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodInvokeExpression methodName="EnsurePathProperties"/>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="Contains">
											<target>
												<propertyReferenceExpression name="OutputContentType"/>
											</target>
											<parameters>
												<primitiveExpression value="xml"/>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Items">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="RESTfulConfiguration_xmlRoot"/>
												</indices>
											</arrayIndexerExpression>
											<propertyReferenceExpression name="XmlRoot"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<propertyReferenceExpression name="OAuth"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="Not">
													<methodInvokeExpression methodName="AllowMethod">
														<parameters>
															<propertyReferenceExpression name="ControllerName"/>
															<primitiveExpression value="null"/>
														</parameters>
													</methodInvokeExpression>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="method">
													<init>
														<propertyReferenceExpression name="HttpMethod"/>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="allowedMethods">
													<init>
														<objectCreateExpression type="List">
															<typeArguments>
																<typeReference type="System.String"/>
															</typeArguments>
														</objectCreateExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNotNullOrEmpty">
															<propertyReferenceExpression name="ActionPathName"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="method"/>
															<propertyReferenceExpression name="ActionPathName"/>
														</assignStatement>
													</trueStatements>
													<falseStatements>
														<foreachStatement>
															<variable name="m"/>
															<target>
																<propertyReferenceExpression name="SupportedMethods">
																	<typeReferenceExpression type="V2ServiceRequestHandlerBase"/>
																</propertyReferenceExpression>
															</target>
															<statements>
																<conditionStatement>
																	<condition>
																		<methodInvokeExpression methodName="AllowMethod">
																			<parameters>
																				<propertyReferenceExpression name="ControllerName"/>
																				<variableReferenceExpression name="m"/>
																			</parameters>
																		</methodInvokeExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="allowedMethods"/>
																			</target>
																			<parameters>
																				<variableReferenceExpression name="m"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</statements>
														</foreachStatement>
													</falseStatements>
												</conditionStatement>
												<variableDeclarationStatement name="errorDescription">
													<init>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Method {0} is not allowed.]]></xsl:attribute>
														</primitiveExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNotNullOrEmpty">
															<propertyReferenceExpression name="ActionPathName"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="errorDescription"/>
															<primitiveExpression>
																<xsl:attribute name="value"><![CDATA[Action {0} is not allowed.]]></xsl:attribute>
															</primitiveExpression>
														</assignStatement>
													</trueStatements>
													<falseStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="GreaterThan">
																	<propertyReferenceExpression name="Count">
																		<variableReferenceExpression name="allowedMethods"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="0"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="errorDescription"/>
																	<binaryOperatorExpression operator="Add">
																		<variableReferenceExpression name="errorDescription"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[ Use {1} instead.]]></xsl:attribute>
																		</primitiveExpression>
																	</binaryOperatorExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="403"/>
														<primitiveExpression value="invalid_method"/>
														<variableReferenceExpression name="errorDescription"/>
														<variableReferenceExpression name="method"/>
														<methodInvokeExpression methodName="Join">
															<target>
																<typeReferenceExpression type="System.String"/>
															</target>
															<parameters>
																<primitiveExpression value=", "/>
																<variableReferenceExpression name="allowedMethods"/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<foreachStatement>
											<variable name="fieldName"/>
											<target>
												<propertyReferenceExpression name="Keys">
													<fieldReferenceExpression name="excludedFields"/>
												</propertyReferenceExpression>
											</target>
											<statements>
												<methodInvokeExpression methodName="Remove">
													<target>
														<fieldReferenceExpression name="fieldMap"/>
													</target>
													<parameters>
														<variableReferenceExpression name="fieldName"/>
													</parameters>
												</methodInvokeExpression>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method BuildActionSchema() -->
						<memberMethod returnType="JObject" name="BuildActionSchema">
							<attributes family="true"/>
							<statements>
								<variableDeclarationStatement type="List" name="paramFieldList">
									<typeArguments>
										<typeReference type="DataField"/>
									</typeArguments>
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="confirmation">
									<init>
										<methodInvokeExpression methodName="GetAttribute">
											<target>
												<fieldReferenceExpression name="action"/>
											</target>
											<parameters>
												<primitiveExpression value="confirmation"/>
												<stringEmptyExpression/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<variableReferenceExpression name="confirmation"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="controllerName">
											<init>
												<stringEmptyExpression/>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="viewId">
											<init>
												<stringEmptyExpression/>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="m">
											<init>
												<methodInvokeExpression methodName="Match">
													<target>
														<typeReferenceExpression type="Regex"/>
													</target>
													<parameters>
														<variableReferenceExpression name="confirmation"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[_controller\s*=\s*(?'ID'.+?)\b]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="Success">
													<variableReferenceExpression name="m"/>
												</propertyReferenceExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="controllerName"/>
													<propertyReferenceExpression name="Value">
														<arrayIndexerExpression>
															<target>
																<propertyReferenceExpression name="Groups">
																	<variableReferenceExpression name="m"/>
																</propertyReferenceExpression>
															</target>
															<indices>
																<primitiveExpression value="ID"/>
															</indices>
														</arrayIndexerExpression>
													</propertyReferenceExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<variableReferenceExpression name="m"/>
											<methodInvokeExpression methodName="Match">
												<target>
													<typeReferenceExpression type="Regex"/>
												</target>
												<parameters>
													<variableReferenceExpression name="confirmation"/>
													<primitiveExpression>
														<xsl:attribute name="value"><![CDATA[_view\s*=\s*(?'ID'.+?)\b]]></xsl:attribute>
													</primitiveExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="Success">
													<variableReferenceExpression name="m"/>
												</propertyReferenceExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="viewId"/>
													<propertyReferenceExpression name="Value">
														<arrayIndexerExpression>
															<target>
																<propertyReferenceExpression name="Groups">
																	<variableReferenceExpression name="m"/>
																</propertyReferenceExpression>
															</target>
															<indices>
																<primitiveExpression value="ID"/>
															</indices>
														</arrayIndexerExpression>
													</propertyReferenceExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<variableReferenceExpression name="controllerName"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<tryStatement>
													<statements>
														<assignStatement>
															<variableReferenceExpression name="paramFieldList"/>
															<methodInvokeExpression methodName="ToSchemaFields">
																<parameters>
																	<variableReferenceExpression name="controllerName"/>
																	<variableReferenceExpression name="viewId"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</statements>
													<catch exceptionType="Exception" localName="ex">
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="invalid_action"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Action '{0}' cannot be confirmed with the controller '{1}'. {2}]]></xsl:attribute>
																</primitiveExpression>
																<propertyReferenceExpression name="ActionPathName"/>
																<variableReferenceExpression name="controllerName"/>
																<propertyReferenceExpression name="Message">
																	<variableReferenceExpression name="ex"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</catch>
												</tryStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="input">
									<init>
										<objectCreateExpression type="JObject"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="CustomSchema"/>
									<objectCreateExpression type="JObject">
										<parameters>
											<objectCreateExpression type="JProperty">
												<parameters>
													<primitiveExpression value="_input"/>
													<variableReferenceExpression name="input"/>
												</parameters>
											</objectCreateExpression>
										</parameters>
									</objectCreateExpression>
								</assignStatement>
								<variableDeclarationStatement name="parametersObj">
									<init>
										<objectCreateExpression type="JObject"/>
									</init>
								</variableDeclarationStatement>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="input"/>
									</target>
									<parameters>
										<objectCreateExpression type="JProperty">
											<parameters>
												<propertyReferenceExpression name="ParametersKey"/>
												<variableReferenceExpression name="parametersObj"/>
											</parameters>
										</objectCreateExpression>
									</parameters>
								</methodInvokeExpression>
								<variableDeclarationStatement name="parametersProperties">
									<init>
										<objectCreateExpression type="JObject"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="paramFieldList"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="parametersIsRequired">
											<init>
												<primitiveExpression value="false"/>
											</init>
										</variableDeclarationStatement>
										<foreachStatement>
											<variable name="f"/>
											<target>
												<variableReferenceExpression name="paramFieldList"/>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="Not">
															<propertyReferenceExpression name="AllowNulls">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="parametersIsRequired"/>
															<primitiveExpression value="true"/>
														</assignStatement>
														<breakStatement/>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="parametersObj"/>
											</target>
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="required"/>
														<variableReferenceExpression name="parametersIsRequired"/>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="parametersObj"/>
											</target>
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="properties"/>
														<variableReferenceExpression name="parametersProperties"/>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="AddFieldsToSchema">
											<parameters>
												<variableReferenceExpression name="parametersProperties"/>
												<variableReferenceExpression name="paramFieldList"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
									<falseStatements>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="parametersObj"/>
											</target>
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="properties"/>
														<objectCreateExpression type="JObject"/>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</methodInvokeExpression>
									</falseStatements>
								</conditionStatement>
								<comment>create the 'collection' element in the '_input' key of action schema</comment>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="IsCollection"/>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="collectionSchema">
											<init>
												<objectCreateExpression type="JObject"/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="input"/>
											</target>
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<propertyReferenceExpression name="CollectionKey"/>
														<objectCreateExpression type ="JObject">
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<primitiveExpression value="array"/>
																		<primitiveExpression value="true"/>
																	</parameters>
																</objectCreateExpression>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<primitiveExpression value="properties"/>
																		<variableReferenceExpression name="collectionSchema"/>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</objectCreateExpression>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</methodInvokeExpression>
										<foreachStatement>
											<variable name="fd"/>
											<target>
												<propertyReferenceExpression name="FieldMap"/>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<methodInvokeExpression methodName="GetAttribute">
																<target>
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="fd"/>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<primitiveExpression value="isPrimaryKey"/>
																	<stringEmptyExpression/>
																</parameters>
															</methodInvokeExpression>
															<primitiveExpression value="true" convertTo="String"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="f">
															<init>
																<objectCreateExpression type="JObject"/>
															</init>
														</variableDeclarationStatement>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="f"/>
																</target>
																<indices>
																	<primitiveExpression value="type"/>
																</indices>
															</arrayIndexerExpression>
															<methodInvokeExpression methodName="GetAttribute">
																<target>
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="fd"/>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<primitiveExpression value="type"/>
																	<stringEmptyExpression/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<variableDeclarationStatement name="len">
															<init>
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<propertyReferenceExpression name="Value">
																			<variableReferenceExpression name="fd"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="len"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="len"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<arrayIndexerExpression>
																		<target>
																			<variableReferenceExpression name="f"/>
																		</target>
																		<indices>
																			<primitiveExpression value="length"/>
																		</indices>
																	</arrayIndexerExpression>
																	<methodInvokeExpression methodName="Parse">
																		<target>
																			<typeReferenceExpression type="System.Int32"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="len"/>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="f"/>
																</target>
																<indices>
																	<primitiveExpression value="required"/>
																</indices>
															</arrayIndexerExpression>
															<binaryOperatorExpression operator="ValueEquality">
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<propertyReferenceExpression name="Value">
																			<variableReferenceExpression name="fd"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="allowNulls"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
																<primitiveExpression value="false" convertTo="String"/>
															</binaryOperatorExpression>
														</assignStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="collectionSchema"/>
															</target>
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<methodInvokeExpression methodName="ToApiFieldName">
																			<parameters>
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<propertyReferenceExpression name="Value">
																							<variableReferenceExpression name="fd"/>
																						</propertyReferenceExpression>
																					</target>
																					<parameters>
																						<primitiveExpression value="name"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																		<variableReferenceExpression name="f"/>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<variableReferenceExpression name="input"/>
										</target>
										<indices>
											<primitiveExpression value="*"/>
										</indices>
									</arrayIndexerExpression>
									<primitiveExpression value="true"/>
								</assignStatement>
								<methodReturnStatement>
									<propertyReferenceExpression name="CustomSchema"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method StreamJSResource(string) -->
						<memberMethod name="StreamJSResource">
							<attributes family="true"/>
							<parameters>
								<parameter type="System.String" name="segment"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="scriptInfo">
									<init>
										<methodInvokeExpression methodName="Match">
											<target>
												<typeReferenceExpression type="Regex"/>
											</target>
											<parameters>
												<argumentReferenceExpression name="segment"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[^(.+?)((\.min)?\.js)$]]></xsl:attribute>
												</primitiveExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<unaryOperatorExpression operator="Not">
												<propertyReferenceExpression name="Success">
													<variableReferenceExpression name="scriptInfo"/>
												</propertyReferenceExpression>
											</unaryOperatorExpression>
											<binaryOperatorExpression operator="ValueInequality">
												<propertyReferenceExpression name="Value">
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Groups">
																<variableReferenceExpression name="scriptInfo"/>
															</propertyReferenceExpression>
														</target>
														<indices>
															<primitiveExpression value="1"/>
														</indices>
													</arrayIndexerExpression>
												</propertyReferenceExpression>
												<primitiveExpression value="restful-2.0.1"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="ThrowError">
											<target>
												<typeReferenceExpression type="RESTfulResource"/>
											</target>
											<parameters>
												<primitiveExpression value="404"/>
												<primitiveExpression value="invalid_path"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[Uknown script '{0}' is requested.]]></xsl:attribute>
												</primitiveExpression>
												<argumentReferenceExpression name="segment"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="extension">
									<init>
										<propertyReferenceExpression name="Value">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Groups">
														<variableReferenceExpression name="scriptInfo"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="2"/>
												</indices>
											</arrayIndexerExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<unaryOperatorExpression operator="Not">
												<methodInvokeExpression methodName="StartsWith">
													<target>
														<variableReferenceExpression name="extension"/>
													</target>
													<parameters>
														<primitiveExpression value=".min"/>
													</parameters>
												</methodInvokeExpression>
											</unaryOperatorExpression>
											<propertyReferenceExpression name="EnableMinifiedScript">
												<typeReferenceExpression type="AquariumExtenderBase"/>
											</propertyReferenceExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="extension"/>
											<primitiveExpression value=".min.js"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="context">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="HttpContext"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="response">
									<init>
										<propertyReferenceExpression name="Response">
											<variableReferenceExpression name="context"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="js">
									<init>
										<methodInvokeExpression methodName="ReadAllText">
											<target>
												<typeReferenceExpression type="File"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="MapPath">
													<target>
														<propertyReferenceExpression name="Server">
															<variableReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<binaryOperatorExpression operator="Add">
															<primitiveExpression value="~/js/sys/restful"/>
															<variableReferenceExpression name="extension"/>
														</binaryOperatorExpression>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="ContentType">
										<variableReferenceExpression name="response"/>
									</propertyReferenceExpression>
									<primitiveExpression value="text/javascript"/>
								</assignStatement>
								<methodInvokeExpression methodName="Remove">
									<target>
										<propertyReferenceExpression name="Headers">
											<variableReferenceExpression name="response"/>
										</propertyReferenceExpression>
									</target>
									<parameters>
										<primitiveExpression value="Set-Cookie"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Clear">
									<target>
										<propertyReferenceExpression name="Cookies">
											<variableReferenceExpression name="response"/>
										</propertyReferenceExpression>
									</target>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="SetCacheability">
									<target>
										<propertyReferenceExpression name="Cache">
											<variableReferenceExpression name="response"/>
										</propertyReferenceExpression>
									</target>
									<parameters>
										<propertyReferenceExpression name="Public">
											<typeReferenceExpression type="HttpCacheability"/>
										</propertyReferenceExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="SetMaxAge">
									<target>
										<propertyReferenceExpression name="Cache">
											<variableReferenceExpression name="response"/>
										</propertyReferenceExpression>
									</target>
									<parameters>
										<methodInvokeExpression methodName="FromDays">
											<target>
												<typeReferenceExpression type="TimeSpan"/>
											</target>
											<parameters>
												<primitiveExpression value="365"/>
											</parameters>
										</methodInvokeExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="SetProxyMaxAge">
									<target>
										<propertyReferenceExpression name="Cache">
											<variableReferenceExpression name="response"/>
										</propertyReferenceExpression>
									</target>
									<parameters>
										<methodInvokeExpression methodName="FromDays">
											<target>
												<typeReferenceExpression type="TimeSpan"/>
											</target>
											<parameters>
												<primitiveExpression value="365"/>
											</parameters>
										</methodInvokeExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="CompressOutput">
									<target>
										<typeReferenceExpression type="ApplicationServicesBase"/>
									</target>
									<parameters>
										<variableReferenceExpression name="context"/>
										<variableReferenceExpression name="js"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="End">
									<target>
										<variableReferenceExpression name="response"/>
									</target>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method EnsurePathProperties() -->
						<memberMethod name="EnsurePathProperties">
							<attributes family="true"/>
							<statements>
								<assignStatement>
									<propertyReferenceExpression name="PathView"/>
									<fieldReferenceExpression name="view"/>
								</assignStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityEquality">
												<fieldReferenceExpression name="fieldMap"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="IdentityInequality">
												<propertyReferenceExpression name="Config"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="RefreshConfigurationData"/>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<fieldReferenceExpression name="id"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertyReferenceExpression name="PathKey"/>
											<fieldReferenceExpression name="id"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<fieldReferenceExpression name="field"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertyReferenceExpression name="PathField"/>
											<fieldReferenceExpression name="field"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method IsPermittedActionIdentifier(string) -->
						<memberMethod returnType="System.Boolean" name="IsPermittedActionIdentifier">
							<attributes family="true"/>
							<parameters>
								<parameter type="System.String" name="id"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="a">
									<init>
										<fieldReferenceExpression name="action"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="a"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="a"/>
											<methodInvokeExpression methodName="FindAction">
												<parameters>
													<argumentReferenceExpression name="id"/>
													<primitiveExpression value="false"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<variableReferenceExpression name="a"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="false"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="actionId">
									<init>
										<methodInvokeExpression methodName="GetAttribute">
											<target>
												<variableReferenceExpression name="a"/>
											</target>
											<parameters>
												<primitiveExpression value="id"/>
												<stringEmptyExpression/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="IsMatch">
											<target>
												<typeReferenceExpression type="Regex"/>
											</target>
											<parameters>
												<variableReferenceExpression name="actionId"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[^a\d+$]]></xsl:attribute>
												</primitiveExpression>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="false"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Equals">
										<target>
											<methodInvokeExpression methodName="NormalizeKey">
												<target>
													<typeReferenceExpression type="ConfigDictionary"/>
												</target>
												<parameters>
													<argumentReferenceExpression name="id"/>
												</parameters>
											</methodInvokeExpression>
										</target>
										<parameters>
											<variableReferenceExpression name="actionId"/>
											<propertyReferenceExpression name="OrdinalIgnoreCase">
												<typeReferenceExpression type="StringComparison"/>
											</propertyReferenceExpression>
										</parameters>
									</methodInvokeExpression>"
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ValidateApiUri(Uri) -->
						<memberMethod returnType="System.Boolean" name="ValidateApiUri">
							<attributes family="true" final="true"/>
							<parameters>
								<parameter type="Uri" name="resource"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="domainTest">
									<init>
										<castExpression targetType="System.String">
											<methodInvokeExpression methodName="SettingsProperty">
												<target>
													<typeReferenceExpression type="ApplicationServicesBase"/>
												</target>
												<parameters>
													<primitiveExpression value="server.rest.domain"/>
												</parameters>
											</methodInvokeExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<variableReferenceExpression name="domainTest"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="re">
											<init>
												<objectCreateExpression type="Regex">
													<parameters>
														<variableReferenceExpression name="domainTest"/>
													</parameters>
												</objectCreateExpression>
											</init>
										</variableDeclarationStatement>
										<methodReturnStatement>
											<methodInvokeExpression methodName="IsMatch">
												<target>
													<variableReferenceExpression name="re"/>
												</target>
												<parameters>
													<propertyReferenceExpression name="Authority">
														<variableReferenceExpression name="resource"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<primitiveExpression value="true"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method GetContext(string[]) -->
						<memberMethod returnType="ViewPage" name="GetContext">
							<attributes family="true"/>
							<parameters>
								<parameter type="System.String[]" name="fieldFilter"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="filter">
									<init>
										<objectCreateExpression type="JObject"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable name="fvo"/>
									<target>
										<propertyReferenceExpression name="Filter">
											<thisReferenceExpression/>
										</propertyReferenceExpression>
									</target>
									<statements>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="filter"/>
											</target>
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<propertyReferenceExpression name="Name">
															<variableReferenceExpression name="fvo"/>
														</propertyReferenceExpression>
														<objectCreateExpression type="JObject">
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<primitiveExpression value="equals"/>
																		<propertyReferenceExpression name="Value">
																			<variableReferenceExpression name="fvo"/>
																		</propertyReferenceExpression>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</objectCreateExpression>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</foreachStatement>
								<variableDeclarationStatement name="r">
									<init>
										<objectCreateExpression type="PageRequest"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="Controller">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<fieldReferenceExpression name="controller"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="View">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<fieldReferenceExpression name="view"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="PageIndex">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<primitiveExpression value="0"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="PageSize">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<primitiveExpression value="1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="FieldFilter">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<argumentReferenceExpression name="fieldFilter"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="RequiresMetaData">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<primitiveExpression value="true"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MetadataFilter">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<arrayCreateExpression>
										<createType type="System.String"/>
										<initializers>
											<primitiveExpression value="fields"/>
										</initializers>
									</arrayCreateExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Filter">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="ToFilter">
										<parameters>
											<variableReferenceExpression name="filter"/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetPage">
										<target>
											<methodInvokeExpression methodName="CreateDataController">
												<target>
													<typeReferenceExpression type="ControllerFactory"/>
												</target>
											</methodInvokeExpression>
										</target>
										<parameters>
											<propertyReferenceExpression name="Controller">
												<variableReferenceExpression name="r"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="View">
												<variableReferenceExpression name="r"/>
											</propertyReferenceExpression>
											<variableReferenceExpression name="r"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method RefreshConfigurationData() -->
						<memberMethod name="RefreshConfigurationData">
							<attributes family="true"/>
							<statements>
								<methodInvokeExpression methodName="Clear">
									<target>
										<fieldReferenceExpression name="pk"/>
									</target>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Clear">
									<target>
										<fieldReferenceExpression name="filter"/>
									</target>
								</methodInvokeExpression>
								<assignStatement>
									<fieldReferenceExpression name="fieldMap"/>
									<objectCreateExpression type="ConfigDictionary"/>
								</assignStatement>
								<variableDeclarationStatement name="fieldIterator">
									<init>
										<methodInvokeExpression methodName="Select">
											<target>
												<propertyReferenceExpression name="Config"/>
											</target>
											<parameters>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[/c:dataController/c:fields/c:field]]></xsl:attribute>
												</primitiveExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<whileStatement>
									<test>
										<methodInvokeExpression methodName="MoveNext">
											<target>
												<variableReferenceExpression name="fieldIterator"/>
											</target>
										</methodInvokeExpression>
									</test>
									<statements>
										<variableDeclarationStatement name="fieldNav">
											<init>
												<methodInvokeExpression methodName="Clone">
													<target>
														<propertyReferenceExpression name="Current">
															<variableReferenceExpression name="fieldIterator"/>
														</propertyReferenceExpression>
													</target>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="fieldName">
											<init>
												<methodInvokeExpression methodName="GetAttribute">
													<target>
														<variableReferenceExpression name="fieldNav"/>
													</target>
													<parameters>
														<primitiveExpression value="name"/>
														<stringEmptyExpression/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<fieldReferenceExpression name="fieldMap"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="ToApiFieldName">
													<parameters>
														<variableReferenceExpression name="fieldName"/>
													</parameters>
												</methodInvokeExpression>
												<variableReferenceExpression name="fieldNav"/>
											</parameters>
										</methodInvokeExpression>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<methodInvokeExpression methodName="GetAttribute">
														<target>
															<propertyReferenceExpression name="Current">
																<variableReferenceExpression name="fieldIterator"/>
															</propertyReferenceExpression>
														</target>
														<parameters>
															<primitiveExpression value="isPrimaryKey"/>
															<stringEmptyExpression/>
														</parameters>
													</methodInvokeExpression>
													<primitiveExpression value="true" convertTo="String"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="fvo">
													<init>
														<objectCreateExpression type="FieldValue">
															<parameters>
																<variableReferenceExpression name="fieldName"/>
															</parameters>
														</objectCreateExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<methodInvokeExpression methodName="GetAttribute">
																<target>
																	<propertyReferenceExpression name="Current">
																		<variableReferenceExpression name="fieldIterator"/>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<primitiveExpression value="readOnly"/>
																	<stringEmptyExpression/>
																</parameters>
															</methodInvokeExpression>
															<primitiveExpression value="true" convertTo="String"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<propertyReferenceExpression name="ReadOnly">
																<variableReferenceExpression name="fvo"/>
															</propertyReferenceExpression>
															<primitiveExpression value="true"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<methodInvokeExpression methodName="Add">
													<target>
														<fieldReferenceExpression name="pk"/>
													</target>
													<parameters>
														<variableReferenceExpression name="fvo"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</statements>
								</whileStatement>
								<assignStatement>
									<fieldReferenceExpression name="viewMap"/>
									<objectCreateExpression type="ConfigDictionary"/>
								</assignStatement>
								<variableDeclarationStatement name="viewIterator">
									<init>
										<methodInvokeExpression methodName="Select">
											<target>
												<propertyReferenceExpression name="Config"/>
											</target>
											<parameters>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[/c:dataController/c:views/c:view]]></xsl:attribute>
												</primitiveExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<whileStatement>
									<test>
										<methodInvokeExpression methodName="MoveNext">
											<target>
												<variableReferenceExpression name="viewIterator"/>
											</target>
										</methodInvokeExpression>
									</test>
									<statements>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="IsTagged">
													<parameters>
														<propertyReferenceExpression name="Current">
															<variableReferenceExpression name="viewIterator"/>
														</propertyReferenceExpression>
														<primitiveExpression value="rest-api-none"/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<continueStatement/>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement name="viewNav">
											<init>
												<methodInvokeExpression methodName="Clone">
													<target>
														<propertyReferenceExpression name="Current">
															<variableReferenceExpression name="viewIterator"/>
														</propertyReferenceExpression>
													</target>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<fieldReferenceExpression name="viewMap"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="ToApiFieldName">
													<parameters>
														<methodInvokeExpression methodName="GetAttribute">
															<target>
																<variableReferenceExpression name="viewNav"/>
															</target>
															<parameters>
																<primitiveExpression value="id"/>
																<stringEmptyExpression/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
												<variableReferenceExpression name="viewNav"/>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</whileStatement>
							</statements>
						</memberMethod>
						<!-- method GetView(string, string, out string) -->
						<memberMethod returnType="System.Boolean" name="GetView">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="type"/>
								<parameter type="System.String" name="id"/>
								<parameter type="System.String" name="viewId" direction="Out"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="isExactMatch">
									<init>
										<primitiveExpression value="false"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<fieldReferenceExpression name="viewMap"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="RefreshConfigurationData"/>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="ValueEquality">
												<argumentReferenceExpression name="type"/>
												<primitiveExpression value="auto"/>
											</binaryOperatorExpression>
											<propertyReferenceExpression name="IsImmutable"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<fieldReferenceExpression name="isCollection"/>
											</condition>
											<trueStatements>
												<assignStatement>
													<argumentReferenceExpression name="type"/>
													<primitiveExpression value="collection"/>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<variableReferenceExpression name="type"/>
													<primitiveExpression value="singleton"/>
												</assignStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="isDefault">
									<init>
										<binaryOperatorExpression operator="ValueEquality">
											<argumentReferenceExpression name="id"/>
											<primitiveExpression value="default"/>
										</binaryOperatorExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<variableReferenceExpression name="isDefault"/>
									</condition>
									<trueStatements>
										<assignStatement>
											<argumentReferenceExpression name="id"/>
											<methodInvokeExpression methodName="DefaultView">
												<parameters>
													<variableReferenceExpression name="type"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<fieldReferenceExpression name="viewNav"/>
									<primitiveExpression value="null"/>
								</assignStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<argumentReferenceExpression name="id"/>
											</unaryOperatorExpression>
											<methodInvokeExpression methodName="TryGetValue">
												<target>
													<fieldReferenceExpression name="viewMap"/>
												</target>
												<parameters>
													<argumentReferenceExpression name="id"/>
													<directionExpression direction="Out">
														<fieldReferenceExpression name="viewNav"/>
													</directionExpression>
												</parameters>
											</methodInvokeExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="isExactMatch"/>
											<primitiveExpression value="true"/>
										</assignStatement>
										<assignStatement>
											<fieldReferenceExpression name="specifiedView"/>
											<argumentReferenceExpression name="id"/>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<assignStatement>
											<argumentReferenceExpression name="id"/>
											<fieldReferenceExpression name="specifiedView"/>
										</assignStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNullOrEmpty">
													<argumentReferenceExpression name="id"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<argumentReferenceExpression name="id"/>
													<methodInvokeExpression methodName="DefaultView">
														<parameters>
															<argumentReferenceExpression name="type"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<fieldReferenceExpression name="viewMap"/>
											</target>
											<parameters>
												<argumentReferenceExpression name="id"/>
												<directionExpression direction="Out">
													<fieldReferenceExpression name="viewNav"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
									</falseStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityEquality">
												<fieldReferenceExpression name="viewNav"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<propertyReferenceExpression name="IsRoot"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<foreachStatement>
											<variable name="viewNav"/>
											<target>
												<propertyReferenceExpression name="Values">
													<fieldReferenceExpression name="viewMap"/>
												</propertyReferenceExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="IsTagged">
															<parameters>
																<variableReferenceExpression name="viewNav"/>
																<primitiveExpression value="rest-api-root"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<fieldReferenceExpression name="viewNav"/>
															<variableReferenceExpression name="viewNav"/>
														</assignStatement>
														<assignStatement>
															<variableReferenceExpression name="isExactMatch"/>
															<variableReferenceExpression name="isDefault"/>
														</assignStatement>
														<breakStatement/>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<fieldReferenceExpression name="viewNav"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<argumentReferenceExpression name="id"/>
											<methodInvokeExpression methodName="GetAttribute">
												<target>
													<fieldReferenceExpression name="viewNav"/>
												</target>
												<parameters>
													<primitiveExpression value="id"/>
													<stringEmptyExpression/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="IsTagged">
													<parameters>
														<fieldReferenceExpression name="viewNav"/>
														<primitiveExpression value="rest-api-root"/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<fieldReferenceExpression name="isCollection"/>
													<primitiveExpression value="false"/>
												</assignStatement>
												<assignStatement>
													<fieldReferenceExpression name="id"/>
													<primitiveExpression value="1" convertTo="String"/>
												</assignStatement>
												<assignStatement>
													<fieldReferenceExpression name="specifiedView"/>
													<argumentReferenceExpression name="id"/>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<variableDeclarationStatement name="identifierIsCompatibleWithType">
													<init>
														<binaryOperatorExpression operator="ValueEquality">
															<argumentReferenceExpression name="id"/>
															<methodInvokeExpression methodName="DefaultView">
																<parameters>
																	<argumentReferenceExpression name="type"/>
																</parameters>
															</methodInvokeExpression>
														</binaryOperatorExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="Not">
															<variableReferenceExpression name="identifierIsCompatibleWithType"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="identifierIsCompatibleWithType"/>
															<methodInvokeExpression methodName="IsTagged">
																<parameters>
																	<fieldReferenceExpression name="viewNav"/>
																	<binaryOperatorExpression operator="Add">
																		<primitiveExpression value="rest-api-"/>
																		<methodInvokeExpression methodName="ToLower">
																			<target>
																				<argumentReferenceExpression name="type"/>
																			</target>
																		</methodInvokeExpression>
																	</binaryOperatorExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="Not">
															<variableReferenceExpression name="identifierIsCompatibleWithType"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<argumentReferenceExpression name="id"/>
															<propertyReferenceExpression name="Location"/>
														</assignStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<argumentReferenceExpression name="type"/>
																	<primitiveExpression value="collection"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="422"/>
																		<primitiveExpression value="false"/>
																		<primitiveExpression value="invalid_path"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[View '{0}' cannot be used to retrieve a collection.]]></xsl:attribute>
																		</primitiveExpression>
																		<argumentReferenceExpression name="id"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<argumentReferenceExpression name="type"/>
																	<primitiveExpression value="singleton"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="422"/>
																		<primitiveExpression value="false"/>
																		<primitiveExpression value="invalid_path"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[View '{0}' cannot be used to retreive a singleton.]]></xsl:attribute>
																		</primitiveExpression>
																		<argumentReferenceExpression name="id"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<argumentReferenceExpression name="type"/>
																	<primitiveExpression value="POST"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="422"/>
																		<primitiveExpression value="false"/>
																		<primitiveExpression value="invalid_path"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[View '{0}' cannot be used to post data.]]></xsl:attribute>
																		</primitiveExpression>
																		<argumentReferenceExpression name="id"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
									<falseStatements>
										<methodInvokeExpression methodName="ThrowError">
											<target>
												<typeReferenceExpression type="RESTfulResource"/>
											</target>
											<parameters>
												<primitiveExpression value="400"/>
												<primitiveExpression value="true"/>
												<primitiveExpression value="invalid_path"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[There is no view compatible with the {0} method at {1} in the url.]]></xsl:attribute>
												</primitiveExpression>
												<propertyReferenceExpression name="HttpMethod"/>
												<propertyReferenceExpression name="Location"/>
											</parameters>
										</methodInvokeExpression>
									</falseStatements>
								</conditionStatement>
								<assignStatement>
									<argumentReferenceExpression name="viewId"/>
									<argumentReferenceExpression name="id"/>
								</assignStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="GreaterThan">
												<propertyReferenceExpression name="Count">
													<fieldReferenceExpression name="resourceLocation"/>
												</propertyReferenceExpression>
												<primitiveExpression value="1"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="BooleanAnd">
												<methodInvokeExpression methodName="IsSameResource">
													<parameters>
														<argumentReferenceExpression name="id"/>
														<arrayIndexerExpression>
															<target>
																<fieldReferenceExpression name="resourceLocation"/>
															</target>
															<indices>
																<binaryOperatorExpression operator="Subtract">
																	<propertyReferenceExpression name="Count">
																		<fieldReferenceExpression name="resourceLocation"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="1"/>
																</binaryOperatorExpression>
															</indices>
														</arrayIndexerExpression>
													</parameters>
												</methodInvokeExpression>
												<methodInvokeExpression methodName="IsSameResource">
													<parameters>
														<argumentReferenceExpression name="id"/>
														<arrayIndexerExpression>
															<target>
																<fieldReferenceExpression name="resourceLocation"/>
															</target>
															<indices>
																<binaryOperatorExpression operator="Subtract">
																	<propertyReferenceExpression name="Count">
																		<fieldReferenceExpression name="resourceLocation"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="2"/>
																</binaryOperatorExpression>
															</indices>
														</arrayIndexerExpression>
													</parameters>
												</methodInvokeExpression>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="ThrowError">
											<target>
												<typeReferenceExpression type="RESTfulResource"/>
											</target>
											<parameters>
												<primitiveExpression value="400"/>
												<primitiveExpression value="true"/>
												<primitiveExpression value="invalid_path"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[View '{0}' is specified more than once in the path.]]></xsl:attribute>
												</primitiveExpression>
												<arrayIndexerExpression>
													<target>
														<fieldReferenceExpression name="resourceLocation"/>
													</target>
													<indices>
														<binaryOperatorExpression operator="Subtract">
															<propertyReferenceExpression name="Count">
																<fieldReferenceExpression name="resourceLocation"/>
															</propertyReferenceExpression>
															<primitiveExpression value="1"/>
														</binaryOperatorExpression>
													</indices>
												</arrayIndexerExpression>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<fieldReferenceExpression name="viewNav"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="Clear">
											<target>
												<fieldReferenceExpression name="excludedFields"/>
											</target>
										</methodInvokeExpression>
										<variableDeclarationStatement name="dataFieldIterator">
											<init>
												<methodInvokeExpression methodName="Select">
													<target>
														<fieldReferenceExpression name="viewNav"/>
													</target>
													<parameters>
														<primitiveExpression value="//c:dataField"/>
														<propertyReferenceExpression name="Resolver">
															<propertyReferenceExpression name="Config"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<whileStatement>
											<test>
												<methodInvokeExpression methodName="MoveNext">
													<target>
														<variableReferenceExpression name="dataFieldIterator"/>
													</target>
												</methodInvokeExpression>
											</test>
											<statements>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="IsTagged">
															<parameters>
																<propertyReferenceExpression name="Current">
																	<variableReferenceExpression name="dataFieldIterator"/>
																</propertyReferenceExpression>
																<primitiveExpression value="rest-api-none"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<fieldReferenceExpression name="excludedFields"/>
																</target>
																<indices>
																	<methodInvokeExpression methodName="GetAttribute">
																		<target>
																			<propertyReferenceExpression name="Current">
																				<variableReferenceExpression name="dataFieldIterator"/>
																			</propertyReferenceExpression>
																		</target>
																		<parameters>
																			<primitiveExpression value="fieldName"/>
																			<stringEmptyExpression/>
																		</parameters>
																	</methodInvokeExpression>
																</indices>
															</arrayIndexerExpression>
															<methodInvokeExpression methodName="Clone">
																<target>
																	<propertyReferenceExpression name="Current">
																		<variableReferenceExpression name="dataFieldIterator"/>
																	</propertyReferenceExpression>
																</target>
															</methodInvokeExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</whileStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="isExactMatch"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method IsSameResource(string, string) -->
						<memberMethod returnType="System.Boolean" name="IsSameResource">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="r1"/>
								<parameter type="System.String" name="r2"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Equals">
										<target>
											<methodInvokeExpression methodName="Replace">
												<target>
													<methodInvokeExpression methodName="Replace">
														<target>
															<argumentReferenceExpression name="r1"/>
														</target>
														<parameters>
															<primitiveExpression value="-"/>
															<stringEmptyExpression/>
														</parameters>
													</methodInvokeExpression>
												</target>
												<parameters>
													<primitiveExpression value="_"/>
													<stringEmptyExpression/>
												</parameters>
											</methodInvokeExpression>
										</target>
										<parameters>
											<methodInvokeExpression methodName="Replace">
												<target>
													<methodInvokeExpression methodName="Replace">
														<target>
															<argumentReferenceExpression name="r2"/>
														</target>
														<parameters>
															<primitiveExpression value="-"/>
															<stringEmptyExpression/>
														</parameters>
													</methodInvokeExpression>
												</target>
												<parameters>
													<primitiveExpression value="_"/>
													<stringEmptyExpression/>
												</parameters>
											</methodInvokeExpression>
											<propertyReferenceExpression name="CurrentCultureIgnoreCase">
												<typeReferenceExpression type="StringComparison"/>
											</propertyReferenceExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method IsTagged(XPathNavigator, string) -->
						<memberMethod returnType="System.Boolean" name="IsTagged">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="XPathNavigator" name="node"/>
								<parameter type="System.String" name="tag"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="tagAttribute">
									<init>
										<primitiveExpression value="tags"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="Name">
												<argumentReferenceExpression name="node"/>
											</propertyReferenceExpression>
											<primitiveExpression value="dataField"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="tagAttribute"/>
											<primitiveExpression value="tag"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="tags">
									<init>
										<methodInvokeExpression methodName="GetAttribute">
											<target>
												<argumentReferenceExpression name="node"/>
											</target>
											<parameters>
												<variableReferenceExpression name="tagAttribute"/>
												<stringEmptyExpression/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<variableReferenceExpression name="tags"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="tagList">
											<init>
												<methodInvokeExpression methodName="Split">
													<target>
														<typeReferenceExpression type="Regex"/>
													</target>
													<parameters>
														<variableReferenceExpression name="tags"/>
														<primitiveExpression value="\s+"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<methodReturnStatement>
											<binaryOperatorExpression operator="GreaterThanOrEqual">
												<methodInvokeExpression methodName="IndexOf">
													<target>
														<typeReferenceExpression type="Array"/>
													</target>
													<parameters>
														<variableReferenceExpression name="tagList"/>
														<argumentReferenceExpression name="tag"/>
													</parameters>
												</methodInvokeExpression>
												<primitiveExpression value="0"/>
											</binaryOperatorExpression>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<primitiveExpression value="false"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ToFilter(JObject) -->
						<memberMethod returnType="System.String[]" name="ToFilter">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="filter">
									<init>
										<arrayIndexerExpression>
											<target>
												<argumentReferenceExpression name="args"/>
											</target>
											<indices>
												<primitiveExpression value="filter"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="filter"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<arrayIndexerExpression>
														<target>
															<argumentReferenceExpression name="args"/>
														</target>
														<indices>
															<primitiveExpression value="controller"/>
														</indices>
													</arrayIndexerExpression>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="filter"/>
													<argumentReferenceExpression name="args"/>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<methodReturnStatement>
													<primitiveExpression value="null"/>
												</methodReturnStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="result">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<methodInvokeExpression methodName="ToFilter">
									<parameters>
										<variableReferenceExpression name="filter"/>
										<variableReferenceExpression name="result"/>
									</parameters>
								</methodInvokeExpression>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ToArray">
										<target>
											<variableReferenceExpression name="result"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ToFilter(JToken, List<string>) -->
						<memberMethod name="ToFilter">
							<attributes family="true"/>
							<parameters>
								<parameter type="JToken" name="filter"/>
								<parameter type="List" name="result">
									<typeArguments>
										<typeReference type="System.String"/>
									</typeArguments>
								</parameter>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<binaryOperatorExpression operator="IsTypeOf">
												<argumentReferenceExpression name="filter"/>
												<typeReferenceExpression type="JArray"/>
											</binaryOperatorExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<argumentReferenceExpression name="filter"/>
											<objectCreateExpression type="JArray">
												<parameters>
													<argumentReferenceExpression name="filter"/>
												</parameters>
											</objectCreateExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<foreachStatement>
									<variable name="fd"/>
									<target>
										<argumentReferenceExpression name="filter"/>
									</target>
									<statements>
										<variableDeclarationStatement type="JObject" name="filterDef" var="false"/>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IsTypeOf">
													<variableReferenceExpression name="fd"/>
													<typeReferenceExpression type="JObject"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="filterDef"/>
													<castExpression targetType="JObject">
														<variableReferenceExpression name="fd"/>
													</castExpression>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<variableReferenceExpression name="filterDef"/>
													<objectCreateExpression type="JObject">
														<parameters>
															<objectCreateExpression type="JProperty">
																<parameters>
																	<primitiveExpression value="filter"/>
																	<methodInvokeExpression methodName="ToString">
																		<target>
																			<variableReferenceExpression name="fd"/>
																		</target>
																	</methodInvokeExpression>
																</parameters>
															</objectCreateExpression>
														</parameters>
													</objectCreateExpression>
												</assignStatement>
											</falseStatements>
										</conditionStatement>
										<variableDeclarationStatement name="hasMatchGroup">
											<init>
												<primitiveExpression value="false"/>
											</init>
										</variableDeclarationStatement>
										<foreachStatement>
											<variable name="matchGroupName"/>
											<target>
												<arrayCreateExpression>
													<createType type="System.String"/>
													<initializers>
														<primitiveExpression value="_match_:$All$"/>
														<primitiveExpression value="_match_:$Any$"/>
														<primitiveExpression value="_doNotMatch_:$All$"/>
														<primitiveExpression value="_doNotMatch$Any$"/>
													</initializers>
												</arrayCreateExpression>
											</target>
											<statements>
												<variableDeclarationStatement name="groupInfo">
													<init>
														<methodInvokeExpression methodName="Match">
															<target>
																<typeReferenceExpression type="Regex"/>
															</target>
															<parameters>
																<variableReferenceExpression name="matchGroupName"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[_(match|doNotMatch)_\:(\$(All|Any)\$)]]></xsl:attribute>
																</primitiveExpression>
																<propertyReferenceExpression name="IgnoreCase">
																	<typeReferenceExpression type="RegexOptions"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<propertyReferenceExpression name="Success">
															<variableReferenceExpression name="groupInfo"/>
														</propertyReferenceExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="matchGroup">
															<init>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="filterDef"/>
																	</target>
																	<indices>
																		<binaryOperatorExpression operator="Add">
																			<propertyReferenceExpression name="Value">
																				<arrayIndexerExpression>
																					<target>
																						<propertyReferenceExpression name="Groups">
																							<variableReferenceExpression name="groupInfo"/>
																						</propertyReferenceExpression>
																					</target>
																					<indices>
																						<primitiveExpression value="1"/>
																					</indices>
																				</arrayIndexerExpression>
																			</propertyReferenceExpression>
																			<propertyReferenceExpression name="Value">
																				<arrayIndexerExpression>
																					<target>
																						<propertyReferenceExpression name="Groups">
																							<variableReferenceExpression name="groupInfo"/>
																						</propertyReferenceExpression>
																					</target>
																					<indices>
																						<primitiveExpression value="3"/>
																					</indices>
																				</arrayIndexerExpression>
																			</propertyReferenceExpression>
																		</binaryOperatorExpression>
																	</indices>
																</arrayIndexerExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<variableReferenceExpression name="matchGroup"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="hasMatchGroup"/>
																	<primitiveExpression value="true"/>
																</assignStatement>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<argumentReferenceExpression name="result"/>
																	</target>
																	<parameters>
																		<methodInvokeExpression methodName="ToLower">
																			<target>
																				<variableReferenceExpression name="matchGroupName"/>
																			</target>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
																<methodInvokeExpression methodName="ToFilter">
																	<parameters>
																		<variableReferenceExpression name="matchGroup"/>
																		<argumentReferenceExpression name="result"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>

											</statements>
										</foreachStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="Not">
													<variableReferenceExpression name="hasMatchGroup"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="field">
													<init>
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="filterDef"/>
															</target>
															<indices>
																<primitiveExpression value="field"/>
															</indices>
														</arrayIndexerExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="IdentityInequality">
																<variableReferenceExpression name="field"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="IsTypeOf">
																<variableReferenceExpression name="field"/>
																<typeReferenceExpression type="JValue"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<comment>{ "field": "Country", "value": "France }</comment>
														<comment>{ "field": "Country", "op": "equals", "value": "France }</comment>
														<comment>{ "field": "Country", "op": "notEmpty" }</comment>
														<comment>{ "field": "UnitPrice", "op": "between", "value": [1,30] }</comment>
														<variableDeclarationStatement name="fieldName">
															<init>
																<methodInvokeExpression methodName="ToString">
																	<target>
																		<variableReferenceExpression name="field"/>
																	</target>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement type="JProperty" name="op" var="false">
															<init>
																<primitiveExpression value="null"/>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement type="JProperty" name="v" var="false">
															<init>
																<primitiveExpression value="null"/>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement type="JProperty" name="url" var="false">
															<init>
																<primitiveExpression value="null"/>
															</init>
														</variableDeclarationStatement>
														<foreachStatement>
															<variable type="JProperty" name="prop" var="false"/>
															<target>
																<methodInvokeExpression methodName="Properties">
																	<target>
																		<variableReferenceExpression name="filterDef"/>
																	</target>
																</methodInvokeExpression>
															</target>
															<statements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<propertyReferenceExpression name="Name">
																				<variableReferenceExpression name="prop"/>
																			</propertyReferenceExpression>
																			<primitiveExpression value="op"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="op"/>
																			<variableReferenceExpression name="prop"/>
																		</assignStatement>
																	</trueStatements>
																	<falseStatements>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="ValueEquality">
																					<propertyReferenceExpression name="Name">
																						<variableReferenceExpression name="prop"/>
																					</propertyReferenceExpression>
																					<primitiveExpression value="value"/>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<variableReferenceExpression name="v"/>
																					<variableReferenceExpression name="prop"/>
																				</assignStatement>
																			</trueStatements>
																			<falseStatements>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="ValueEquality">
																							<propertyReferenceExpression name="Name">
																								<variableReferenceExpression name="prop"/>
																							</propertyReferenceExpression>
																							<primitiveExpression value="_url"/>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<assignStatement>
																							<variableReferenceExpression name="url"/>
																							<variableReferenceExpression name="prop"/>
																						</assignStatement>
																					</trueStatements>
																					<falseStatements>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="ValueInequality">
																									<propertyReferenceExpression name="Name">
																										<variableReferenceExpression name="prop"/>
																									</propertyReferenceExpression>
																									<primitiveExpression value="field"/>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<methodInvokeExpression methodName="ThrowError">
																									<target>
																										<typeReferenceExpression type="RESTfulResource"/>
																									</target>
																									<parameters>
																										<primitiveExpression value="invalid_filter"/>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[Unexpected property '{0}' in the '{1}' field filter.]]></xsl:attribute>
																										</primitiveExpression>
																										<propertyReferenceExpression name="Name">
																											<variableReferenceExpression name="prop"/>
																										</propertyReferenceExpression>
																										<variableReferenceExpression name="fieldName"/>
																									</parameters>
																								</methodInvokeExpression>
																							</trueStatements>
																						</conditionStatement>
																					</falseStatements>
																				</conditionStatement>
																			</falseStatements>
																		</conditionStatement>
																	</falseStatements>
																</conditionStatement>
															</statements>
														</foreachStatement>
														<methodInvokeExpression methodName="Remove">
															<target>
																<variableReferenceExpression name="filterDef"/>
															</target>
															<parameters>
																<primitiveExpression value="field"/>
															</parameters>
														</methodInvokeExpression>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityEquality">
																	<variableReferenceExpression name="op"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="invalid_filter"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Missing property 'op' in the '{0}' field filter.]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="fieldName"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
															<falseStatements>
																<methodInvokeExpression methodName="Remove">
																	<target>
																		<variableReferenceExpression name="filterDef"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="op"/>
																	</parameters>
																</methodInvokeExpression>
															</falseStatements>
														</conditionStatement>
														<variableDeclarationStatement name="newFilterDef">
															<init>
																<objectCreateExpression type="JObject"/>
															</init>
														</variableDeclarationStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="filterDef"/>
															</target>
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<variableReferenceExpression name="fieldName"/>
																		<variableReferenceExpression name="newFilterDef"/>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
														<variableDeclarationStatement type="JToken" name="newValueDef" var="false">
															<init>
																<objectCreateExpression type="JObject"/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<variableReferenceExpression name="v"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="newValueDef"/>
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="v"/>
																	</propertyReferenceExpression>
																</assignStatement>
																<methodInvokeExpression methodName="Remove">
																	<target>
																		<variableReferenceExpression name="filterDef"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="value"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="newFilterDef"/>
															</target>
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<methodInvokeExpression methodName="ToString">
																			<target>
																				<propertyReferenceExpression name="Value">
																					<variableReferenceExpression name="op"/>
																				</propertyReferenceExpression>
																			</target>
																		</methodInvokeExpression>
																		<variableReferenceExpression name="newValueDef"/>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<variableReferenceExpression name="url"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="Remove">
																	<target>
																		<variableReferenceExpression name="filterDef"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="_url"/>
																	</parameters>
																</methodInvokeExpression>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="newFilterDef"/>
																	</target>
																	<parameters>
																		<objectCreateExpression type="JProperty">
																			<parameters>
																				<primitiveExpression value="_url"/>
																				<primitiveExpression value="true"/>
																			</parameters>
																		</objectCreateExpression>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
												<comment>Parse the canonical field filter in one of the folowing formats.</comment>
												<comment>{</comment>
												<comment>  "Country": {</comment>
												<comment>      "equals": "France"</comment>
												<comment>}</comment>
												<comment></comment>
												<comment>{</comment>
												<comment>  "Country": {</comment>
												<comment>      "notEmpty": {}</comment>
												<comment>  }</comment>
												<comment>}</comment>
												<comment></comment>
												<comment>{</comment>
												<comment>  "UnitPrice": {</comment>
												<comment>      "between": [10, 30]</comment>
												<comment>  }</comment>
												<comment>}</comment>
												<foreachStatement>
													<variable type="JProperty" name="filterField" var="false"/>
													<target>
														<methodInvokeExpression methodName="Properties">
															<target>
																<variableReferenceExpression name="filterDef"/>
															</target>
														</methodInvokeExpression>
													</target>
													<statements>
														<variableDeclarationStatement name="fieldName">
															<init>
																<propertyReferenceExpression name="Name">
																	<variableReferenceExpression name="filterField"/>
																</propertyReferenceExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement type="XPathNavigator" name="fieldDef" var="false">
															<init>
																<primitiveExpression value="null"/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="Not">
																	<methodInvokeExpression methodName="TryGetValue">
																		<target>
																			<fieldReferenceExpression name="fieldMap"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="fieldName"/>
																			<directionExpression direction="Out">
																				<variableReferenceExpression name="fieldDef"/>
																			</directionExpression>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="400"/>
																		<primitiveExpression value="true"/>
																		<primitiveExpression value="invalid_filter"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Unexpected field '{0}' is specified in the filter.]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="fieldName"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<variableDeclarationStatement type="JProperty" name="filterOp" var="false">
															<init>
																<primitiveExpression value="null"/>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="valueIsShortcut">
															<init>
																<binaryOperatorExpression operator="BooleanOr">
																	<binaryOperatorExpression operator="IsTypeOf">
																		<propertyReferenceExpression name="Value">
																			<variableReferenceExpression name="filterField"/>
																		</propertyReferenceExpression>
																		<typeReferenceExpression type="JArray"/>
																	</binaryOperatorExpression>
																	<binaryOperatorExpression operator="IsTypeOf">
																		<propertyReferenceExpression name="Value">
																			<variableReferenceExpression name="filterField"/>
																		</propertyReferenceExpression>
																		<typeReferenceExpression type="JValue"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="Not">
																	<variableReferenceExpression name="valueIsShortcut"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<foreachStatement>
																	<variable type="JProperty" name="prop" var="false"/>
																	<target>
																		<propertyReferenceExpression name="Value">
																			<variableReferenceExpression name="filterField"/>
																		</propertyReferenceExpression>
																	</target>
																	<statements>
																		<conditionStatement>
																			<condition>
																				<methodInvokeExpression methodName="ContainsKey">
																					<target>
																						<propertyReferenceExpression name="Operations"/>
																					</target>
																					<parameters>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="prop"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</condition>
																			<trueStatements>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="IdentityEquality">
																							<variableReferenceExpression name="filterOp"/>
																							<primitiveExpression value="null"/>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<assignStatement>
																							<variableReferenceExpression name="filterOp"/>
																							<variableReferenceExpression name="prop"/>
																						</assignStatement>
																					</trueStatements>
																					<falseStatements>
																						<methodInvokeExpression methodName="ThrowError">
																							<target>
																								<typeReferenceExpression type="RESTfulResource"/>
																							</target>
																							<parameters>
																								<primitiveExpression value="invalid_filter"/>
																								<primitiveExpression>
																									<xsl:attribute name="value"><![CDATA[Redundant operation '{0}' is specifed in the '{1}' field filter.]]></xsl:attribute>
																								</primitiveExpression>
																								<propertyReferenceExpression name="Name">
																									<variableReferenceExpression name="prop"/>
																								</propertyReferenceExpression>
																								<variableReferenceExpression name="fieldName"/>
																							</parameters>
																						</methodInvokeExpression>
																					</falseStatements>
																				</conditionStatement>
																			</trueStatements>
																			<falseStatements>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="ValueInequality">
																							<propertyReferenceExpression name="Name">
																								<variableReferenceExpression name="prop"/>
																							</propertyReferenceExpression>
																							<primitiveExpression value="_url"/>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<methodInvokeExpression methodName="ThrowError">
																							<target>
																								<typeReferenceExpression type="RESTfulResource"/>
																							</target>
																							<parameters>
																								<primitiveExpression value="invalid_filter"/>
																								<primitiveExpression>
																									<xsl:attribute name="value"><![CDATA[Unexpected operation '{0}' is specifed in the '{1}' field filter.]]></xsl:attribute>
																								</primitiveExpression>
																								<propertyReferenceExpression name="Name">
																									<variableReferenceExpression name="prop"/>
																								</propertyReferenceExpression>
																								<variableReferenceExpression name="fieldName"/>
																							</parameters>
																						</methodInvokeExpression>
																					</trueStatements>
																				</conditionStatement>
																			</falseStatements>
																		</conditionStatement>
																	</statements>
																</foreachStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityEquality">
																	<variableReferenceExpression name="filterOp"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<variableReferenceExpression name="valueIsShortcut"/>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="filterOp"/>
																			<objectCreateExpression type="JProperty">
																				<parameters>
																					<primitiveExpression value="equals"/>
																					<propertyReferenceExpression name="Value">
																						<variableReferenceExpression name="filterField"/>
																					</propertyReferenceExpression>
																				</parameters>
																			</objectCreateExpression>
																		</assignStatement>
																		<assignStatement>
																			<propertyReferenceExpression name="Value">
																				<variableReferenceExpression name="filterField"/>
																			</propertyReferenceExpression>
																			<objectCreateExpression type="JObject">
																				<parameters>
																					<variableReferenceExpression name="filterOp"/>
																				</parameters>
																			</objectCreateExpression>
																		</assignStatement>
																	</trueStatements>
																	<falseStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="invalid_filter"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Operation is not specifed in the '{0}' field filter.]]></xsl:attribute>
																				</primitiveExpression>
																				<variableReferenceExpression name="fieldName"/>
																			</parameters>
																		</methodInvokeExpression>
																	</falseStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<variableDeclarationStatement name="valueArray">
															<init>
																<arrayCreateExpression>
																	<createType type="System.Object"/>
																</arrayCreateExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="op">
															<init>
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="Operations"/>
																	</target>
																	<indices>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="filterOp"/>
																		</propertyReferenceExpression>
																	</indices>
																</arrayIndexerExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement type="System.Object" name="rawValue" var="false">
															<init>
																<propertyReferenceExpression name="Value">
																	<variableReferenceExpression name="filterOp"/>
																</propertyReferenceExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IsTypeOf">
																	<variableReferenceExpression name="rawValue"/>
																	<typeReferenceExpression type="JValue"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<propertyReferenceExpression name="Type">
																				<castExpression targetType="JValue">
																					<variableReferenceExpression name="rawValue"/>
																				</castExpression>
																			</propertyReferenceExpression>
																			<propertyReferenceExpression name="Boolean">
																				<typeReferenceExpression type="JTokenType"/>
																			</propertyReferenceExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<conditionStatement>
																			<condition>
																				<convertExpression to="Boolean">
																					<variableReferenceExpression name="rawValue"/>
																				</convertExpression>
																			</condition>
																			<trueStatements>
																				<conditionStatement>
																					<condition>
																						<unaryOperatorExpression operator="IsNullOrEmpty">
																							<propertyReferenceExpression name="NegativeOp">
																								<variableReferenceExpression name="op"/>
																							</propertyReferenceExpression>
																						</unaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<methodInvokeExpression methodName="ThrowError">
																							<target>
																								<typeReferenceExpression type="RESTfulResource"/>
																							</target>
																							<parameters>
																								<primitiveExpression value="invalid_filter"/>
																								<primitiveExpression>
																									<xsl:attribute name="value"><![CDATA[Operation '{0}' is specifed in the '{1}' field filter does not have a negative counterpart.]]></xsl:attribute>
																								</primitiveExpression>
																								<propertyReferenceExpression name="Name">
																									<variableReferenceExpression name="filterOp"/>
																								</propertyReferenceExpression>
																								<variableReferenceExpression name="fieldName"/>
																							</parameters>
																						</methodInvokeExpression>
																					</trueStatements>
																				</conditionStatement>
																				<assignStatement>
																					<variableReferenceExpression name="op"/>
																					<arrayIndexerExpression>
																						<target>
																							<propertyReferenceExpression name="Operations"/>
																						</target>
																						<indices>
																							<propertyReferenceExpression name="NegativeOp">
																								<variableReferenceExpression name="op"/>
																							</propertyReferenceExpression>
																						</indices>
																					</arrayIndexerExpression>
																				</assignStatement>
																			</trueStatements>
																		</conditionStatement>
																	</trueStatements>
																	<falseStatements>
																		<conditionStatement>
																			<condition>
																				<convertExpression to="Boolean">
																					<arrayIndexerExpression>
																						<target>
																							<propertyReferenceExpression name="Value">
																								<variableReferenceExpression name="filterField"/>
																							</propertyReferenceExpression>
																						</target>
																						<indices>
																							<primitiveExpression value="_url"/>
																						</indices>
																					</arrayIndexerExpression>
																				</convertExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<variableReferenceExpression name="rawValue"/>
																					<objectCreateExpression type="JArray">
																						<parameters>
																							<methodInvokeExpression methodName="Split">
																								<target>
																									<typeReferenceExpression type="Regex"/>
																								</target>
																								<parameters>
																									<convertExpression to="String">
																										<variableReferenceExpression name="rawValue"/>
																									</convertExpression>
																									<primitiveExpression>
																										<xsl:attribute name="value"><![CDATA[\s*,\s*]]></xsl:attribute>
																									</primitiveExpression>
																								</parameters>
																							</methodInvokeExpression>
																						</parameters>
																					</objectCreateExpression>
																				</assignStatement>
																			</trueStatements>
																			<falseStatements>
																				<assignStatement>
																					<variableReferenceExpression name="rawValue"/>
																					<objectCreateExpression type="JArray">
																						<parameters>
																							<variableReferenceExpression name="rawValue"/>
																						</parameters>
																					</objectCreateExpression>
																				</assignStatement>
																			</falseStatements>
																		</conditionStatement>
																	</falseStatements>
																</conditionStatement>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="IsTypeOf">
																				<variableReferenceExpression name="rawValue"/>
																				<typeReferenceExpression type="JArray"/>
																			</binaryOperatorExpression>
																			<unaryOperatorExpression operator="IsNotNullOrEmpty">
																				<propertyReferenceExpression name="ArrayOp">
																					<variableReferenceExpression name="op"/>
																				</propertyReferenceExpression>
																			</unaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="op"/>
																			<arrayIndexerExpression>
																				<target>
																					<propertyReferenceExpression name="Operations"/>
																				</target>
																				<indices>
																					<propertyReferenceExpression name="ArrayOp">
																						<variableReferenceExpression name="op"/>
																					</propertyReferenceExpression>
																				</indices>
																			</arrayIndexerExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
															</falseStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IsTypeOf">
																	<variableReferenceExpression name="rawValue"/>
																	<typeReferenceExpression type="JArray"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="valueArray"/>
																	<methodInvokeExpression methodName="ToObject">
																		<typeArguments>
																			<typeReference type="System.Object[]"/>
																		</typeArguments>
																		<target>
																			<castExpression targetType="JArray">
																				<variableReferenceExpression name="rawValue"/>
																			</castExpression>
																		</target>
																	</methodInvokeExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="LessThan">
																	<propertyReferenceExpression name="Length">
																		<variableReferenceExpression name="valueArray"/>
																	</propertyReferenceExpression>
																	<propertyReferenceExpression name="MinValCount">
																		<variableReferenceExpression name="op"/>
																	</propertyReferenceExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<propertyReferenceExpression name="MinValCount">
																				<variableReferenceExpression name="op"/>
																			</propertyReferenceExpression>
																			<primitiveExpression value="1"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="invalid_filter"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Operation '{0}' specifed in the '{1}' field filter requires at least 1 argument.]]></xsl:attribute>
																				</primitiveExpression>
																				<propertyReferenceExpression name="Name">
																					<variableReferenceExpression name="filterOp"/>
																				</propertyReferenceExpression>
																				<variableReferenceExpression name="fieldName"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																	<falseStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="invalid_filter"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Operation '{0}' specifed in the '{1}' field filter requires at least {2} arguments.]]></xsl:attribute>
																				</primitiveExpression>
																				<propertyReferenceExpression name="Name">
																					<variableReferenceExpression name="filterOp"/>
																				</propertyReferenceExpression>
																				<variableReferenceExpression name="fieldName"/>
																				<propertyReferenceExpression name="MinValCount">
																					<variableReferenceExpression name="op"/>
																				</propertyReferenceExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</falseStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<binaryOperatorExpression operator="ValueEquality">
																		<propertyReferenceExpression name="MaxValCount">
																			<variableReferenceExpression name="op"/>
																		</propertyReferenceExpression>
																		<primitiveExpression value="0"/>
																	</binaryOperatorExpression>
																	<binaryOperatorExpression operator="GreaterThan">
																		<propertyReferenceExpression name="Length">
																			<variableReferenceExpression name="valueArray"/>
																		</propertyReferenceExpression>
																		<primitiveExpression value="0"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="invalid_filter"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Operation '{0}' specifed in the '{1}' field filter cannot have arguments.]]></xsl:attribute>
																		</primitiveExpression>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="filterOp"/>
																		</propertyReferenceExpression>
																		<variableReferenceExpression name="fieldName"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="GreaterThan">
																	<propertyReferenceExpression name="Length">
																		<variableReferenceExpression name="valueArray"/>
																	</propertyReferenceExpression>
																	<propertyReferenceExpression name="MaxValCount">
																		<variableReferenceExpression name="op"/>
																	</propertyReferenceExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<propertyReferenceExpression name="MaxValCount">
																				<variableReferenceExpression name="op"/>
																			</propertyReferenceExpression>
																			<primitiveExpression value="1"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="invalid_filter"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Operation '{0}' specifed in the '{1}' field filter cannot have more than 1 argument.]]></xsl:attribute>
																				</primitiveExpression>
																				<propertyReferenceExpression name="Name">
																					<variableReferenceExpression name="filterOp"/>
																				</propertyReferenceExpression>
																				<variableReferenceExpression name="fieldName"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																	<falseStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="invalid_filter"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Operation '{0}' specifed in the '{1}' field filter cannot have more than {2} arguments.]]></xsl:attribute>
																				</primitiveExpression>
																				<propertyReferenceExpression name="Name">
																					<variableReferenceExpression name="filterOp"/>
																				</propertyReferenceExpression>
																				<variableReferenceExpression name="fieldName"/>
																				<propertyReferenceExpression name="MaxValCount">
																					<variableReferenceExpression name="op"/>
																				</propertyReferenceExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</falseStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<variableDeclarationStatement name="fieldDataType">
															<init>
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<variableReferenceExpression name="fieldDef"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="type"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="Not">
																	<methodInvokeExpression methodName="IsOperationCompatibleWithType">
																		<parameters>
																			<propertyReferenceExpression name="Op">
																				<variableReferenceExpression name="op"/>
																			</propertyReferenceExpression>
																			<variableReferenceExpression name="fieldDataType"/>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="invalid_filter"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Operation '{0}' specifed in the '{1}' field filter is not compatible with the data type {2}.]]></xsl:attribute>
																		</primitiveExpression>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="filterOp"/>
																		</propertyReferenceExpression>
																		<variableReferenceExpression name="fieldName"/>
																		<variableReferenceExpression name="fieldDataType"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<variableDeclarationStatement name="filterBuilder">
															<init>
																<objectCreateExpression type="StringBuilder"/>
															</init>
														</variableDeclarationStatement>
														<methodInvokeExpression methodName="Append">
															<target>
																<variableReferenceExpression name="filterBuilder"/>
															</target>
															<parameters>
																<variableReferenceExpression name="fieldName"/>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="Append">
															<target>
																<variableReferenceExpression name="filterBuilder"/>
															</target>
															<parameters>
																<primitiveExpression value=":"/>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="Append">
															<target>
																<variableReferenceExpression name="filterBuilder"/>
															</target>
															<parameters>
																<propertyReferenceExpression name="Op">
																	<variableReferenceExpression name="op"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="StartsWith">
																	<target>
																		<propertyReferenceExpression name="Op">
																			<variableReferenceExpression name="op"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="$"/>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="Append">
																	<target>
																		<variableReferenceExpression name="filterBuilder"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="$"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="GreaterThan">
																	<propertyReferenceExpression name="Length">
																		<variableReferenceExpression name="valueArray"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="0"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement name="list">
																	<init>
																		<objectCreateExpression type="List">
																			<typeArguments>
																				<typeReference type="System.String"/>
																			</typeArguments>
																		</objectCreateExpression>
																	</init>
																</variableDeclarationStatement>
																<forStatement>
																	<variable name="i">
																		<init>
																			<primitiveExpression value="0"/>
																		</init>
																	</variable>
																	<test>
																		<binaryOperatorExpression operator="LessThan">
																			<variableReferenceExpression name="i"/>
																			<propertyReferenceExpression name="Length">
																				<variableReferenceExpression name="valueArray"/>
																			</propertyReferenceExpression>
																		</binaryOperatorExpression>
																	</test>
																	<increment>
																		<variableReferenceExpression name="i"/>
																	</increment>
																	<statements>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="GreaterThan">
																					<variableReferenceExpression name="i"/>
																					<primitiveExpression value="0"/>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<methodInvokeExpression methodName="Add">
																					<target>
																						<variableReferenceExpression name="list"/>
																					</target>
																					<parameters>
																						<propertyReferenceExpression name="Join">
																							<variableReferenceExpression name="op"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</trueStatements>
																		</conditionStatement>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="list"/>
																			</target>
																			<parameters>
																				<methodInvokeExpression methodName="ValueToString">
																					<target>
																						<typeReferenceExpression type="DataControllerBase"/>
																					</target>
																					<parameters>
																						<arrayIndexerExpression>
																							<target>
																								<variableReferenceExpression name="valueArray"/>
																							</target>
																							<indices>
																								<variableReferenceExpression name="i"/>
																							</indices>
																						</arrayIndexerExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</statements>
																</forStatement>
																<methodInvokeExpression methodName="Append">
																	<target>
																		<argumentReferenceExpression name="filterBuilder"/>
																	</target>
																	<parameters>
																		<methodInvokeExpression methodName="Join">
																			<target>
																				<typeReferenceExpression type="System.String"/>
																			</target>
																			<parameters>
																				<stringEmptyExpression/>
																				<methodInvokeExpression methodName="ToArray">
																					<target>
																						<variableReferenceExpression name="list"/>
																					</target>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<argumentReferenceExpression name="result"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="ToString">
																	<target>
																		<variableReferenceExpression name="filterBuilder"/>
																	</target>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</statements>
												</foreachStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
							</statements>
						</memberMethod>
						<!-- method IsOperationCompatibleWithType(string, string) -->
						<memberMethod returnType="System.Boolean" name="IsOperationCompatibleWithType">
							<attributes family="true"/>
							<parameters>
								<parameter type="System.String" name="op"/>
								<parameter type="System.String" name="type"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="filterType">
									<init>
										<primitiveExpression value="Number"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="ValueEquality">
												<argumentReferenceExpression name="type"/>
												<primitiveExpression value="Time"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="ValueEquality">
												<argumentReferenceExpression name="type"/>
												<primitiveExpression value="String"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="filterType"/>
											<primitiveExpression value="Text"/>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanOr">
													<binaryOperatorExpression operator="ValueEquality">
														<argumentReferenceExpression name="type"/>
														<primitiveExpression value="Date"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="BooleanOr">
														<binaryOperatorExpression operator="ValueEquality">
															<argumentReferenceExpression name="type"/>
															<primitiveExpression value="DateTime"/>
														</binaryOperatorExpression>
														<binaryOperatorExpression operator="ValueEquality">
															<argumentReferenceExpression name="type"/>
															<primitiveExpression value="DateTimeOffset"/>
														</binaryOperatorExpression>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<argumentReferenceExpression name="filterType"/>
													<primitiveExpression value="Date"/>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<argumentReferenceExpression name="filterType"/>
															<primitiveExpression value="Boolean"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="filterType"/>
															<primitiveExpression value="Boolean"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
									</falseStatements>
								</conditionStatement>
								<methodReturnStatement>
									<binaryOperatorExpression operator="ValueInequality">
										<methodInvokeExpression methodName="IndexOf">
											<target>
												<typeReferenceExpression type="Array"/>
											</target>
											<parameters>
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="OperationTypes"/>
													</target>
													<indices>
														<variableReferenceExpression name="filterType"/>
													</indices>
												</arrayIndexerExpression>
												<argumentReferenceExpression name="op"/>
											</parameters>
										</methodInvokeExpression>
										<primitiveExpression value="-1"/>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method RemoveLinksFrom(JObject) -->
						<memberMethod name="RemoveLinksFrom">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="target"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="doRemove">
									<init>
										<primitiveExpression value="false"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable name="p"/>
									<target>
										<methodInvokeExpression methodName="Properties">
											<target>
												<argumentReferenceExpression name="target"/>
											</target>
										</methodInvokeExpression>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="Name">
														<variableReferenceExpression name="p"/>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="LinksKey"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="doRemove"/>
													<primitiveExpression value="true"/>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="Type">
																<propertyReferenceExpression name="Value">
																	<variableReferenceExpression name="p"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
															<propertyReferenceExpression name="Object">
																<typeReferenceExpression type="JTokenType"/>
															</propertyReferenceExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="RemoveLinksFrom">
															<parameters>
																<castExpression targetType="JObject">
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="p"/>
																	</propertyReferenceExpression>
																</castExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
													<falseStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<propertyReferenceExpression name="Type">
																		<propertyReferenceExpression name="Value">
																			<variableReferenceExpression name="p"/>
																		</propertyReferenceExpression>
																	</propertyReferenceExpression>
																	<propertyReferenceExpression name="Array">
																		<typeReferenceExpression type="JTokenType"/>
																	</propertyReferenceExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<foreachStatement>
																	<variable name="elem"/>
																	<target>
																		<propertyReferenceExpression name="Value">
																			<variableReferenceExpression name="p"/>
																		</propertyReferenceExpression>
																	</target>
																	<statements>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="ValueEquality">
																					<propertyReferenceExpression name="Type">
																						<variableReferenceExpression name="elem"/>
																					</propertyReferenceExpression>
																					<propertyReferenceExpression name="Object">
																						<typeReferenceExpression type="JTokenType"/>
																					</propertyReferenceExpression>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<methodInvokeExpression methodName="RemoveLinksFrom">
																					<parameters>
																						<castExpression targetType="JObject">
																							<variableReferenceExpression name="elem"/>
																						</castExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</trueStatements>
																		</conditionStatement>
																	</statements>
																</foreachStatement>
															</trueStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<conditionStatement>
									<condition>
										<variableReferenceExpression name="doRemove"/>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="Remove">
											<target>
												<argumentReferenceExpression name="target"/>
											</target>
											<parameters>
												<propertyReferenceExpression name="LinksKey"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method Execute(PageRequest, JObject, JObject) -->
						<memberMethod returnType="ViewPage" name="Execute">
							<attributes public="true"/>
							<parameters>
								<parameter type="PageRequest" name="request"/>
								<parameter type="JObject" name="payload"/>
								<parameter type="JObject" name="result"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="HttpMethod"/>
											<primitiveExpression value="PATCH"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="IsCollection"/>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="405"/>
														<primitiveExpression value="invalid_method"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Collection cannot be patched.]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="Execute">
											<parameters>
												<argumentReferenceExpression name="request"/>
												<argumentReferenceExpression name="payload"/>
												<primitiveExpression value="Update"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="HttpMethod"/>
											<primitiveExpression value="PUT"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="IsCollection"/>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="405"/>
														<primitiveExpression value="invalid_method"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Collection cannot be replaced.]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="Execute">
											<parameters>
												<argumentReferenceExpression name="request"/>
												<argumentReferenceExpression name="payload"/>
												<primitiveExpression value="Update"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="ValueEquality">
												<propertyReferenceExpression name="HttpMethod"/>
												<primitiveExpression value="POST"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="BooleanAnd">
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="HttpMethod"/>
													<primitiveExpression value="GET"/>
												</binaryOperatorExpression>
												<propertyReferenceExpression name="IsReport"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<propertyReferenceExpression name="Action"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<propertyReferenceExpression name="IsSingleton"/>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="405"/>
																<primitiveExpression value="invalid_method"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Collection resource is expected for {0} method.]]></xsl:attribute>
																</primitiveExpression>
																<propertyReferenceExpression name="HttpMethod"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<methodInvokeExpression methodName="Execute">
													<parameters>
														<argumentReferenceExpression name="request"/>
														<argumentReferenceExpression name="payload"/>
														<primitiveExpression value="Insert"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
											<falseStatements>
												<methodInvokeExpression methodName="Execute">
													<parameters>
														<argumentReferenceExpression name="request"/>
														<argumentReferenceExpression name="payload"/>
														<methodInvokeExpression methodName="GetAttribute">
															<target>
																<propertyReferenceExpression name="Action"/>
															</target>
															<parameters>
																<primitiveExpression value="commandName"/>
																<stringEmptyExpression/>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="GetAttribute">
															<target>
																<propertyReferenceExpression name="Action"/>
															</target>
															<parameters>
																<primitiveExpression value="commandArgument"/>
																<stringEmptyExpression/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<fieldReferenceExpression name="result"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IsTypeOf">
																	<fieldReferenceExpression name="result"/>
																	<typeReferenceExpression type="JArray"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<arrayIndexerExpression>
																		<target>
																			<argumentReferenceExpression name="result"/>
																		</target>
																		<indices>
																			<methodInvokeExpression methodName="ToApiFieldName">
																				<parameters>
																					<primitiveExpression value="collection"/>
																				</parameters>
																			</methodInvokeExpression>
																		</indices>
																	</arrayIndexerExpression>
																	<fieldReferenceExpression name="result"/>
																</assignStatement>
															</trueStatements>
															<falseStatements>
																<assignStatement>
																	<arrayIndexerExpression>
																		<target>
																			<argumentReferenceExpression name="result"/>
																		</target>
																		<indices>
																			<methodInvokeExpression methodName="ToApiName">
																				<parameters>
																					<primitiveExpression value="resultKey"/>
																				</parameters>
																			</methodInvokeExpression>
																		</indices>
																	</arrayIndexerExpression>
																	<fieldReferenceExpression name="result"/>
																</assignStatement>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanOr">
															<propertyReferenceExpression name="IsCollection"/>
															<propertyReferenceExpression name="IsReport"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodReturnStatement>
															<primitiveExpression value="null"/>
														</methodReturnStatement>
													</trueStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="HttpMethod"/>
											<primitiveExpression value="DELETE"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="IsCollection"/>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="405"/>
														<primitiveExpression value="invalid_method"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Collection cannot be deleted.]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<fieldReferenceExpression name="lookupConfig"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="405"/>
														<primitiveExpression value="invalid_method"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[lookup cannot be deleted.]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<propertyReferenceExpression name="PathField"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="XPathNavigator" name="blobField" var="false">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<methodInvokeExpression methodName="TryGetValue">
																<target>
																	<fieldReferenceExpression name="fieldMap"/>
																</target>
																<parameters>
																	<propertyReferenceExpression name="PathField"/>
																	<directionExpression direction="Out">
																		<variableReferenceExpression name="blobField"/>
																	</directionExpression>
																</parameters>
															</methodInvokeExpression>
															<binaryOperatorExpression operator="ValueEquality">
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<variableReferenceExpression name="blobField"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="onDemand"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
																<primitiveExpression value="true" convertTo="String"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="data">
															<init>
																<arrayCreateExpression>
																	<createType type="System.Byte"/>
																</arrayCreateExpression>
															</init>
														</variableDeclarationStatement>
														<methodInvokeExpression methodName="Write">
															<target>
																<typeReferenceExpression type="Blob"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<variableReferenceExpression name="blobField"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="onDemandHandler"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
																<methodInvokeExpression methodName="PrimaryKeyToPath"/>
																<stringEmptyExpression/>
																<stringEmptyExpression/>
																<variableReferenceExpression name="data"/>
															</parameters>
														</methodInvokeExpression>
														<methodReturnStatement>
															<primitiveExpression value="null"/>
														</methodReturnStatement>
													</trueStatements>
												</conditionStatement>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="405"/>
														<primitiveExpression value="invalid_method"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Field value cannot be deleted.]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="Execute">
											<parameters>
												<argumentReferenceExpression name="request"/>
												<argumentReferenceExpression name="payload"/>
												<primitiveExpression value="Delete"/>
											</parameters>
										</methodInvokeExpression>
										<methodReturnStatement>
											<primitiveExpression value="null"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="RequiresSchemaOnly"/>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="null"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetPage">
										<target>
											<methodInvokeExpression methodName="CreateDataController">
												<target>
													<typeReferenceExpression type="ControllerFactory"/>
												</target>
											</methodInvokeExpression>
										</target>s
										<parameters>
											<propertyReferenceExpression name="Controller">
												<argumentReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="View">
												<argumentReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<argumentReferenceExpression name="request"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method Execute(PageRequest, JObject, JObject, string) -->
						<memberMethod name="Execute">
							<attributes public="true"/>
							<parameters>
								<parameter type="PageRequest" name="request"/>
								<parameter type="JObject" name="payload"/>
								<parameter type="System.String" name="commandName"/>
							</parameters>
							<statements>
								<methodInvokeExpression methodName="Execute">
									<parameters>
										<argumentReferenceExpression name="request"/>
										<argumentReferenceExpression name="payload"/>
										<argumentReferenceExpression name="commandName"/>
										<stringEmptyExpression/>
									</parameters>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method Execute(PageRequest, JObject, JObject, string, string) -->
						<memberMethod name="Execute">
							<attributes public="true"/>
							<parameters>
								<parameter type="PageRequest" name="request"/>
								<parameter type="JObject" name="payload"/>
								<parameter type="System.String" name="commandName"/>
								<parameter type="System.String" name="commandArgument"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="Count">
												<propertyReferenceExpression name="PK"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="ThrowError">
											<target>
												<typeReferenceExpression type="RESTfulResource"/>
											</target>
											<parameters>
												<primitiveExpression value="invalid_path"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[A resource with an identifier is expected.]]></xsl:attribute>
												</primitiveExpression>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<methodInvokeExpression methodName="FindAction">
												<parameters>
													<argumentReferenceExpression name="commandName"/>
												</parameters>
											</methodInvokeExpression>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="ThrowError">
											<target>
												<typeReferenceExpression type="RESTfulResource"/>
											</target>
											<parameters>
												<primitiveExpression value="405"/>
												<primitiveExpression value="true"/>
												<primitiveExpression value="method_rejected"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[Method '{0}' is now allowed for this resource.]]></xsl:attribute>
												</primitiveExpression>
												<propertyReferenceExpression name="HttpMethod"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="RequiresSchemaOnly"/>
									</condition>
									<trueStatements>
										<methodReturnStatement/>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="ViewPage" name="existingViewPage" var="false">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="context">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="HttpContext"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="conflictDetection">
									<init>
										<binaryOperatorExpression operator="BooleanAnd">
											<propertyReferenceExpression name="ConflictDetectionEnabled">
												<propertyReferenceExpression name="Config"/>
											</propertyReferenceExpression>
											<binaryOperatorExpression operator="BooleanAnd">
												<propertyReferenceExpression name="IsSingleton"/>
												<binaryOperatorExpression operator="IdentityEquality">
													<propertyReferenceExpression name="Action"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="ValueEquality">
												<argumentReferenceExpression name="commandName"/>
												<primitiveExpression value="Update"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="BooleanOr">
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="commandName"/>
													<primitiveExpression value="Delete"/>
												</binaryOperatorExpression>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="commandName"/>
													<primitiveExpression value="Custom"/>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="ifMatch">
											<init>
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Headers">
															<propertyReferenceExpression name="Request">
																<variableReferenceExpression name="context"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="If-Match"/>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNullOrEmpty">
													<variableReferenceExpression name="ifMatch"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<variableReferenceExpression name="conflictDetection"/>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="method_rejected"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Set the 'If-Match' header to the value of the 'ETag' header returned with the fetched resource.]]></xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
											<falseStatements>
												<tryStatement>
													<statements>
														<variableDeclarationStatement name="eTag">
															<init>
																<methodInvokeExpression methodName="ToBase64UrlEncoded">
																	<target>
																		<typeReferenceExpression type="TextUtility"/>
																	</target>
																	<parameters>
																		<methodInvokeExpression methodName="GetBytes">
																			<target>
																				<propertyReferenceExpression name="UTF8">
																					<typeReferenceExpression type="Encoding"/>
																				</propertyReferenceExpression>
																			</target>
																			<parameters>
																				<methodInvokeExpression methodName="Hash">
																					<target>
																						<typeReferenceExpression type="TextUtility"/>
																					</target>
																					<parameters>
																						<methodInvokeExpression methodName="Execute">
																							<target>
																								<typeReferenceExpression type="EmbeddingEngine"/>
																							</target>
																							<parameters>
																								<methodInvokeExpression methodName="ExtendRawUrlWith">
																									<parameters>
																										<stringEmptyExpression/>
																									</parameters>
																								</methodInvokeExpression>
																								<primitiveExpression value="null"/>
																							</parameters>
																						</methodInvokeExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueInequality">
																	<variableReferenceExpression name="eTag"/>
																	<variableReferenceExpression name="ifMatch"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="412"/>
																		<primitiveExpression value="method_rejected"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[The entity has been changed since the last fetch. Specify the new 'ETag' value {0} in the 'If-Match' header.]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="eTag"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</statements>
													<catch exceptionType="WebException" localName="ex">
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="412"/>
																<primitiveExpression value="method_rejected"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Unable to compare the 'If-Match' header with the 'ETag' of the {0} entity: {1}.]]></xsl:attribute>
																</primitiveExpression>
																<propertyReferenceExpression name="Location"/>
																<propertyReferenceExpression name="StatusDescription">
																	<castExpression targetType="HttpWebResponse">
																		<propertyReferenceExpression name="Response">
																			<variableReferenceExpression name="ex"/>
																		</propertyReferenceExpression>
																	</castExpression>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</catch>
												</tryStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<variableReferenceExpression name="conflictDetection"/>
											<binaryOperatorExpression operator="BooleanAnd">
												<propertyReferenceExpression name="IsSingleton"/>
												<binaryOperatorExpression operator="BooleanOr">
													<binaryOperatorExpression operator="IdentityInequality">
														<propertyReferenceExpression name="Action"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<convertExpression to="Boolean">
														<methodInvokeExpression methodName="SettingsProperty">
															<target>
																<typeReferenceExpression type="ApplicationServicesBase"/>
															</target>
															<parameters>
																<primitiveExpression value="server.rest.mutations.fetchExistingEntity"/>
																<primitiveExpression value="false"/>
															</parameters>
														</methodInvokeExpression>
													</convertExpression>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="existingViewPage"/>
											<methodInvokeExpression methodName="GetPage">
												<target>
													<methodInvokeExpression methodName="CreateDataController">
														<target>
															<typeReferenceExpression type="ControllerFactory"/>
														</target>
													</methodInvokeExpression>
												</target>
												<parameters>
													<propertyReferenceExpression name="Controller">
														<variableReferenceExpression name="request"/>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="View">
														<variableReferenceExpression name="request"/>
													</propertyReferenceExpression>
													<variableReferenceExpression name="request"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="values">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="FieldValue"/>
											</typeArguments>
											<parameters>
												<propertyReferenceExpression name="PK"/>
											</parameters>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="valuesMap">
									<init>
										<objectCreateExpression type="SortedDictionary">
											<typeArguments>
												<typeReference type="System.String"/>
												<typeReference type="FieldValue"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="defaultValueCount">
									<init>
										<propertyReferenceExpression name="Count">
											<variableReferenceExpression name="values"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="a">
									<init>
										<objectCreateExpression type="ActionArgs"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="Controller">
										<variableReferenceExpression name="a"/>
									</propertyReferenceExpression>
									<propertyReferenceExpression name="Controller">
										<argumentReferenceExpression name="request"/>
									</propertyReferenceExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="View">
										<variableReferenceExpression name="a"/>
									</propertyReferenceExpression>
									<propertyReferenceExpression name="View">
										<argumentReferenceExpression name="request"/>
									</propertyReferenceExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="CommandName">
										<variableReferenceExpression name="a"/>
									</propertyReferenceExpression>
									<argumentReferenceExpression name="commandName"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="CommandArgument">
										<variableReferenceExpression name="a"/>
									</propertyReferenceExpression>
									<argumentReferenceExpression name="commandArgument"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Path">
										<variableReferenceExpression name="a"/>
									</propertyReferenceExpression>
									<propertyReferenceExpression name="PathAction"/>
								</assignStatement>
								<variableDeclarationStatement name="pathFieldName">
									<init>
										<propertyReferenceExpression name="PathField"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="pathFieldNameKey">
									<init>
										<variableReferenceExpression name="pathFieldName"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression  name="pathFieldName"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="XPathNavigator" name="pathFieldNav" var="false">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<fieldReferenceExpression name="fieldMap"/>
											</target>
											<parameters>
												<variableReferenceExpression name="pathFieldName"/>
												<directionExpression direction="Out">
													<variableReferenceExpression name="pathFieldNav"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
										<assignStatement>
											<variableReferenceExpression name="pathFieldName"/>
											<methodInvokeExpression methodName="GetAttribute">
												<target>
													<variableReferenceExpression name="pathFieldNav"/>
												</target>
												<parameters>
													<primitiveExpression value="name"/>
													<stringEmptyExpression/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<variableReferenceExpression name="pathFieldNameKey"/>
											<methodInvokeExpression methodName="ToApiNameTemplate">
												<parameters>
													<primitiveExpression value="valueKey"/>
													<variableReferenceExpression name="pathFieldName"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<variableDeclarationStatement name="fileKeys">
											<init>
												<propertyReferenceExpression name="Keys">
													<propertyReferenceExpression name="Files">
														<propertyReferenceExpression name="Request">
															<variableReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<methodInvokeExpression methodName="GetAttribute">
														<target>
															<variableReferenceExpression name="pathFieldNav"/>
														</target>
														<parameters>
															<primitiveExpression value="onDemand"/>
															<stringEmptyExpression/>
														</parameters>
													</methodInvokeExpression>
													<primitiveExpression value="true" convertTo="String"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="blobPage">
													<init>
														<methodInvokeExpression methodName="GetContext">
															<parameters>
																<methodInvokeExpression methodName="PrimaryKeyToFieldNames"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="LessThan">
															<propertyReferenceExpression name="Count">
																<propertyReferenceExpression name="Rows">
																	<variableReferenceExpression name="blobPage"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
															<primitiveExpression value="1"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="invalid_path"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Resource {0} does not exist.]]></xsl:attribute>
																</primitiveExpression>
																<methodInvokeExpression methodName="TrimLocationToIdentifier"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanOr">
															<binaryOperatorExpression operator="ValueInequality">
																<propertyReferenceExpression name="Count">
																	<variableReferenceExpression name="fileKeys"/>
																</propertyReferenceExpression>
																<primitiveExpression value="1"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="ValueInequality">
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="fileKeys"/>
																	</target>
																	<indices>
																		<primitiveExpression value="0"/>
																	</indices>
																</arrayIndexerExpression>
																<variableReferenceExpression name="pathFieldNameKey"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="403"/>
																<primitiveExpression value="invalid_argument"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Specify the '{0}' file in the 'multipart/form-data' body.]]></xsl:attribute>
																</primitiveExpression>
																<variableReferenceExpression name="pathFieldNameKey"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
											<falseStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityEquality">
															<arrayIndexerExpression>
																<target>
																	<argumentReferenceExpression name="payload"/>
																</target>
																<indices>
																	<variableReferenceExpression name="pathFieldNameKey"/>
																</indices>
															</arrayIndexerExpression>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="403"/>
																<primitiveExpression value="invalid_argument"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Field '{0}' is expected in the body.]]></xsl:attribute>
																</primitiveExpression>
																<variableReferenceExpression name="pathFieldNameKey"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="GreaterThan">
															<propertyReferenceExpression name="Count">
																<variableReferenceExpression name="fileKeys"/>
															</propertyReferenceExpression>
															<primitiveExpression value="0"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="403"/>
																<primitiveExpression value="invalid_argument"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[File '{0}' is not allowed in the body.]]></xsl:attribute>
																</primitiveExpression>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="fileKeys"/>
																	</target>
																	<indices>
																		<primitiveExpression value="0"/>
																	</indices>
																</arrayIndexerExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="errors">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="RESTfulResourceException"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<comment>scan the duplicate field names in the payload: productId, product_id, productid, ProductID</comment>
								<variableDeclarationStatement name="usedKeys">
									<init>
										<objectCreateExpression type="SortedDictionary">
											<typeArguments>
												<typeReference type="System.String"/>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable name="p"/>
									<target>
										<methodInvokeExpression methodName="Properties">
											<target>
												<argumentReferenceExpression name="payload"/>
											</target>
										</methodInvokeExpression>
									</target>
									<statements>
										<tryStatement>
											<statements>
												<variableDeclarationStatement type="XPathNavigator" name="fieldNav" var="false">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="TryGetValue">
															<target>
																<fieldReferenceExpression name="fieldMap"/>
															</target>
															<parameters>
																<propertyReferenceExpression name="Name">
																	<variableReferenceExpression name="p"/>
																</propertyReferenceExpression>
																<directionExpression direction="Out">
																	<variableReferenceExpression name="fieldNav"/>
																</directionExpression>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="fieldName">
															<init>
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<variableReferenceExpression name="fieldNav"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="name"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="firstUseCase">
															<init>
																<stringEmptyExpression/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="TryGetValue">
																	<target>
																		<variableReferenceExpression name="usedKeys"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="fieldName"/>
																		<directionExpression direction="Out">
																			<variableReferenceExpression name="firstUseCase"/>
																		</directionExpression>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="403"/>
																		<primitiveExpression value="invalid_argument"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Field '{0}' specified in the body is the duplicate of '{1}'.]]></xsl:attribute>
																		</primitiveExpression>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="p"/>
																		</propertyReferenceExpression>
																		<variableReferenceExpression name="firstUseCase"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
															<falseStatements>
																<assignStatement>
																	<arrayIndexerExpression>
																		<target>
																			<variableReferenceExpression name="usedKeys"/>
																		</target>
																		<indices>
																			<variableReferenceExpression name="fieldName"/>
																		</indices>
																	</arrayIndexerExpression>
																	<propertyReferenceExpression name="Name">
																		<variableReferenceExpression name="p"/>
																	</propertyReferenceExpression>
																</assignStatement>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
											<catch exceptionType="RESTfulResourceException" localName="ex">
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="errors"/>
													</target>
													<parameters>
														<variableReferenceExpression name="ex"/>
													</parameters>
												</methodInvokeExpression>
											</catch>
										</tryStatement>
									</statements>
								</foreachStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="GreaterThan">
											<propertyReferenceExpression name="Count">
												<variableReferenceExpression name="errors"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<throwExceptionStatement>
											<objectCreateExpression type="RESTfulResourceException">
												<parameters>
													<variableReferenceExpression name="errors"/>
												</parameters>
											</objectCreateExpression>
										</throwExceptionStatement>
									</trueStatements>
								</conditionStatement>
								<comment>Ensure that the filter values are not in conflict with the payload. Applied to the primery key field value and master-detail foreign key fields.</comment>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<fieldReferenceExpression name="masterConfig"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<foreachStatement>
											<variable name="fvo"/>
											<target>
												<propertyReferenceExpression name="Filter"/>
											</target>
											<statements>
												<variableDeclarationStatement name="propName">
													<init>
														<methodInvokeExpression methodName="ToApiFieldName">
															<parameters>
																<propertyReferenceExpression name="Name">
																	<variableReferenceExpression name="fvo"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="propToken">
													<init>
														<arrayIndexerExpression>
															<target>
																<argumentReferenceExpression name="payload"/>
															</target>
															<indices>
																<variableReferenceExpression name="propName"/>
															</indices>
														</arrayIndexerExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="IdentityInequality">
																<variableReferenceExpression name="propToken"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="ValueInequality">
																<convertExpression to="String">
																	<variableReferenceExpression name="propToken"/>
																</convertExpression>
																<convertExpression to="String">
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="fvo"/>
																	</propertyReferenceExpression>
																</convertExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="403"/>
																<primitiveExpression value="invalid_argument"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Value of the '{0}' field specified in the body does not match the master entity in the url.]]></xsl:attribute>
																</primitiveExpression>
																<variableReferenceExpression name="propName"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<comment>resolve the missing field values that do not exist in the filter</comment>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityEquality">
															<variableReferenceExpression name="propToken"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="payload"/>
															</target>
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<variableReferenceExpression name="propName"/>
																		<propertyReferenceExpression name="Value">
																			<variableReferenceExpression name="fvo"/>
																		</propertyReferenceExpression>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<methodInvokeExpression methodName="IndexOf">
																		<target>
																			<propertyReferenceExpression name="PK"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="fvo"/>
																		</parameters>
																	</methodInvokeExpression>
																	<primitiveExpression value="-1"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="defaultValueCount"/>
																	<binaryOperatorExpression operator="Add">
																		<variableReferenceExpression name="defaultValueCount"/>
																		<primitiveExpression value="1"/>
																	</binaryOperatorExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<comment>create default values for Insert command</comment>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<variableReferenceExpression name="commandName"/>
											<primitiveExpression value="Insert"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertyReferenceExpression name="Inserting">
												<argumentReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<primitiveExpression value="true"/>
										</assignStatement>
										<variableDeclarationStatement name="newViewPage">
											<init>
												<methodInvokeExpression methodName="GetPage">
													<target>
														<methodInvokeExpression methodName="CreateDataController">
															<target>
																<typeReferenceExpression type="ControllerFactory"/>
															</target>
														</methodInvokeExpression>
													</target>
													<parameters>
														<propertyReferenceExpression name="Controller">
															<variableReferenceExpression name="request"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="View">
															<argumentReferenceExpression name="request"/>
														</propertyReferenceExpression>
														<argumentReferenceExpression name="request"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<propertyReferenceExpression name="Inserting">
												<argumentReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<primitiveExpression value="false"/>
										</assignStatement>
										<forStatement>
											<variable name="fieldIndex">
												<init>
													<primitiveExpression value="0"/>
												</init>
											</variable>
											<test>
												<binaryOperatorExpression operator="LessThan">
													<variableReferenceExpression name="fieldIndex"/>
													<propertyReferenceExpression name="Length">
														<propertyReferenceExpression name="NewRow">
															<variableReferenceExpression name="newViewPage"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</test>
											<increment>
												<variableReferenceExpression name="fieldIndex"/>
											</increment>
											<statements>
												<variableDeclarationStatement name="v">
													<init>
														<arrayIndexerExpression>
															<target>
																<propertyReferenceExpression name="NewRow">
																	<variableReferenceExpression name="newViewPage"/>
																</propertyReferenceExpression>
															</target>
															<indices>
																<variableReferenceExpression name="fieldIndex"/>
															</indices>
														</arrayIndexerExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<variableReferenceExpression name="v"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="field">
															<init>
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="Fields">
																			<variableReferenceExpression name="newViewPage"/>
																		</propertyReferenceExpression>
																	</target>
																	<indices>
																		<variableReferenceExpression name="fieldIndex"/>
																	</indices>
																</arrayIndexerExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="propName">
															<init>
																<methodInvokeExpression methodName="ToApiFieldName">
																	<parameters>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="field"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="propToken">
															<init>
																<arrayIndexerExpression>
																	<target>
																		<argumentReferenceExpression name="payload"/>
																	</target>
																	<indices>
																		<variableReferenceExpression name="propName"/>
																	</indices>
																</arrayIndexerExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityEquality">
																	<variableReferenceExpression name="propToken"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="SetPropertyValue">
																	<parameters>
																		<argumentReferenceExpression name="payload"/>
																		<variableReferenceExpression name="propName"/>
																		<variableReferenceExpression name="v"/>
																	</parameters>
																</methodInvokeExpression>
																<assignStatement>
																	<variableReferenceExpression name="defaultValueCount"/>
																	<binaryOperatorExpression operator="Add">
																		<variableReferenceExpression name="defaultValueCount"/>
																		<primitiveExpression value="1"/>
																	</binaryOperatorExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</forStatement>
									</trueStatements>
								</conditionStatement>
								<comment>lookup the missing foreign key field values by the "alias" and "copy" fields of the payload</comment>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueInequality">
											<propertyReferenceExpression name="HttpMethod"/>
											<primitiveExpression value="DELETE"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="lookupIterator">
											<init>
												<methodInvokeExpression methodName="Select">
													<target>
														<propertyReferenceExpression name="Config"/>
													</target>
													<parameters>
														<primitiveExpression value="/c:dataController/c:fields/c:field[c:items/@dataController]"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<whileStatement>
											<test>
												<methodInvokeExpression methodName="MoveNext">
													<target>
														<variableReferenceExpression name="lookupIterator"/>
													</target>
												</methodInvokeExpression>
											</test>
											<statements>
												<variableDeclarationStatement name="fieldName">
													<init>
														<methodInvokeExpression methodName="GetAttribute">
															<target>
																<propertyReferenceExpression name="Current">
																	<variableReferenceExpression name="lookupIterator"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<primitiveExpression value="name"/>
																<stringEmptyExpression/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="dataFieldNav">
													<init>
														<methodInvokeExpression methodName="SelectSingleNode">
															<target>
																<propertyReferenceExpression name="Config"/>
															</target>
															<parameters>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[/c:dataController/c:views/c:view[@id='{0}']//c:dataField[@fieldName='{1}']]]></xsl:attribute>
																</primitiveExpression>
																<propertyReferenceExpression name="PathView"/>
																<variableReferenceExpression name="fieldName"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="propName">
													<init>
														<methodInvokeExpression methodName="ToApiFieldName">
															<parameters>
																<variableReferenceExpression name="fieldName"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="XPathNavigator" name="lookupNav" var="false">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="IdentityInequality">
																<variableReferenceExpression name="dataFieldNav"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="IdentityEquality">
																<arrayIndexerExpression>
																	<target>
																		<argumentReferenceExpression name="payload"/>
																	</target>
																	<indices>
																		<variableReferenceExpression name="propName"/>
																	</indices>
																</arrayIndexerExpression>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="TryGetValue">
																	<target>
																		<fieldReferenceExpression name="fieldMap"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="fieldName"/>
																		<directionExpression direction="Out">
																			<variableReferenceExpression name="lookupNav"/>
																		</directionExpression>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement name="aliasFieldName">
																	<init>
																		<methodInvokeExpression methodName="GetAttribute">
																			<target>
																				<variableReferenceExpression name="dataFieldNav"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="aliasFieldName"/>
																				<stringEmptyExpression/>
																			</parameters>
																		</methodInvokeExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="IsNullOrEmpty">
																			<variableReferenceExpression name="aliasFieldName"/>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="aliasFieldName"/>
																			<variableReferenceExpression name="fieldName"/>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
																<variableDeclarationStatement name="aliasNav">
																	<init>
																		<methodInvokeExpression methodName="SelectSingleNode">
																			<target>
																				<propertyReferenceExpression name="Config"/>
																			</target>
																			<parameters>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[/c:dataController/c:fields/c:field[@name='{0}']]]></xsl:attribute>
																				</primitiveExpression>
																				<variableReferenceExpression name="aliasFieldName"/>
																			</parameters>
																		</methodInvokeExpression>
																	</init>
																</variableDeclarationStatement>
																<variableDeclarationStatement name="aliasPropName">
																	<init>
																		<methodInvokeExpression methodName="ToApiFieldName">
																			<parameters>
																				<variableReferenceExpression name="aliasFieldName"/>
																			</parameters>
																		</methodInvokeExpression>
																	</init>
																</variableDeclarationStatement>
																<variableDeclarationStatement name="aliasPropValue">
																	<init>
																		<methodInvokeExpression methodName="GetPropertyValue">
																			<parameters>
																				<argumentReferenceExpression name="payload"/>
																				<variableReferenceExpression name="aliasPropName"/>
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<variableReferenceExpression name="aliasNav"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="type"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityInequality">
																			<variableReferenceExpression name="aliasPropValue"/>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<variableDeclarationStatement name="itemsNav">
																			<init>
																				<methodInvokeExpression methodName="SelectSingleNode">
																					<target>
																						<variableReferenceExpression name="lookupNav"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="c:items"/>
																						<propertyReferenceExpression name="Resolver">
																							<propertyReferenceExpression name="Config"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</init>
																		</variableDeclarationStatement>
																		<variableDeclarationStatement name="lookupController">
																			<init>
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<variableReferenceExpression name="itemsNav"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="dataController"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																			</init>
																		</variableDeclarationStatement>
																		<variableDeclarationStatement name="viewId">
																			<init>
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<variableReferenceExpression name="itemsNav"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="dataView"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																			</init>
																		</variableDeclarationStatement>
																		<variableDeclarationStatement name="dataValueField">
																			<init>
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<variableReferenceExpression name="itemsNav"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="dataValueField"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																			</init>
																		</variableDeclarationStatement>
																		<variableDeclarationStatement name="dataTextField">
																			<init>
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<variableReferenceExpression name="itemsNav"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="dataTextField"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																			</init>
																		</variableDeclarationStatement>
																		<conditionStatement>
																			<condition>
																				<unaryOperatorExpression operator="IsNullOrEmpty">
																					<variableReferenceExpression name="dataTextField"/>
																				</unaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<variableReferenceExpression name="dataTextField"/>
																					<variableReferenceExpression name="dataValueField"/>
																				</assignStatement>
																			</trueStatements>
																		</conditionStatement>
																		<variableDeclarationStatement name="copy">
																			<init>
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<variableReferenceExpression name="itemsNav"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="copy"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																			</init>
																		</variableDeclarationStatement>
																		<comment>prepare the lookup mapping</comment>
																		<variableDeclarationStatement name="payloadLookupFields">
																			<init>
																				<objectCreateExpression type="List">
																					<typeArguments>
																						<typeReference type="System.String"/>
																					</typeArguments>
																				</objectCreateExpression>
																			</init>
																		</variableDeclarationStatement>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="payloadLookupFields"/>
																			</target>
																			<parameters>
																				<variableReferenceExpression name="fieldName"/>
																			</parameters>
																		</methodInvokeExpression>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="payloadLookupFields"/>
																			</target>
																			<parameters>
																				<variableReferenceExpression name="aliasFieldName"/>
																			</parameters>
																		</methodInvokeExpression>
																		<variableDeclarationStatement name="lookupFieldFilter">
																			<init>
																				<objectCreateExpression type="List">
																					<typeArguments>
																						<typeReference type="System.String"/>
																					</typeArguments>
																				</objectCreateExpression>
																			</init>
																		</variableDeclarationStatement>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="lookupFieldFilter"/>
																			</target>
																			<parameters>
																				<variableReferenceExpression name="dataValueField"/>
																			</parameters>
																		</methodInvokeExpression>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="lookupFieldFilter"/>
																			</target>
																			<parameters>
																				<variableReferenceExpression name="dataTextField"/>
																			</parameters>
																		</methodInvokeExpression>
																		<variableDeclarationStatement name="lookupFilter">
																			<init>
																				<objectCreateExpression type="List">
																					<typeArguments>
																						<typeReference type="System.String"/>
																					</typeArguments>
																				</objectCreateExpression>
																			</init>
																		</variableDeclarationStatement>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="lookupFilter"/>
																			</target>
																			<parameters>
																				<binaryOperatorExpression operator="Add">
																					<variableReferenceExpression name="dataTextField"/>
																					<binaryOperatorExpression operator="Add">
																						<primitiveExpression value=":="/>
																						<methodInvokeExpression methodName="ValueToString">
																							<target>
																								<typeReferenceExpression type="DataControllerBase"/>
																							</target>
																							<parameters>
																								<variableReferenceExpression name="aliasPropValue"/>
																							</parameters>
																						</methodInvokeExpression>
																					</binaryOperatorExpression>
																				</binaryOperatorExpression>
																			</parameters>
																		</methodInvokeExpression>
																		<comment>enumerate the "copy" fields to enhance the lookup precision</comment>
																		<conditionStatement>
																			<condition>
																				<unaryOperatorExpression operator="IsNotNullOrEmpty">
																					<variableReferenceExpression name="copy"/>
																				</unaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<variableDeclarationStatement name="m">
																					<init>
																						<methodInvokeExpression methodName="Match">
																							<target>
																								<typeReferenceExpression type="Regex"/>
																							</target>
																							<parameters>
																								<variableReferenceExpression name="copy"/>
																								<primitiveExpression>
																									<xsl:attribute name="value"><![CDATA[(\w+)\s*=\s*(\w+)]]></xsl:attribute>
																								</primitiveExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</init>
																				</variableDeclarationStatement>
																				<whileStatement>
																					<test>
																						<propertyReferenceExpression name="Success">
																							<variableReferenceExpression name="m"/>
																						</propertyReferenceExpression>
																					</test>
																					<statements>
																						<variableDeclarationStatement name="copyPropName">
																							<init>
																								<propertyReferenceExpression name="Value">
																									<arrayIndexerExpression>
																										<target>
																											<propertyReferenceExpression name="Groups">
																												<variableReferenceExpression name="m"/>
																											</propertyReferenceExpression>
																										</target>
																										<indices>
																											<primitiveExpression value="1"/>
																										</indices>
																									</arrayIndexerExpression>
																								</propertyReferenceExpression>
																							</init>
																						</variableDeclarationStatement>
																						<variableDeclarationStatement name="lookupFieldName">
																							<init>
																								<propertyReferenceExpression name="Value">
																									<arrayIndexerExpression>
																										<target>
																											<propertyReferenceExpression name="Groups">
																												<variableReferenceExpression name="m"/>
																											</propertyReferenceExpression>
																										</target>
																										<indices>
																											<primitiveExpression value="2"/>
																										</indices>
																									</arrayIndexerExpression>
																								</propertyReferenceExpression>
																							</init>
																						</variableDeclarationStatement>
																						<variableDeclarationStatement name="copyFieldNav">
																							<init>
																								<methodInvokeExpression methodName="SelectSingleNode">
																									<target>
																										<propertyReferenceExpression name="Config"/>
																									</target>
																									<parameters>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[/c:dataController/c:fields/c:field[@name='{0}']]]></xsl:attribute>
																										</primitiveExpression>
																										<variableReferenceExpression name="copyPropName"/>
																									</parameters>
																								</methodInvokeExpression>
																							</init>
																						</variableDeclarationStatement>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="IdentityInequality">
																									<variableReferenceExpression name="copyFieldNav"/>
																									<primitiveExpression value="null"/>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<variableDeclarationStatement name="copyPropValue">
																									<init>
																										<methodInvokeExpression methodName="GetPropertyValue">
																											<parameters>
																												<argumentReferenceExpression name="payload"/>
																												<methodInvokeExpression methodName="ToApiFieldName">
																													<parameters>
																														<variableReferenceExpression name="copyPropName"/>
																													</parameters>
																												</methodInvokeExpression>
																												<methodInvokeExpression methodName="GetAttribute">
																													<target>
																														<variableReferenceExpression name="copyFieldNav"/>
																													</target>
																													<parameters>
																														<primitiveExpression value="type"/>
																														<stringEmptyExpression/>
																													</parameters>
																												</methodInvokeExpression>
																											</parameters>
																										</methodInvokeExpression>
																									</init>
																								</variableDeclarationStatement>
																								<methodInvokeExpression methodName="Add">
																									<target>
																										<variableReferenceExpression name="payloadLookupFields"/>
																									</target>
																									<parameters>
																										<variableReferenceExpression name="copyPropName"/>
																									</parameters>
																								</methodInvokeExpression>
																								<methodInvokeExpression methodName="Add">
																									<target>
																										<variableReferenceExpression name="lookupFieldFilter"/>
																									</target>
																									<parameters>
																										<variableReferenceExpression name="lookupFieldName"/>
																									</parameters>
																								</methodInvokeExpression>
																								<conditionStatement>
																									<condition>
																										<binaryOperatorExpression operator="IdentityInequality">
																											<variableReferenceExpression name="copyPropValue"/>
																											<primitiveExpression value="null"/>
																										</binaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<methodInvokeExpression methodName="Add">
																											<target>
																												<variableReferenceExpression name="lookupFilter"/>
																											</target>
																											<parameters>
																												<binaryOperatorExpression operator="Add">
																													<variableReferenceExpression name="lookupFieldName"/>
																													<binaryOperatorExpression operator="Add">
																														<primitiveExpression value=":="/>
																														<methodInvokeExpression methodName="ValueToString">
																															<target>
																																<typeReferenceExpression type="DataControllerBase"/>
																															</target>
																															<parameters>
																																<variableReferenceExpression name="copyPropValue"/>
																															</parameters>
																														</methodInvokeExpression>
																													</binaryOperatorExpression>
																												</binaryOperatorExpression>
																											</parameters>
																										</methodInvokeExpression>
																									</trueStatements>
																								</conditionStatement>
																							</trueStatements>
																						</conditionStatement>
																						<assignStatement>
																							<variableReferenceExpression name="m"/>
																							<methodInvokeExpression methodName="NextMatch">
																								<target>
																									<variableReferenceExpression name="m"/>
																								</target>
																							</methodInvokeExpression>
																						</assignStatement>
																					</statements>
																				</whileStatement>
																			</trueStatements>
																		</conditionStatement>
																		<variableDeclarationStatement name="lookupRequest">
																			<init>
																				<objectCreateExpression type="PageRequest">
																					<parameters>
																						<primitiveExpression value="0"/>
																						<primitiveExpression value="1"/>
																						<primitiveExpression value="null"/>
																						<methodInvokeExpression methodName="ToArray">
																							<target>
																								<variableReferenceExpression name="lookupFilter"/>
																							</target>
																						</methodInvokeExpression>
																					</parameters>
																				</objectCreateExpression>
																			</init>
																		</variableDeclarationStatement>
																		<assignStatement>
																			<propertyReferenceExpression name="Controller">
																				<variableReferenceExpression name="lookupRequest"/>
																			</propertyReferenceExpression>
																			<variableReferenceExpression name="lookupController"/>
																		</assignStatement>
																		<assignStatement>
																			<propertyReferenceExpression name="View">
																				<variableReferenceExpression name="lookupRequest"/>
																			</propertyReferenceExpression>
																			<variableReferenceExpression name="viewId"/>
																		</assignStatement>
																		<assignStatement>
																			<propertyReferenceExpression name="RequiresMetaData">
																				<variableReferenceExpression name="lookupRequest"/>
																			</propertyReferenceExpression>
																			<primitiveExpression value="true"/>
																		</assignStatement>
																		<assignStatement>
																			<propertyReferenceExpression name="MetadataFilter">
																				<variableReferenceExpression name="lookupRequest"/>
																			</propertyReferenceExpression>
																			<arrayCreateExpression>
																				<createType type="System.String"/>
																				<initializers>
																					<primitiveExpression value="fields"/>
																				</initializers>
																			</arrayCreateExpression>
																		</assignStatement>
																		<assignStatement>
																			<propertyReferenceExpression name="FieldFilter">
																				<variableReferenceExpression name="lookupRequest"/>
																			</propertyReferenceExpression>
																			<methodInvokeExpression methodName="ToArray">
																				<target>
																					<variableReferenceExpression name="lookupFieldFilter"/>
																				</target>
																			</methodInvokeExpression>
																		</assignStatement>
																		<variableDeclarationStatement name="lookupPage">
																			<init>
																				<methodInvokeExpression methodName="GetPage">
																					<target>
																						<methodInvokeExpression methodName="CreateDataController">
																							<target>
																								<typeReferenceExpression type="ControllerFactory"/>
																							</target>
																						</methodInvokeExpression>
																					</target>
																					<parameters>
																						<propertyReferenceExpression name="Controller">
																							<variableReferenceExpression name="lookupRequest"/>
																						</propertyReferenceExpression>
																						<propertyReferenceExpression name="View">
																							<variableReferenceExpression name="lookupRequest"/>
																						</propertyReferenceExpression>
																						<variableReferenceExpression name="lookupRequest"/>
																					</parameters>
																				</methodInvokeExpression>
																			</init>
																		</variableDeclarationStatement>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="GreaterThan">
																					<propertyReferenceExpression name="Count">
																						<propertyReferenceExpression name="Rows">
																							<variableReferenceExpression name="lookupPage"/>
																						</propertyReferenceExpression>
																					</propertyReferenceExpression>
																					<primitiveExpression value="0"/>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<forStatement>
																					<variable name="i">
																						<init>
																							<primitiveExpression value="0"/>
																						</init>
																					</variable>
																					<test>
																						<binaryOperatorExpression operator="LessThan">
																							<variableReferenceExpression name="i"/>
																							<propertyReferenceExpression name="Count">
																								<propertyReferenceExpression name="Fields">
																									<variableReferenceExpression name="lookupPage"/>
																								</propertyReferenceExpression>
																							</propertyReferenceExpression>
																						</binaryOperatorExpression>
																					</test>
																					<increment>
																						<variableReferenceExpression name="i"/>
																					</increment>
																					<statements>
																						<methodInvokeExpression methodName="SetPropertyValue">
																							<parameters>
																								<argumentReferenceExpression name="payload"/>
																								<arrayIndexerExpression>
																									<target>
																										<variableReferenceExpression name="payloadLookupFields"/>
																									</target>
																									<indices>
																										<methodInvokeExpression methodName="IndexOf">
																											<target>
																												<variableReferenceExpression name="lookupFieldFilter"/>
																											</target>
																											<parameters>
																												<propertyReferenceExpression name="Name">
																													<arrayIndexerExpression>
																														<target>
																															<propertyReferenceExpression name="Fields">
																																<variableReferenceExpression name="lookupPage"/>
																															</propertyReferenceExpression>
																														</target>
																														<indices>
																															<variableReferenceExpression name="i"/>
																														</indices>
																													</arrayIndexerExpression>
																												</propertyReferenceExpression>
																											</parameters>
																										</methodInvokeExpression>
																									</indices>
																								</arrayIndexerExpression>
																								<arrayIndexerExpression>
																									<target>
																										<arrayIndexerExpression>
																											<target>
																												<propertyReferenceExpression name="Rows">
																													<variableReferenceExpression name="lookupPage"/>
																												</propertyReferenceExpression>
																											</target>
																											<indices>
																												<primitiveExpression value="0"/>
																											</indices>
																										</arrayIndexerExpression>
																									</target>
																									<indices>
																										<variableReferenceExpression name="i"/>
																									</indices>
																								</arrayIndexerExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</statements>
																				</forStatement>
																			</trueStatements>
																		</conditionStatement>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</whileStatement>
									</trueStatements>
								</conditionStatement>
								<comment>ensure that all required fields are present when POST or PUT is executed</comment>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="ValueEquality">
												<propertyReferenceExpression name="HttpMethod"/>
												<primitiveExpression value="POST"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="BooleanAnd">
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="HttpMethod"/>
													<primitiveExpression value="PUT"/>
												</binaryOperatorExpression>
												<unaryOperatorExpression operator="IsNullOrEmpty">
													<propertyReferenceExpression name="PathField"/>
												</unaryOperatorExpression>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="dataFieldIterator">
											<init>
												<methodInvokeExpression methodName="Select">
													<target>
														<propertyReferenceExpression name="Config"/>
													</target>
													<parameters>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[/c:dataController/c:views/c:view[@id='{0}']//c:dataField]]></xsl:attribute>
														</primitiveExpression>
														<propertyReferenceExpression name="PathView"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<whileStatement>
											<test>
												<methodInvokeExpression methodName="MoveNext">
													<target>
														<variableReferenceExpression name="dataFieldIterator"/>
													</target>
												</methodInvokeExpression>
											</test>
											<statements>
												<tryStatement>
													<statements>
														<variableDeclarationStatement name="fieldName">
															<init>
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<propertyReferenceExpression name="Current">
																			<variableReferenceExpression name="dataFieldIterator"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="fieldName"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="fieldNav">
															<init>
																<methodInvokeExpression methodName="SelectSingleNode">
																	<target>
																		<propertyReferenceExpression name="Config"/>
																	</target>
																	<parameters>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[/c:dataController/c:fields/c:field[@name='{0}']]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="fieldName"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityEquality">
																	<variableReferenceExpression name="fieldNav"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="500"/>
																		<primitiveExpression value="true"/>
																		<primitiveExpression value="invalid_controller"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Field '{0}' is not defined in the '{1}' controller.]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="fieldName"/>
																		<propertyReferenceExpression name="ControllerName"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<variableDeclarationStatement name="isPrimaryKey">
															<init>
																<binaryOperatorExpression operator="ValueEquality">
																	<methodInvokeExpression methodName="GetAttribute">
																		<target>
																			<variableReferenceExpression name="fieldNav"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="isPrimaryKey"/>
																			<stringEmptyExpression/>
																		</parameters>
																	</methodInvokeExpression>
																	<primitiveExpression value="true" convertTo="String"/>
																</binaryOperatorExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="isReadOnly">
															<init>
																<binaryOperatorExpression operator="ValueEquality">
																	<methodInvokeExpression methodName="GetAttribute">
																		<target>
																			<variableReferenceExpression name="fieldNav"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="readOnly"/>
																			<stringEmptyExpression/>
																		</parameters>
																	</methodInvokeExpression>
																	<primitiveExpression value="true" convertTo="String"/>
																</binaryOperatorExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="allowNulls">
															<init>
																<binaryOperatorExpression operator="ValueInequality">
																	<methodInvokeExpression methodName="GetAttribute">
																		<target>
																			<variableReferenceExpression name="fieldNav"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="allowNulls"/>
																			<stringEmptyExpression/>
																		</parameters>
																	</methodInvokeExpression>
																	<primitiveExpression value="false" convertTo="String"/>
																</binaryOperatorExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="hasDefault">
															<init>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<methodInvokeExpression methodName="GetAttribute">
																		<target>
																			<variableReferenceExpression name="fieldNav"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="default"/>
																			<stringEmptyExpression/>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="propName">
															<init>
																<methodInvokeExpression methodName="ToApiFieldName">
																	<parameters>
																		<variableReferenceExpression name="fieldName"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<variableReferenceExpression name="isPrimaryKey"/>
																	<unaryOperatorExpression operator="Not">
																		<variableReferenceExpression name="isReadOnly"/>
																	</unaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<comment>set the primay key field value</comment>
																<foreachStatement>
																	<variable name="fvo"/>
																	<target>
																		<propertyReferenceExpression name="PK"/>
																	</target>
																	<statements>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="BooleanAnd">
																					<binaryOperatorExpression operator="ValueEquality">
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="fvo"/>
																						</propertyReferenceExpression>
																						<variableReferenceExpression name="fieldName"/>
																					</binaryOperatorExpression>
																					<binaryOperatorExpression operator="IdentityEquality">
																						<arrayIndexerExpression>
																							<target>
																								<argumentReferenceExpression name="payload"/>
																							</target>
																							<indices>
																								<variableReferenceExpression name="propName"/>
																							</indices>
																						</arrayIndexerExpression>
																						<primitiveExpression value="null"/>
																					</binaryOperatorExpression>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<methodInvokeExpression methodName="SetPropertyValue">
																					<parameters>
																						<argumentReferenceExpression name="payload"/>
																						<variableReferenceExpression name="propName"/>
																						<propertyReferenceExpression name="Value">
																							<variableReferenceExpression name="fvo"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																				<breakStatement/>
																			</trueStatements>
																		</conditionStatement>
																	</statements>
																</foreachStatement>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="BooleanAnd">
																				<binaryOperatorExpression operator="BooleanAnd">
																					<unaryOperatorExpression operator="Not">
																						<variableReferenceExpression name="allowNulls"/>
																					</unaryOperatorExpression>
																					<unaryOperatorExpression operator="Not">
																						<variableReferenceExpression name="isReadOnly"/>
																					</unaryOperatorExpression>
																				</binaryOperatorExpression>
																				<binaryOperatorExpression operator="IdentityEquality">
																					<arrayIndexerExpression>
																						<target>
																							<argumentReferenceExpression name="payload"/>
																						</target>
																						<indices>
																							<variableReferenceExpression name="propName"/>
																						</indices>
																					</arrayIndexerExpression>
																					<primitiveExpression value="null"/>
																				</binaryOperatorExpression>
																			</binaryOperatorExpression>
																			<binaryOperatorExpression operator="BooleanAnd">
																				<unaryOperatorExpression operator="Not">
																					<variableReferenceExpression name="hasDefault"/>
																				</unaryOperatorExpression>
																				<binaryOperatorExpression operator="IdentityEquality">
																					<propertyReferenceExpression name="Action"/>
																					<primitiveExpression value="null"/>
																				</binaryOperatorExpression>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="403"/>
																				<primitiveExpression value="true"/>
																				<primitiveExpression value="invalid_argument"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Field '{0}' is expected in the body.]]></xsl:attribute>
																				</primitiveExpression>
																				<variableReferenceExpression name="propName"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</falseStatements>
														</conditionStatement>
													</statements>
													<catch exceptionType="RESTfulResourceException" localName="ex">
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="errors"/>
															</target>
															<parameters>
																<variableReferenceExpression name="ex"/>
															</parameters>
														</methodInvokeExpression>
													</catch>
												</tryStatement>
											</statements>
										</whileStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="GreaterThan">
													<propertyReferenceExpression name="Count">
														<variableReferenceExpression name="errors"/>
													</propertyReferenceExpression>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<throwExceptionStatement>
													<objectCreateExpression type="RESTfulResourceException">
														<parameters>
															<variableReferenceExpression name="errors"/>
														</parameters>
													</objectCreateExpression>
												</throwExceptionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<comment>inject the properties with the null value for the missing properties of the PUT method</comment>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="ValueEquality">
												<propertyReferenceExpression name="HttpMethod"/>
												<primitiveExpression value="PUT"/>
											</binaryOperatorExpression>
											<unaryOperatorExpression operator="IsNullOrEmpty">
												<propertyReferenceExpression name="PathField"/>
											</unaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="dataFieldIterator">
											<init>
												<methodInvokeExpression methodName="Select">
													<target>
														<propertyReferenceExpression name="Config"/>
													</target>
													<parameters>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[/c:dataController/c:views/c:view[@id='{0}']//c:dataField]]></xsl:attribute>
														</primitiveExpression>
														<propertyReferenceExpression name="PathView"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<whileStatement>
											<test>
												<methodInvokeExpression methodName="MoveNext">
													<target>
														<variableReferenceExpression name="dataFieldIterator"/>
													</target>
												</methodInvokeExpression>
											</test>
											<statements>
												<variableDeclarationStatement name="fieldName">
													<init>
														<methodInvokeExpression methodName="GetAttribute">
															<target>
																<propertyReferenceExpression name="Current">
																	<variableReferenceExpression name="dataFieldIterator"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<primitiveExpression value="fieldName"/>
																<stringEmptyExpression/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="propName">
													<init>
														<methodInvokeExpression methodName="ToApiFieldName">
															<parameters>
																<variableReferenceExpression name="fieldName"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityEquality">
															<arrayIndexerExpression>
																<target>
																	<argumentReferenceExpression name="payload"/>
																</target>
																<indices>
																	<variableReferenceExpression name="propName"/>
																</indices>
															</arrayIndexerExpression>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="SetPropertyValue">
															<parameters>
																<argumentReferenceExpression name="payload"/>
																<variableReferenceExpression name="propName"/>
																<primitiveExpression value="null"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</statements>
										</whileStatement>
									</trueStatements>
								</conditionStatement>
								<comment>validate the values</comment>
								<variableDeclarationStatement name="systemPayloadKeys">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
											<parameters>
												<arrayCreateExpression>
													<createType type="System.String"/>
													<initializers>
														<propertyReferenceExpression name="EmbeddedKey"/>
														<propertyReferenceExpression name="LinksKey"/>
														<propertyReferenceExpression name="SchemaKey"/>
													</initializers>
												</arrayCreateExpression>
											</parameters>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<propertyReferenceExpression name="Action"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="systemPayloadKeys"/>
											</target>
											<parameters>
												<propertyReferenceExpression name="ParametersKey"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<propertyReferenceExpression name="IsCollection"/>
											<binaryOperatorExpression operator="IdentityInequality">
												<propertyReferenceExpression name="Action"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="systemPayloadKeys"/>
											</target>
											<parameters>
												<propertyReferenceExpression name="CollectionKey"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<foreachStatement>
									<variable name="p"/>
									<target>
										<methodInvokeExpression methodName="Properties">
											<target>
												<argumentReferenceExpression name="payload"/>
											</target>
										</methodInvokeExpression>
									</target>
									<statements>
										<tryStatement>
											<statements>
												<variableDeclarationStatement name="propName">
													<init>
														<propertyReferenceExpression name="Name">
															<variableReferenceExpression name="p"/>
														</propertyReferenceExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<variableReferenceExpression name="propName"/>
															<variableReferenceExpression name="pathFieldNameKey"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="propName"/>
															<variableReferenceExpression name="pathFieldName"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<variableDeclarationStatement type="XPathNavigator" name="fieldNav" var="false">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="TryGetValue">
															<target>
																<fieldReferenceExpression name="fieldMap"/>
															</target>
															<parameters>
																<variableReferenceExpression name="propName"/>
																<directionExpression direction="Out">
																	<variableReferenceExpression name="fieldNav"/>
																</directionExpression>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<unaryOperatorExpression operator="IsNotNullOrEmpty">
																		<variableReferenceExpression name="pathFieldName"/>
																	</unaryOperatorExpression>
																	<binaryOperatorExpression operator="ValueInequality">
																		<variableReferenceExpression name="propName"/>
																		<variableReferenceExpression name="pathFieldName"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="403"/>
																		<primitiveExpression value="invalid_argument"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Field '{0}' is not allowed in the the body.]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="propName"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<variableDeclarationStatement name="fieldName">
															<init>
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<variableReferenceExpression name="fieldNav"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="name"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="isReadOnly">
															<init>
																<binaryOperatorExpression operator="ValueEquality">
																	<methodInvokeExpression methodName="GetAttribute">
																		<target>
																			<variableReferenceExpression name="fieldNav"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="readOnly"/>
																			<stringEmptyExpression/>
																		</parameters>
																	</methodInvokeExpression>
																	<primitiveExpression value="true" convertTo="String"/>
																</binaryOperatorExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="allowNulls">
															<init>
																<binaryOperatorExpression operator="ValueInequality">
																	<methodInvokeExpression methodName="GetAttribute">
																		<target>
																			<variableReferenceExpression name="fieldNav"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="allowNulls"/>
																			<stringEmptyExpression/>
																		</parameters>
																	</methodInvokeExpression>
																	<primitiveExpression value="false" convertTo="String"/>
																</binaryOperatorExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="fieldType">
															<init>
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<variableReferenceExpression name="fieldNav"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="type"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="hasDefault">
															<init>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<methodInvokeExpression methodName="GetAttribute">
																		<target>
																			<variableReferenceExpression name="fieldNav"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="default"/>
																			<stringEmptyExpression/>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueInequality">
																	<methodInvokeExpression methodName="GetAttribute">
																		<target>
																			<variableReferenceExpression name="fieldNav"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="isPrimaryKey"/>
																			<stringEmptyExpression/>
																		</parameters>
																	</methodInvokeExpression>
																	<primitiveExpression value="true" convertTo="String"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement name="dataField">
																	<init>
																		<methodInvokeExpression methodName="SelectSingleNode">
																			<target>
																				<propertyReferenceExpression name="Config"/>
																			</target>
																			<parameters>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[/c:dataController/c:views/c:view[@id='{0}']//c:dataField[@fieldName='{1}' or @aliasFieldName='{1}']]]></xsl:attribute>
																				</primitiveExpression>
																				<propertyReferenceExpression name="PathView"/>
																				<variableReferenceExpression name="fieldName"/>
																			</parameters>
																		</methodInvokeExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityEquality">
																			<variableReferenceExpression name="dataField"/>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<variableDeclarationStatement name="accessDenied">
																			<init>
																				<primitiveExpression  value="true"/>
																			</init>
																		</variableDeclarationStatement>
																		<foreachStatement>
																			<variable name="fvo"/>
																			<target>
																				<propertyReferenceExpression name="Filter"/>
																			</target>
																			<statements>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="ValueEquality">
																							<propertyReferenceExpression name="Name">
																								<variableReferenceExpression name="fvo"/>
																							</propertyReferenceExpression>
																							<variableReferenceExpression name="fieldName"/>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<assignStatement>
																							<variableReferenceExpression name="accessDenied"/>
																							<primitiveExpression value="false"/>
																						</assignStatement>
																						<methodInvokeExpression methodName="Add">
																							<target>
																								<variableReferenceExpression name="values"/>
																							</target>
																							<parameters>
																								<variableReferenceExpression name="fvo"/>
																							</parameters>
																						</methodInvokeExpression>
																						<breakStatement/>
																					</trueStatements>
																				</conditionStatement>
																			</statements>
																		</foreachStatement>
																		<conditionStatement>
																			<condition>
																				<variableReferenceExpression name="accessDenied"/>
																			</condition>
																			<trueStatements>
																				<methodInvokeExpression methodName="ThrowError">
																					<target>
																						<typeReferenceExpression type="RESTfulResource"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="403"/>
																						<primitiveExpression value="true"/>
																						<primitiveExpression value="invalid_argument"/>
																						<primitiveExpression>
																							<xsl:attribute name="value"><![CDATA[Access to the field '{0}' is denied.]]></xsl:attribute>
																						</primitiveExpression>
																						<methodInvokeExpression methodName="ToApiFieldName">
																							<parameters>
																								<variableReferenceExpression name="fieldName"/>
																							</parameters>
																						</methodInvokeExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</trueStatements>
																			<falseStatements>
																				<continueStatement/>
																			</falseStatements>
																		</conditionStatement>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<variableReferenceExpression name="fieldType"/>
																			<primitiveExpression value="DataView"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<comment>process the DataView field collection - do nothing</comment>
																		<assignStatement>
																			<variableReferenceExpression name="fieldType"/>
																			<primitiveExpression value="DataView"/>
																		</assignStatement>
																	</trueStatements>
																	<falseStatements>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="ValueEquality">
																					<methodInvokeExpression methodName="GetAttribute">
																						<target>
																							<variableReferenceExpression name="fieldNav"/>
																						</target>
																						<parameters>
																							<primitiveExpression value="onDemand"/>
																							<stringEmptyExpression/>
																						</parameters>
																					</methodInvokeExpression>
																					<primitiveExpression value="true" convertTo="String"/>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="BooleanAnd">
																							<binaryOperatorExpression operator="ValueEquality">
																								<propertyReferenceExpression name="Type">
																									<propertyReferenceExpression name="Value">
																										<variableReferenceExpression name="p"/>
																									</propertyReferenceExpression>
																								</propertyReferenceExpression>
																								<propertyReferenceExpression name="String">
																									<typeReferenceExpression type="JTokenType"/>
																								</propertyReferenceExpression>
																							</binaryOperatorExpression>
																							<methodInvokeExpression methodName="StartsWith">
																								<target>
																									<convertExpression to="String">
																										<propertyReferenceExpression name="Value">
																											<variableReferenceExpression name="p"/>
																										</propertyReferenceExpression>
																									</convertExpression>
																								</target>
																								<parameters>
																									<methodInvokeExpression methodName="ToServiceUrl">
																										<parameters>
																											<primitiveExpression value="/v2/"/>
																										</parameters>
																									</methodInvokeExpression>
																								</parameters>
																							</methodInvokeExpression>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<continueStatement/>
																					</trueStatements>
																				</conditionStatement>
																				<methodInvokeExpression methodName="ThrowError">
																					<target>
																						<typeReferenceExpression type="RESTfulResource"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="403"/>
																						<primitiveExpression value="true"/>
																						<primitiveExpression value="invalid_argument"/>
																						<primitiveExpression>
																							<xsl:attribute name="value"><![CDATA[Blob field '{0}' cannot be specified in the body. Specify its value as the file in the 'multipart/form-data' instead.]]></xsl:attribute>
																						</primitiveExpression>
																						<methodInvokeExpression methodName="ToApiFieldName">
																							<parameters>
																								<variableReferenceExpression name="fieldName"/>
																							</parameters>
																						</methodInvokeExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</trueStatements>
																			<falseStatements>
																				<variableDeclarationStatement type="System.Object" name="v" var="false">
																					<init>
																						<primitiveExpression value="null"/>
																					</init>
																				</variableDeclarationStatement>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="ValueInequality">
																							<propertyReferenceExpression name="Type">
																								<propertyReferenceExpression name="Value">
																									<variableReferenceExpression name="p"/>
																								</propertyReferenceExpression>
																							</propertyReferenceExpression>
																							<propertyReferenceExpression name="Null">
																								<typeReferenceExpression type="JTokenType"/>
																							</propertyReferenceExpression>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<tryStatement>
																							<statements>
																								<assignStatement>
																									<variableReferenceExpression name="v"/>
																									<methodInvokeExpression methodName="StringToValue">
																										<target>
																											<typeReferenceExpression type="DataControllerBase"/>
																										</target>
																										<parameters>
																											<variableReferenceExpression name="fieldType"/>
																											<convertExpression to="String">
																												<propertyReferenceExpression name="Value">
																													<variableReferenceExpression name="p"/>
																												</propertyReferenceExpression>
																											</convertExpression>
																										</parameters>
																									</methodInvokeExpression>
																								</assignStatement>
																							</statements>
																							<catch exceptionType="Exception">
																								<methodInvokeExpression methodName="ThrowError">
																									<target>
																										<typeReferenceExpression type="RESTfulResource"/>
																									</target>
																									<parameters>
																										<primitiveExpression value="invalid_argument"/>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[The value of the field '{0}' is invalid. Error converting '{1}' to '{2}'.]]></xsl:attribute>
																										</primitiveExpression>
																										<propertyReferenceExpression name="Name">
																											<variableReferenceExpression name="p"/>
																										</propertyReferenceExpression>
																										<propertyReferenceExpression name="Value">
																											<variableReferenceExpression name="p"/>
																										</propertyReferenceExpression>
																										<variableReferenceExpression name="fieldType"/>
																									</parameters>
																								</methodInvokeExpression>
																							</catch>
																						</tryStatement>
																					</trueStatements>
																				</conditionStatement>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="BooleanAnd">
																							<binaryOperatorExpression operator="IdentityEquality">
																								<variableReferenceExpression name="v"/>
																								<primitiveExpression value="null"/>
																							</binaryOperatorExpression>
																							<binaryOperatorExpression operator="BooleanAnd">
																								<unaryOperatorExpression operator="Not">
																									<variableReferenceExpression name="allowNulls"/>
																								</unaryOperatorExpression>
																								<unaryOperatorExpression operator="Not">
																									<variableReferenceExpression name="hasDefault"/>
																								</unaryOperatorExpression>
																							</binaryOperatorExpression>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<methodInvokeExpression methodName="ThrowError">
																							<target>
																								<typeReferenceExpression type="RESTfulResource"/>
																							</target>
																							<parameters>
																								<primitiveExpression value="400"/>
																								<primitiveExpression value="true"/>
																								<primitiveExpression value="invalid_argument"/>
																								<primitiveExpression>
																									<xsl:attribute name="value"><![CDATA[The value of the field '{0}' cannot be null.]]></xsl:attribute>
																								</primitiveExpression>
																								<propertyReferenceExpression name="Name">
																									<variableReferenceExpression name="p"/>
																								</propertyReferenceExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</trueStatements>
																				</conditionStatement>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="IsTypeOf">
																							<variableReferenceExpression name="v"/>
																							<typeReferenceExpression type="System.String"/>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<variableDeclarationStatement name="len">
																							<init>
																								<methodInvokeExpression methodName="GetAttribute">
																									<target>
																										<variableReferenceExpression name="fieldNav"/>
																									</target>
																									<parameters>
																										<primitiveExpression value="length"/>
																										<stringEmptyExpression/>
																									</parameters>
																								</methodInvokeExpression>
																							</init>
																						</variableDeclarationStatement>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="BooleanAnd">
																									<unaryOperatorExpression operator="IsNotNullOrEmpty">
																										<variableReferenceExpression name="len"/>
																									</unaryOperatorExpression>
																									<binaryOperatorExpression operator="LessThan">
																										<convertExpression to="Int32">
																											<variableReferenceExpression name="len"/>
																										</convertExpression>
																										<propertyReferenceExpression name="Length">
																											<castExpression targetType="System.String">
																												<variableReferenceExpression name="v"/>
																											</castExpression>
																										</propertyReferenceExpression>
																									</binaryOperatorExpression>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<methodInvokeExpression methodName="ThrowError">
																									<target>
																										<typeReferenceExpression type="RESTfulResource"/>
																									</target>
																									<parameters>
																										<primitiveExpression value="invalid_argument"/>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[The maximum length of the field '{0}' is {1}.]]></xsl:attribute>
																										</primitiveExpression>
																										<propertyReferenceExpression name="Name">
																											<variableReferenceExpression name="p"/>
																										</propertyReferenceExpression>
																										<variableReferenceExpression name="len"/>
																									</parameters>
																								</methodInvokeExpression>
																							</trueStatements>
																						</conditionStatement>
																					</trueStatements>
																				</conditionStatement>
																				<variableDeclarationStatement name="fvo">
																					<init>
																						<objectCreateExpression type="FieldValue">
																							<parameters>
																								<variableReferenceExpression name="fieldName"/>
																							</parameters>
																						</objectCreateExpression>
																					</init>
																				</variableDeclarationStatement>
																				<conditionStatement>
																					<condition>
																						<variableReferenceExpression name="isReadOnly"/>
																					</condition>
																					<trueStatements>
																						<assignStatement>
																							<propertyReferenceExpression name="OldValue">
																								<variableReferenceExpression name="fvo"/>
																							</propertyReferenceExpression>
																							<variableReferenceExpression name="v"/>
																						</assignStatement>
																						<assignStatement>
																							<propertyReferenceExpression name="ReadOnly">
																								<variableReferenceExpression name="fvo"/>
																							</propertyReferenceExpression>
																							<primitiveExpression value="true"/>
																						</assignStatement>
																					</trueStatements>
																					<falseStatements>
																						<assignStatement>
																							<propertyReferenceExpression name="NewValue">
																								<variableReferenceExpression name="fvo"/>
																							</propertyReferenceExpression>
																							<variableReferenceExpression name="v"/>
																						</assignStatement>
																						<assignStatement>
																							<propertyReferenceExpression name="Modified">
																								<variableReferenceExpression name="fvo"/>
																							</propertyReferenceExpression>
																							<primitiveExpression value="true"/>
																						</assignStatement>
																					</falseStatements>
																				</conditionStatement>
																				<methodInvokeExpression methodName="Add">
																					<target>
																						<variableReferenceExpression name="values"/>
																					</target>
																					<parameters>
																						<variableReferenceExpression name="fvo"/>
																					</parameters>
																				</methodInvokeExpression>
																			</falseStatements>
																		</conditionStatement>
																	</falseStatements>
																</conditionStatement>
															</trueStatements>
															<falseStatements>
																<foreachStatement>
																	<variable name="pkField"/>
																	<target>
																		<propertyReferenceExpression name="PK"/>
																	</target>
																	<statements>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="ValueEquality">
																					<variableReferenceExpression name="fieldName"/>
																					<propertyReferenceExpression name="Name">
																						<variableReferenceExpression name="pkField"/>
																					</propertyReferenceExpression>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="ValueEquality">
																							<propertyReferenceExpression name="Value">
																								<variableReferenceExpression name="pkField"/>
																							</propertyReferenceExpression>
																							<primitiveExpression value="null"/>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="BooleanAnd">
																									<unaryOperatorExpression operator="Not">
																										<variableReferenceExpression name="isReadOnly"/>
																									</unaryOperatorExpression>
																									<binaryOperatorExpression operator="ValueEquality">
																										<propertyReferenceExpression name="Type">
																											<propertyReferenceExpression name="Value">
																												<variableReferenceExpression name="p"/>
																											</propertyReferenceExpression>
																										</propertyReferenceExpression>
																										<propertyReferenceExpression name="Null">
																											<typeReferenceExpression type="JTokenType"/>
																										</propertyReferenceExpression>
																									</binaryOperatorExpression>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<methodInvokeExpression methodName="ThrowError">
																									<target>
																										<typeReferenceExpression type="RESTfulResource"/>
																									</target>
																									<parameters>
																										<primitiveExpression value="400"/>
																										<primitiveExpression value="true"/>
																										<primitiveExpression value="invalid_argument"/>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[The value of the key field '{0}' cannot be null.]]></xsl:attribute>
																										</primitiveExpression>
																										<propertyReferenceExpression name="Name">
																											<variableReferenceExpression name="p"/>
																										</propertyReferenceExpression>
																									</parameters>
																								</methodInvokeExpression>
																							</trueStatements>
																						</conditionStatement>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="BooleanAnd">
																									<binaryOperatorExpression operator="BooleanAnd">
																										<variableReferenceExpression name="isReadOnly"/>
																										<binaryOperatorExpression operator="ValueEquality">
																											<argumentReferenceExpression name="commandName"/>
																											<primitiveExpression value="Insert"/>
																										</binaryOperatorExpression>
																									</binaryOperatorExpression>
																									<binaryOperatorExpression operator="ValueInequality">
																										<propertyReferenceExpression name="Type">
																											<propertyReferenceExpression name="Value">
																												<variableReferenceExpression name="p"/>
																											</propertyReferenceExpression>
																										</propertyReferenceExpression>
																										<propertyReferenceExpression name="Null">
																											<typeReferenceExpression type="JTokenType"/>
																										</propertyReferenceExpression>
																									</binaryOperatorExpression>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<methodInvokeExpression methodName="ThrowError">
																									<target>
																										<typeReferenceExpression type="RESTfulResource"/>
																									</target>
																									<parameters>
																										<primitiveExpression value="403"/>
																										<primitiveExpression value="true"/>
																										<primitiveExpression value="invalid_argument"/>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[Field '{0}' can not have a value specified in the body.]]></xsl:attribute>
																										</primitiveExpression>
																										<variableReferenceExpression name="propName"/>
																									</parameters>
																								</methodInvokeExpression>
																							</trueStatements>
																						</conditionStatement>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="ValueInequality">
																									<propertyReferenceExpression name="Type">
																										<propertyReferenceExpression name="Value">
																											<variableReferenceExpression name="p"/>
																										</propertyReferenceExpression>
																									</propertyReferenceExpression>
																									<propertyReferenceExpression name="Null">
																										<typeReferenceExpression type="JTokenType"/>
																									</propertyReferenceExpression>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<assignStatement>
																									<propertyReferenceExpression name="NewValue">
																										<variableReferenceExpression name="pkField"/>
																									</propertyReferenceExpression>
																									<methodInvokeExpression methodName="StringToValue">
																										<target>
																											<typeReferenceExpression type="DataControllerBase"/>
																										</target>
																										<parameters>
																											<variableReferenceExpression name="fieldType"/>
																											<convertExpression to="String">
																												<propertyReferenceExpression name="Value">
																													<variableReferenceExpression name="p"/>
																												</propertyReferenceExpression>
																											</convertExpression>
																										</parameters>
																									</methodInvokeExpression>
																								</assignStatement>
																								<assignStatement>
																									<propertyReferenceExpression name="OldValue">
																										<variableReferenceExpression name="pkField"/>
																									</propertyReferenceExpression>
																									<primitiveExpression value="null"/>
																								</assignStatement>
																								<assignStatement>
																									<propertyReferenceExpression name="Modified">
																										<variableReferenceExpression name="pkField"/>
																									</propertyReferenceExpression>
																									<primitiveExpression value="true"/>
																								</assignStatement>
																							</trueStatements>
																						</conditionStatement>
																					</trueStatements>
																				</conditionStatement>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="ValueInequality">
																							<convertExpression to="String">
																								<propertyReferenceExpression name="Value">
																									<variableReferenceExpression name="pkField"/>
																								</propertyReferenceExpression>
																							</convertExpression>
																							<convertExpression to="String">
																								<propertyReferenceExpression name="Value">
																									<variableReferenceExpression name="p"/>
																								</propertyReferenceExpression>
																							</convertExpression>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<methodInvokeExpression methodName="ThrowError">
																							<target>
																								<typeReferenceExpression type="RESTfulResource"/>
																							</target>
																							<parameters>
																								<primitiveExpression value="invalid_argument"/>
																								<primitiveExpression>
																									<xsl:attribute name="value"><![CDATA[The value of the field '{0}' does not match the entity path.]]></xsl:attribute>
																								</primitiveExpression>
																								<propertyReferenceExpression name="Name">
																									<variableReferenceExpression name="p"/>
																								</propertyReferenceExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</trueStatements>
																				</conditionStatement>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="BooleanAnd">
																							<binaryOperatorExpression operator="ValueEquality">
																								<propertyReferenceExpression name="HttpMethod"/>
																								<primitiveExpression value="PUT"/>
																							</binaryOperatorExpression>
																							<binaryOperatorExpression operator="ValueEquality">
																								<argumentReferenceExpression name="commandName"/>
																								<primitiveExpression value="Insert"/>
																							</binaryOperatorExpression>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<conditionStatement>
																							<condition>
																								<variableReferenceExpression name="isReadOnly"/>
																							</condition>
																							<trueStatements>
																								<methodInvokeExpression methodName="ThrowError">
																									<target>
																										<typeReferenceExpression type="RESTfulResource"/>
																									</target>
																									<parameters>
																										<primitiveExpression value="404"/>
																										<primitiveExpression value="invalid_path"/>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[Entity {0} does not exist.]]></xsl:attribute>
																										</primitiveExpression>
																										<methodInvokeExpression methodName="TrimLocationToIdentifier"/>
																									</parameters>
																								</methodInvokeExpression>
																							</trueStatements>
																						</conditionStatement>
																						<assignStatement>
																							<propertyReferenceExpression name="NewValue">
																								<variableReferenceExpression name="pkField"/>
																							</propertyReferenceExpression>
																							<propertyReferenceExpression name="OldValue">
																								<variableReferenceExpression name="pkField"/>
																							</propertyReferenceExpression>
																						</assignStatement>
																						<assignStatement>
																							<propertyReferenceExpression name="OldValue">
																								<variableReferenceExpression name="pkField"/>
																							</propertyReferenceExpression>
																							<primitiveExpression value="null"/>
																						</assignStatement>
																						<assignStatement>
																							<propertyReferenceExpression name="Modified">
																								<variableReferenceExpression name="pkField"/>
																							</propertyReferenceExpression>
																							<primitiveExpression value="true"/>
																						</assignStatement>
																					</trueStatements>
																				</conditionStatement>
																				<breakStatement/>
																			</trueStatements>
																		</conditionStatement>
																	</statements>
																</foreachStatement>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
													<falseStatements>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="Not">
																	<methodInvokeExpression methodName="Contains">
																		<target>
																			<variableReferenceExpression name="systemPayloadKeys"/>
																		</target>
																		<parameters>
																			<propertyReferenceExpression name="Name">
																				<variableReferenceExpression name="p"/>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="400"/>
																		<primitiveExpression value="true"/>
																		<primitiveExpression value="invalid_argument"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Unexpected field '{0}' is specifed in the body.]]></xsl:attribute>
																		</primitiveExpression>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="p"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
											</statements>
											<catch exceptionType="RESTfulResourceException" localName="ex">
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="errors"/>
													</target>
													<parameters>
														<variableReferenceExpression name="ex"/>
													</parameters>
												</methodInvokeExpression>
											</catch>
										</tryStatement>
									</statements>
								</foreachStatement>
								<comment>verify the file keys</comment>
								<foreachStatement>
									<variable type="System.String" name="blobFieldName" var="false"/>
									<target>
										<propertyReferenceExpression name="Keys">
											<propertyReferenceExpression name="Files">
												<propertyReferenceExpression name="Request">
													<variableReferenceExpression name="context"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<variableReferenceExpression name="blobFieldName"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="XPathNavigator" name="fieldNav" var="false">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="TryGetValue">
															<target>
																<fieldReferenceExpression name="fieldMap"/>
															</target>
															<parameters>
																<variableReferenceExpression name="blobFieldName"/>
																<directionExpression direction="Out">
																	<variableReferenceExpression name="fieldNav"/>
																</directionExpression>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanOr">
																	<unaryOperatorExpression operator="Not">
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="ValueEquality">
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<variableReferenceExpression name="fieldNav"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="type"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																				<primitiveExpression value="Byte[]"/>
																			</binaryOperatorExpression>
																			<binaryOperatorExpression operator="ValueEquality">
																				<methodInvokeExpression methodName="GetAttribute">
																					<target>
																						<variableReferenceExpression name="fieldNav"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="onDemand"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																				<primitiveExpression value="true" convertTo="String"/>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</unaryOperatorExpression>
																	<binaryOperatorExpression operator="ValueEquality">
																		<methodInvokeExpression methodName="GetAttribute">
																			<target>
																				<variableReferenceExpression name="fieldNav"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="readOnly"/>
																				<stringEmptyExpression/>
																			</parameters>
																		</methodInvokeExpression>
																		<primitiveExpression value="true" convertTo="String"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="400"/>
																		<primitiveExpression value="true"/>
																		<primitiveExpression value="invalid_argument"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Field '{0}' cannot accept the binary data specified as the file in the form.]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="blobFieldName"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
													<falseStatements>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNullOrWhiteSpace">
																	<propertyReferenceExpression name="PathField"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="400"/>
																		<primitiveExpression value="true"/>
																		<primitiveExpression value="invalid_argument"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Unexpected field '{0}' is specifed as the file in the 'multipart/form-data' body.]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="blobFieldName"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="GreaterThan">
											<propertyReferenceExpression name="Count">
												<variableReferenceExpression name="errors"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<throwExceptionStatement>
											<objectCreateExpression type="RESTfulResourceException">
												<parameters>
													<variableReferenceExpression name="errors"/>
												</parameters>
											</objectCreateExpression>
										</throwExceptionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="BooleanAnd">
												<binaryOperatorExpression operator="ValueEquality">
													<variableReferenceExpression name="defaultValueCount"/>
													<propertyReferenceExpression name="Count">
														<variableReferenceExpression name="values"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="HttpMethod"/>
													<primitiveExpression value="PATCH"/>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="BooleanAnd">
												<binaryOperatorExpression operator="IdentityEquality">
													<propertyReferenceExpression name="Action"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="Count">
														<propertyReferenceExpression name="Files">
															<propertyReferenceExpression name="Request">
																<variableReferenceExpression name="context"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
										</binaryOperatorExpression>"
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="ThrowError">
											<target>
												<typeReferenceExpression type="RESTfulResource"/>
											</target>
											<parameters>
												<primitiveExpression value="400"/>
												<primitiveExpression value="true"/>
												<primitiveExpression value="invalid_argument"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[At least one non-key field must be specified in the body.]]></xsl:attribute>
												</primitiveExpression>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<comment>assign the "old" values for conflict detection and custom actions</comment>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="existingViewPage"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="Count">
														<propertyReferenceExpression name="Rows">
															<variableReferenceExpression name="existingViewPage"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNotNullOrEmpty">
															<propertyReferenceExpression name="ActionPathName"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="RetractLocation"/>
													</trueStatements>
												</conditionStatement>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="404"/>
														<primitiveExpression value="invalid_path"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Entity {0} does not exist.]]></xsl:attribute>
														</primitiveExpression>
														<methodInvokeExpression methodName="TrimLocationToIdentifier"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<foreachStatement>
											<variable name="fvo"/>
											<target>
												<variableReferenceExpression name="values"/>
											</target>
											<statements>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="valuesMap"/>
														</target>
														<indices>
															<propertyReferenceExpression name="Name">
																<variableReferenceExpression name="fvo"/>
															</propertyReferenceExpression>
														</indices>
													</arrayIndexerExpression>
													<variableReferenceExpression name="fvo"/>
												</assignStatement>
											</statements>
										</foreachStatement>
										<foreachStatement>
											<variable name="f"/>
											<target>
												<propertyReferenceExpression name="Fields">
													<variableReferenceExpression name="existingViewPage"/>
												</propertyReferenceExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="BooleanAnd">
																<unaryOperatorExpression operator="Not">
																	<propertyReferenceExpression name="IsPrimaryKey">
																		<variableReferenceExpression name="f"/>
																	</propertyReferenceExpression>
																</unaryOperatorExpression>
																<unaryOperatorExpression operator="Not">
																	<propertyReferenceExpression name="OnDemand">
																		<variableReferenceExpression name="f"/>
																	</propertyReferenceExpression>
																</unaryOperatorExpression>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="ValueInequality">
																<propertyReferenceExpression name="Type">
																	<variableReferenceExpression name="f"/>
																</propertyReferenceExpression>
																<primitiveExpression value="DataView"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement type="FieldValue" name="fvo" var="false">
															<init>
																<primitiveExpression value="null"/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="Not">
																	<methodInvokeExpression methodName="TryGetValue">
																		<target>
																			<variableReferenceExpression name="valuesMap"/>
																		</target>
																		<parameters>
																			<propertyReferenceExpression name="Name">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																			<directionExpression direction="Out">
																				<variableReferenceExpression name="fvo"/>
																			</directionExpression>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="fvo"/>
																	<objectCreateExpression type="FieldValue">
																		<parameters>
																			<propertyReferenceExpression name="Name">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																		</parameters>
																	</objectCreateExpression>
																</assignStatement>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="values"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="fvo"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<propertyReferenceExpression name="OldValue">
																<variableReferenceExpression name="fvo"/>
															</propertyReferenceExpression>
															<arrayIndexerExpression>
																<target>
																	<arrayIndexerExpression>
																		<target>
																			<propertyReferenceExpression name="Rows">
																				<variableReferenceExpression name="existingViewPage"/>
																			</propertyReferenceExpression>
																		</target>
																		<indices>
																			<primitiveExpression value="0"/>
																		</indices>
																	</arrayIndexerExpression>
																</target>
																<indices>
																	<methodInvokeExpression methodName="IndexOfField">
																		<target>
																			<variableReferenceExpression name="existingViewPage"/>
																		</target>
																		<parameters>
																			<propertyReferenceExpression name="Name">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</indices>
															</arrayIndexerExpression>
														</assignStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<propertyReferenceExpression name="Modified">
																		<variableReferenceExpression name="fvo"/>
																	</propertyReferenceExpression>
																	<binaryOperatorExpression operator="ValueEquality">
																		<propertyReferenceExpression name="NewValue">
																			<variableReferenceExpression name="fvo"/>
																		</propertyReferenceExpression>
																		<propertyReferenceExpression name="OldValue">
																			<variableReferenceExpression name="fvo"/>
																		</propertyReferenceExpression>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<propertyReferenceExpression name="Modified">
																		<variableReferenceExpression name="fvo"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="false"/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<propertyReferenceExpression name="ReadOnly">
																	<variableReferenceExpression name="f"/>
																</propertyReferenceExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<propertyReferenceExpression name="ReadOnly">
																		<variableReferenceExpression name="fvo"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="true"/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="selectedValues">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="IsSingleton"/>
									</condition>
									<trueStatements>
										<foreachStatement>
											<variable name="fvo"/>
											<target>
												<propertyReferenceExpression name="PK"/>
											</target>
											<statements>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="selectedValues"/>
													</target>
													<parameters>
														<convertExpression to="String">
															<propertyReferenceExpression name="Value">
																<variableReferenceExpression name="fvo"/>
															</propertyReferenceExpression>
														</convertExpression>
													</parameters>
												</methodInvokeExpression>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<tryStatement>
									<statements>
										<methodInvokeExpression methodName="ValidateActionCollection">
											<parameters>
												<argumentReferenceExpression name="payload"/>
												<variableReferenceExpression name="values"/>
												<variableReferenceExpression name="selectedValues"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="ValidateActionParameters">
											<parameters>
												<argumentReferenceExpression name="payload"/>
												<variableReferenceExpression name="values"/>
											</parameters>
										</methodInvokeExpression>
										<assignStatement>
											<propertyReferenceExpression name="Values">
												<variableReferenceExpression name="a"/>
											</propertyReferenceExpression>
											<methodInvokeExpression methodName="ToArray">
												<target>
													<variableReferenceExpression name="values"/>
												</target>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="Sequence">
												<variableReferenceExpression name="a"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="Filter">
												<variableReferenceExpression name="a"/>
											</propertyReferenceExpression>
											<methodInvokeExpression methodName="ToFilter">
												<parameters>
													<fieldReferenceExpression name="args"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="SelectedValues">
												<variableReferenceExpression name="a"/>
											</propertyReferenceExpression>
											<methodInvokeExpression methodName="ToArray">
												<target>
													<variableReferenceExpression name="selectedValues"/>
												</target>
											</methodInvokeExpression>
										</assignStatement>
										<methodInvokeExpression methodName="ValidateActionArguments">
											<parameters>
												<argumentReferenceExpression name="payload"/>
												<variableReferenceExpression name="a"/>
											</parameters>
										</methodInvokeExpression>
									</statements>
									<catch exceptionType="RESTfulResourceException" localName="ex">
										<throwExceptionStatement>
											<variableReferenceExpression name="ex"/>
										</throwExceptionStatement>
									</catch>
									<catch exceptionType="Exception" localName="ex">
										<methodInvokeExpression methodName="ThrowError">
											<target>
												<typeReferenceExpression type="RESTfulResource"/>
											</target>
											<parameters>
												<primitiveExpression value="400"/>
												<primitiveExpression value="true"/>
												<primitiveExpression value="invalid_argument"/>
												<propertyReferenceExpression name="Message">
													<variableReferenceExpression name="ex"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</catch>
								</tryStatement>
								<comment>*** stream the report out ***</comment>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<propertyReferenceExpression name="IsReport"/>
											<unaryOperatorExpression operator="Not">
												<propertyReferenceExpression name="RequiresSchema"/>
											</unaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="reportFilter">
											<init>
												<objectCreateExpression type="List">
													<typeArguments>
														<typeReference type="System.String"/>
													</typeArguments>
													<parameters>
														<propertyReferenceExpression name="Filter">
															<variableReferenceExpression name="a"/>
														</propertyReferenceExpression>
													</parameters>
												</objectCreateExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="GreaterThan">
														<propertyReferenceExpression name="Length">
															<propertyReferenceExpression name="SelectedValues">
																<variableReferenceExpression name="a"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
														<primitiveExpression value="0"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="GreaterThan">
														<propertyReferenceExpression name="Count">
															<propertyReferenceExpression name="PK"/>
														</propertyReferenceExpression>
														<primitiveExpression value="0"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="reportFilter"/>
													</target>
													<parameters>
														<binaryOperatorExpression operator="Add">
															<binaryOperatorExpression operator="Add">
																<propertyReferenceExpression name="Name">
																	<arrayIndexerExpression>
																		<target>
																			<propertyReferenceExpression name="PK"/>
																		</target>
																		<indices>
																			<primitiveExpression value="0"/>
																		</indices>
																	</arrayIndexerExpression>
																</propertyReferenceExpression>
																<primitiveExpression value=":$in$"/>
															</binaryOperatorExpression>
															<methodInvokeExpression methodName="Join">
																<target>
																	<typeReferenceExpression type="System.String"/>
																</target>
																<parameters>
																	<primitiveExpression value="$or$"/>
																	<propertyReferenceExpression name="SelectedValues">
																		<variableReferenceExpression name="a"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
														</binaryOperatorExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement name="argumentParts">
											<init>
												<methodInvokeExpression methodName="Split">
													<target>
														<typeReferenceExpression type="Regex"/>
													</target>
													<parameters>
														<argumentReferenceExpression name="commandArgument"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[\s*,\s*]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="reportFormat">
											<init>
												<methodInvokeExpression methodName="Match">
													<target>
														<typeReferenceExpression type="Regex"/>
													</target>
													<parameters>
														<argumentReferenceExpression name="commandName"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[^Report(As(?'Format'Pdf|Image|Word|Excel))$]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="reportArgs">
											<init>
												<objectCreateExpression type="ReportArgs"/>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<propertyReferenceExpression name="Controller">
												<variableReferenceExpression name="reportArgs"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="Controller">
												<argumentReferenceExpression name="request"/>
											</propertyReferenceExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="View">
												<variableReferenceExpression name="reportArgs"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="View">
												<argumentReferenceExpression name="request"/>
											</propertyReferenceExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="FilterRaw">
												<variableReferenceExpression name="reportArgs"/>
											</propertyReferenceExpression>
											<methodInvokeExpression methodName="ToArray">
												<target>
													<variableReferenceExpression name="reportFilter"/>
												</target>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="SortExpression">
												<variableReferenceExpression name="reportArgs"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="SortExpression">
												<argumentReferenceExpression name="request"/>
											</propertyReferenceExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="TemplateName">
												<variableReferenceExpression name="reportArgs"/>
											</propertyReferenceExpression>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="argumentParts"/>
												</target>
												<indices>
													<primitiveExpression value="0"/>
												</indices>
											</arrayIndexerExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="Format">
												<variableReferenceExpression name="reportArgs"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="Value">
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Groups">
															<argumentReferenceExpression name="reportFormat"/>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="Format"/>
													</indices>
												</arrayIndexerExpression>
											</propertyReferenceExpression>
										</assignStatement>
										<variableDeclarationStatement name="reportData">
											<init>
												<methodInvokeExpression methodName="Execute">
													<target>
														<typeReferenceExpression type="ReportBase"/>
													</target>
													<parameters>
														<variableReferenceExpression name="reportArgs"/>
														<variableReferenceExpression name="a"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<propertyReferenceExpression name="ContentType">
												<propertyReferenceExpression name="Response">
													<variableReferenceExpression name="context"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="MimeType">
												<variableReferenceExpression name="reportArgs"/>
											</propertyReferenceExpression>
										</assignStatement>
										<methodInvokeExpression methodName="AddHeader">
											<target>
												<propertyReferenceExpression name="Response">
													<argumentReferenceExpression name="context"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="Content-Length"/>
												<methodInvokeExpression methodName="ToString">
													<target>
														<propertyReferenceExpression name="Length">
															<variableReferenceExpression name="reportData"/>
														</propertyReferenceExpression>
													</target>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="AddHeader">
											<target>
												<propertyReferenceExpression name="Response">
													<argumentReferenceExpression name="context"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="Content-Disposition"/>
												<stringFormatExpression>
													<xsl:attribute name="format"><![CDATA[attachment;filename={0}]]></xsl:attribute>
													<propertyReferenceExpression name="FileName">
														<variableReferenceExpression name="reportArgs"/>
													</propertyReferenceExpression>
												</stringFormatExpression>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Write">
											<target>
												<propertyReferenceExpression name="OutputStream">
													<propertyReferenceExpression name="Response">
														<variableReferenceExpression name="context"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<variableReferenceExpression name="reportData"/>
												<primitiveExpression value="0"/>
												<propertyReferenceExpression name="Length">
													<variableReferenceExpression name="reportData"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
										<methodReturnStatement/>
									</trueStatements>
								</conditionStatement>
								<comment>*** proceed to execute the action in the context of a transaction ***</comment>
								<variableDeclarationStatement name="log">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="ActionArgs"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="log"/>
									</target>
									<parameters>
										<variableReferenceExpression name="a"/>
									</parameters>
								</methodInvokeExpression>
								<variableDeclarationStatement name="tm">
									<init>
										<objectCreateExpression type="TransactionManager"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="result">
									<init>
										<methodInvokeExpression methodName="Commit">
											<target>
												<variableReferenceExpression name="tm"/>
											</target>
											<parameters>
												<variableReferenceExpression name="log"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityInequality">
												<propertyReferenceExpression name="Errors">
													<variableReferenceExpression name="result"/>
												</propertyReferenceExpression>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="GreaterThan">
												<propertyReferenceExpression name="Length">
													<propertyReferenceExpression name="Errors">
														<variableReferenceExpression name="result"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
												<primitiveExpression value="0"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="RowNotFound">
													<variableReferenceExpression name="result"/>
												</propertyReferenceExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="HttpMethod"/>
															<primitiveExpression value="PUT"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="Execute">
															<parameters>
																<argumentReferenceExpression name="request"/>
																<argumentReferenceExpression name="payload"/>
																<primitiveExpression value="Insert"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
													<falseStatements>
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="404"/>
																<primitiveExpression value="invalid_path"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Entity {0} does not exist.]]></xsl:attribute>
																</primitiveExpression>
																<methodInvokeExpression methodName="TrimLocationToIdentifier"/>
															</parameters>
														</methodInvokeExpression>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
											<falseStatements>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="500"/>
														<primitiveExpression value="method_rejected"/>
														<methodInvokeExpression methodName="Join">
															<target>
																<typeReferenceExpression type="System.String"/>
															</target>
															<parameters>
																<primitiveExpression value=" "/>
																<propertyReferenceExpression name="Errors">
																	<variableReferenceExpression name="result"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
									<falseStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="commandName"/>
													<primitiveExpression value="Insert"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<fieldReferenceExpression name="isCollection"/>
													<primitiveExpression value="false"/>
												</assignStatement>
												<assignStatement>
													<fieldReferenceExpression name="id"/>
													<methodInvokeExpression methodName="PrimaryKeyToPath"/>
												</assignStatement>
												<assignStatement>
													<fieldReferenceExpression name="view"/>
													<methodInvokeExpression methodName="DefaultView">
														<parameters>
															<primitiveExpression value="singleton"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<variableDeclarationStatement name="startWith">
													<init>
														<propertyReferenceExpression name="PathField"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNullOrEmpty">
															<variableReferenceExpression name="startWith"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="startWith"/>
															<propertyReferenceExpression name="ControllerResource"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<assignStatement>
													<propertyReferenceExpression name="LastEntity"/>
													<fieldReferenceExpression name="id"/>
												</assignStatement>
												<assignStatement>
													<propertyReferenceExpression name="RawUrl"/>
													<methodInvokeExpression methodName="ReplaceRawUrlWith">
														<parameters>
															<variableReferenceExpression name="startWith"/>
															<primitiveExpression value="false"/>
															<primitiveExpression>
																<xsl:attribute name="value"><![CDATA[{0}/{1}]]></xsl:attribute>
															</primitiveExpression>
															<variableReferenceExpression name="startWith"/>
															<fieldReferenceExpression name="id"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<methodInvokeExpression methodName="EnsurePathProperties"/>
												<comment>a resource was created</comment>
												<assignStatement>
													<propertyReferenceExpression name="StatusCode">
														<propertyReferenceExpression name="Response">
															<variableReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
													<primitiveExpression value="201"/>
												</assignStatement>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Headers">
																<propertyReferenceExpression name="Response">
																	<variableReferenceExpression name="context"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</target>
														<indices>
															<primitiveExpression value="Location"/>
														</indices>
													</arrayIndexerExpression>
													<propertyReferenceExpression name="RawUrl"/>
												</assignStatement>
												<variableDeclarationStatement name="newFilter">
													<init>
														<objectCreateExpression type="JObject"/>
													</init>
												</variableDeclarationStatement>
												<foreachStatement>
													<variable name="fvo"/>
													<target>
														<propertyReferenceExpression name="PK"/>
													</target>
													<statements>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="newFilter"/>
															</target>
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="fvo"/>
																		</propertyReferenceExpression>
																		<objectCreateExpression type="JObject">
																			<parameters>
																				<objectCreateExpression type="JProperty">
																					<parameters>
																						<primitiveExpression value="equals"/>
																						<propertyReferenceExpression name="Value">
																							<variableReferenceExpression name="fvo"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</objectCreateExpression>
																			</parameters>
																		</objectCreateExpression>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
													</statements>
												</foreachStatement>
												<assignStatement>
													<propertyReferenceExpression name="Filter">
														<argumentReferenceExpression name="request"/>
													</propertyReferenceExpression>
													<methodInvokeExpression methodName="ToFilter">
														<parameters>
															<variableReferenceExpression name="newFilter"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<assignStatement>
													<propertyReferenceExpression name="RequiresRowCount">
														<argumentReferenceExpression name="request"/>
													</propertyReferenceExpression>
													<primitiveExpression value="false"/>
												</assignStatement>
												<assignStatement>
													<propertyReferenceExpression name="PageSize">
														<argumentReferenceExpression name="request"/>
													</propertyReferenceExpression>
													<primitiveExpression value="1"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<propertyReferenceExpression name="Action"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="actionResult">
													<init>
														<objectCreateExpression type="JObject"/>
													</init>
												</variableDeclarationStatement>
												<foreachStatement>
													<variable name="fvo"/>
													<target>
														<propertyReferenceExpression name="Values">
															<variableReferenceExpression name="result"/>
														</propertyReferenceExpression>
													</target>
													<statements>
														<variableDeclarationStatement name="v">
															<init>
																<propertyReferenceExpression name="Value">
																	<variableReferenceExpression name="fvo"/>
																</propertyReferenceExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IsTypeOf">
																	<variableReferenceExpression name="v"/>
																	<typeReferenceExpression type="DateTime"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="v"/>
																	<methodInvokeExpression methodName="ToString">
																		<target>
																			<castExpression targetType="DateTime">
																				<variableReferenceExpression name="v"/>
																			</castExpression>
																		</target>
																		<parameters>
																			<primitiveExpression value="o"/>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<methodInvokeExpression methodName="SetPropertyValue">
															<parameters>
																<variableReferenceExpression name="actionResult"/>
																<propertyReferenceExpression name="Name">
																	<variableReferenceExpression name="fvo"/>
																</propertyReferenceExpression>
																<variableReferenceExpression name="v"/>
															</parameters>
														</methodInvokeExpression>
													</statements>
												</foreachStatement>
												<variableDeclarationStatement name="resultSet">
													<init>
														<castExpression targetType="DataTable">
															<arrayIndexerExpression>
																<target>
																	<propertyReferenceExpression name="Items">
																		<propertyReferenceExpression name="Current">
																			<typeReferenceExpression type="HttpContext"/>
																		</propertyReferenceExpression>
																	</propertyReferenceExpression>
																</target>
																<indices>
																	<primitiveExpression value="BusinessRules_ResultSet"/>
																</indices>
															</arrayIndexerExpression>
														</castExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<variableReferenceExpression name="resultSet"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="data">
															<init>
																<objectCreateExpression type="JArray"/>
															</init>
														</variableDeclarationStatement>
														<foreachStatement>
															<variable type="DataRow" name="row" var="false"/>
															<target>
																<propertyReferenceExpression name="Rows">
																	<variableReferenceExpression name="resultSet"/>
																</propertyReferenceExpression>
															</target>
															<statements>
																<variableDeclarationStatement name="item">
																	<init>
																		<objectCreateExpression type="JObject"/>
																	</init>
																</variableDeclarationStatement>
																<forStatement>
																	<variable name="i">
																		<init>
																			<primitiveExpression value="0"/>
																		</init>
																	</variable>
																	<test>
																		<binaryOperatorExpression operator="LessThan">
																			<variableReferenceExpression name="i"/>
																			<propertyReferenceExpression name="Length">
																				<propertyReferenceExpression name="ItemArray">
																					<variableReferenceExpression name="row"/>
																				</propertyReferenceExpression>
																			</propertyReferenceExpression>
																		</binaryOperatorExpression>
																	</test>
																	<increment>
																		<variableReferenceExpression name="i"/>
																	</increment>
																	<statements>
																		<variableDeclarationStatement name="propName">
																			<init>
																				<methodInvokeExpression methodName="ToApiFieldName">
																					<parameters>
																						<propertyReferenceExpression name="ColumnName">
																							<arrayIndexerExpression>
																								<target>
																									<propertyReferenceExpression name="Columns">
																										<variableReferenceExpression name="resultSet"/>
																									</propertyReferenceExpression>
																								</target>
																								<indices>
																									<variableReferenceExpression name="i"/>
																								</indices>
																							</arrayIndexerExpression>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</init>
																		</variableDeclarationStatement>
																		<variableDeclarationStatement name="v">
																			<init>
																				<arrayIndexerExpression>
																					<target>
																						<propertyReferenceExpression name="ItemArray">
																							<variableReferenceExpression name="row"/>
																						</propertyReferenceExpression>
																					</target>
																					<indices>
																						<variableReferenceExpression name="i"/>
																					</indices>
																				</arrayIndexerExpression>
																			</init>
																		</variableDeclarationStatement>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="IsTypeOf">
																					<variableReferenceExpression name="v"/>
																					<typeReferenceExpression type="DateTime"/>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<variableReferenceExpression name="v"/>
																					<methodInvokeExpression methodName="ToString">
																						<target>
																							<castExpression targetType="DateTime">
																								<variableReferenceExpression name="v"/>
																							</castExpression>
																						</target>
																						<parameters>
																							<primitiveExpression value="o"/>
																						</parameters>
																					</methodInvokeExpression>
																				</assignStatement>
																			</trueStatements>
																		</conditionStatement>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="IdentityEquality">
																					<variableReferenceExpression name="v"/>
																					<primitiveExpression value="null"/>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<arrayIndexerExpression>
																						<target>
																							<variableReferenceExpression name="item"/>
																						</target>
																						<indices>
																							<variableReferenceExpression name="propName"/>
																						</indices>
																					</arrayIndexerExpression>
																					<primitiveExpression value="null"/>
																				</assignStatement>
																			</trueStatements>
																			<falseStatements>
																				<assignStatement>
																					<arrayIndexerExpression>
																						<target>
																							<variableReferenceExpression name="item"/>
																						</target>
																						<indices>
																							<variableReferenceExpression name="propName"/>
																						</indices>
																					</arrayIndexerExpression>
																					<methodInvokeExpression methodName="FromObject">
																						<target>
																							<typeReferenceExpression type="JToken"/>
																						</target>
																						<parameters>
																							<variableReferenceExpression name="v"/>
																						</parameters>
																					</methodInvokeExpression>
																				</assignStatement>
																			</falseStatements>
																		</conditionStatement>
																	</statements>
																</forStatement>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="data"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="item"/>
																	</parameters>
																</methodInvokeExpression>
															</statements>
														</foreachStatement>
														<variableDeclarationStatement name="resultIsCollection">
															<init>
																<primitiveExpression value="false"/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<propertyReferenceExpression name="IsCollection"/>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="resultIsCollection"/>
																	<binaryOperatorExpression operator="ValueEquality">
																		<propertyReferenceExpression name="Count">
																			<propertyReferenceExpression name="PK"/>
																		</propertyReferenceExpression>
																		<primitiveExpression value="0"/>
																	</binaryOperatorExpression>
																</assignStatement>
																<foreachStatement>
																	<variable name="f"/>
																	<target>
																		<propertyReferenceExpression name="PK"/>
																	</target>
																	<statements>
																		<conditionStatement>
																			<condition>
																				<methodInvokeExpression methodName="Contains">
																					<target>
																						<propertyReferenceExpression name="Columns">
																							<variableReferenceExpression name="resultSet"/>
																						</propertyReferenceExpression>
																					</target>
																					<parameters>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="f"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<variableReferenceExpression name="resultIsCollection"/>
																					<primitiveExpression value="true"/>
																				</assignStatement>
																			</trueStatements>
																		</conditionStatement>
																	</statements>
																</foreachStatement>
																<conditionStatement>
																	<condition>
																		<variableReferenceExpression name="resultIsCollection"/>
																	</condition>
																	<trueStatements>
																		<foreachStatement>
																			<variable type="DataColumn" name="c" var="false"/>
																			<target>
																				<propertyReferenceExpression name="Columns">
																					<variableReferenceExpression name="resultSet"/>
																				</propertyReferenceExpression>
																			</target>
																			<statements>
																				<conditionStatement>
																					<condition>
																						<unaryOperatorExpression operator="Not">
																							<methodInvokeExpression methodName="ContainsKey">
																								<target>
																									<propertyReferenceExpression name="FieldMap"/>
																								</target>
																								<parameters>
																									<propertyReferenceExpression name="ColumnName">
																										<variableReferenceExpression name="c"/>
																									</propertyReferenceExpression>
																								</parameters>
																							</methodInvokeExpression>
																						</unaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<assignStatement>
																							<variableReferenceExpression name="resultIsCollection"/>
																							<primitiveExpression value="false"/>
																						</assignStatement>
																						<breakStatement/>
																					</trueStatements>
																				</conditionStatement>
																			</statements>
																		</foreachStatement>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<variableReferenceExpression name="resultIsCollection"/>
															</condition>
															<trueStatements>
																<assignStatement>
																	<fieldReferenceExpression name="result"/>
																	<variableReferenceExpression name="data"/>
																</assignStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="GreaterThan">
																			<propertyReferenceExpression name="Count">
																				<variableReferenceExpression name="data"/>
																			</propertyReferenceExpression>
																			<primitiveExpression value="0"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<variableDeclarationStatement name="nullValues">
																			<init>
																				<objectCreateExpression type="List">
																					<typeArguments>
																						<typeReference type="System.String"/>
																					</typeArguments>
																				</objectCreateExpression>
																			</init>
																		</variableDeclarationStatement>
																		<foreachStatement>
																			<variable name="f"/>
																			<target>
																				<propertyReferenceExpression name="FieldMap"/>
																			</target>
																			<statements>
																				<variableDeclarationStatement name="fieldName">
																					<init>
																						<methodInvokeExpression methodName="ToApiFieldName">
																							<parameters>
																								<methodInvokeExpression methodName="GetAttribute">
																									<target>
																										<propertyReferenceExpression name="Value">
																											<variableReferenceExpression name="f"/>
																										</propertyReferenceExpression>
																									</target>
																									<parameters>
																										<primitiveExpression value="name"/>
																										<stringEmptyExpression/>
																									</parameters>
																								</methodInvokeExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</init>
																				</variableDeclarationStatement>
																				<conditionStatement>
																					<condition>
																						<unaryOperatorExpression operator="Not">
																							<methodInvokeExpression methodName="ContainsKey">
																								<target>
																									<castExpression targetType="JObject">
																										<arrayIndexerExpression>
																											<target>
																												<variableReferenceExpression name="data"/>
																											</target>
																											<indices>
																												<primitiveExpression value="0"/>
																											</indices>
																										</arrayIndexerExpression>
																									</castExpression>
																								</target>
																								<parameters>
																									<variableReferenceExpression name="fieldName"/>
																								</parameters>
																							</methodInvokeExpression>
																						</unaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<methodInvokeExpression methodName="Add">
																							<target>
																								<variableReferenceExpression name="nullValues"/>
																							</target>
																							<parameters>
																								<variableReferenceExpression name="fieldName"/>
																							</parameters>
																						</methodInvokeExpression>
																					</trueStatements>
																				</conditionStatement>
																			</statements>
																		</foreachStatement>
																		<foreachStatement>
																			<variable name="obj"/>
																			<target>
																				<variableReferenceExpression name="data"/>
																			</target>
																			<statements>
																				<foreachStatement>
																					<variable name="fieldName"/>
																					<target>
																						<variableReferenceExpression name="nullValues"/>
																					</target>
																					<statements>
																						<assignStatement>
																							<arrayIndexerExpression>
																								<target>
																									<variableReferenceExpression name="obj"/>
																								</target>
																								<indices>
																									<variableReferenceExpression name="fieldName"/>
																								</indices>
																							</arrayIndexerExpression>
																							<primitiveExpression value="null"/>
																						</assignStatement>
																					</statements>
																				</foreachStatement>
																			</statements>
																		</foreachStatement>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="ValueEquality">
																				<propertyReferenceExpression name="Count">
																					<variableReferenceExpression name="actionResult"/>
																				</propertyReferenceExpression>
																				<primitiveExpression value="0"/>
																			</binaryOperatorExpression>
																			<binaryOperatorExpression operator="ValueEquality">
																				<propertyReferenceExpression name="Count">
																					<variableReferenceExpression name="data"/>
																				</propertyReferenceExpression>
																				<primitiveExpression value="1"/>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<foreachStatement>
																			<variable type="JProperty" name="p" var="false"/>
																			<target>
																				<arrayIndexerExpression>
																					<target>
																						<variableReferenceExpression name="data"/>
																					</target>
																					<indices>
																						<primitiveExpression value="0"/>
																					</indices>
																				</arrayIndexerExpression>
																			</target>
																			<statements>
																				<methodInvokeExpression methodName="SetPropertyValue">
																					<parameters>
																						<variableReferenceExpression name="actionResult"/>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="p"/>
																						</propertyReferenceExpression>
																						<propertyReferenceExpression name="Value">
																							<variableReferenceExpression name="p"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</statements>
																		</foreachStatement>
																	</trueStatements>
																	<falseStatements>
																		<assignStatement>
																			<arrayIndexerExpression>
																				<target>
																					<variableReferenceExpression name="actionResult"/>
																				</target>
																				<indices>
																					<methodInvokeExpression methodName="ToApiName">
																						<parameters>
																							<primitiveExpression value="resultSetKey"/>
																						</parameters>
																					</methodInvokeExpression>
																				</indices>
																			</arrayIndexerExpression>
																			<variableReferenceExpression name="data"/>
																		</assignStatement>
																	</falseStatements>
																</conditionStatement>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="GreaterThan">
															<propertyReferenceExpression name="Count">
																<variableReferenceExpression name="actionResult"/>
															</propertyReferenceExpression>
															<primitiveExpression value="0"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<fieldReferenceExpression name="result"/>
															<variableReferenceExpression name="actionResult"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="ExecuteFiles">
											<parameters>
												<argumentReferenceExpression name="request"/>
												<argumentReferenceExpression name="payload"/>
												<argumentReferenceExpression name="commandName"/>
												<argumentReferenceExpression name="commandArgument"/>
											</parameters>
										</methodInvokeExpression>
									</falseStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method ValidateActionParameters(JObject, List<FieldValue>) -->
						<memberMethod name="ValidateActionParameters">
							<attributes family="true" final="true"/>
							<parameters>
								<parameter type="JObject" name="payload"/>
								<parameter type="List" name="values">
									<typeArguments>
										<typeReference type="FieldValue"/>
									</typeArguments>
								</parameter>
							</parameters>
							<statements>
								<variableDeclarationStatement name="parameters">
									<init>
										<arrayIndexerExpression>
											<target>
												<argumentReferenceExpression name="payload"/>
											</target>
											<indices>
												<propertyReferenceExpression name="ParametersKey"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="parameters"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueInequality">
													<propertyReferenceExpression name="Type">
														<variableReferenceExpression name="parameters"/>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="Object">
														<typeReferenceExpression type="JTokenType"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="400"/>
														<primitiveExpression value="true"/>
														<primitiveExpression value="invalid_parameters"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Invalid definition of '{0}'. An object is expected.]]></xsl:attribute>
														</primitiveExpression>
														<propertyReferenceExpression name="ParametersKey"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<propertyReferenceExpression name="Action"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="ValidateActionParameters">
											<parameters>
												<argumentReferenceExpression name="payload"/>
												<castExpression targetType="JObject">
													<variableReferenceExpression name="parameters"/>
												</castExpression>
												<argumentReferenceExpression name="values"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method ValidateActionParameters(JObject, List<FieldValue>) -->
						<memberMethod name="ValidateActionParameters">
							<attributes family="true"/>
							<parameters>
								<parameter type="JObject" name="payload"/>
								<parameter type="JObject" name="parameters"/>
								<parameter type="List" name="values">
									<typeArguments>
										<typeReference type="FieldValue"/>
									</typeArguments>
								</parameter>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<argumentReferenceExpression name="parameters"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<comment>enumerate parameters with the optional validation against the confirmation data controller</comment>
										<foreachStatement>
											<variable name="p"/>
											<target>
												<methodInvokeExpression methodName="Properties">
													<target>
														<argumentReferenceExpression name="parameters"/>
													</target>
												</methodInvokeExpression>
											</target>
											<statements>
												<variableDeclarationStatement type="System.String" name="dataType" var="false">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<methodInvokeExpression methodName="Add">
													<target>
														<argumentReferenceExpression name="values"/>
													</target>
													<parameters>
														<objectCreateExpression type="FieldValue">
															<parameters>
																<binaryOperatorExpression operator="Add">
																	<primitiveExpression value="Parameters_"/>
																	<methodInvokeExpression methodName="ToDataFieldName">
																		<parameters>
																			<propertyReferenceExpression name="Name">
																				<variableReferenceExpression name="p"/>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</binaryOperatorExpression>
																<methodInvokeExpression methodName="GetPropertyValue">
																	<parameters>
																		<argumentReferenceExpression name="parameters"/>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="p"/>
																		</propertyReferenceExpression>
																		<variableReferenceExpression name="dataType"/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</objectCreateExpression>
													</parameters>
												</methodInvokeExpression>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method ValidateActionCollection(JObject, List<FieldValue>, List<string>) -->
						<memberMethod name="ValidateActionCollection">
							<attributes family="true"/>
							<parameters>
								<parameter type="JObject" name="payload"/>
								<parameter type="List" name="values">
									<typeArguments>
										<typeReference type="FieldValue"/>
									</typeArguments>
								</parameter>
								<parameter type="List" name="selectedValues">
									<typeArguments>
										<typeReference type="System.String"/>
									</typeArguments>
								</parameter>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<propertyReferenceExpression name="IsCollection"/>
											<binaryOperatorExpression operator="IdentityInequality">
												<propertyReferenceExpression name="Action"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="collection">
											<init>
												<arrayIndexerExpression>
													<target>
														<argumentReferenceExpression name="payload"/>
													</target>
													<indices>
														<propertyReferenceExpression name="CollectionKey"/>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IdentityInequality">
														<variableReferenceExpression name="collection"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="ValueInequality">
														<propertyReferenceExpression name="Type">
															<variableReferenceExpression name="collection"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="Null">
															<typeReferenceExpression type="JTokenType"/>
														</propertyReferenceExpression>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueInequality">
															<propertyReferenceExpression name="Type">
																<variableReferenceExpression name="collection"/>
															</propertyReferenceExpression>
															<propertyReferenceExpression name="Array">
																<typeReferenceExpression type="JTokenType"/>
															</propertyReferenceExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="ThrowError">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="400"/>
																<primitiveExpression value="true"/>
																<primitiveExpression value="invalid_argument"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Invalid definition of '{0}'. An array is expected.]]></xsl:attribute>
																</primitiveExpression>
																<propertyReferenceExpression name="CollectionKey"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<foreachStatement>
													<variable name="item"/>
													<target>
														<variableReferenceExpression name="collection"/>
													</target>
													<statements>
														<variableDeclarationStatement name="itemKey">
															<init>
																<objectCreateExpression type="List">
																	<typeArguments>
																		<typeReference type="System.String"/>
																	</typeArguments>
																</objectCreateExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IsTypeOf">
																	<variableReferenceExpression name="item"/>
																	<typeReferenceExpression type="JObject"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<foreachStatement>
																	<variable name="p"/>
																	<target>
																		<methodInvokeExpression methodName="Properties">
																			<target>
																				<castExpression targetType="JObject">
																					<variableReferenceExpression name="item"/>
																				</castExpression>
																			</target>
																		</methodInvokeExpression>
																	</target>
																	<statements>
																		<variableDeclarationStatement type="XPathNavigator" name="fieldNav" var="false">
																			<init>
																				<primitiveExpression value="null"/>
																			</init>
																		</variableDeclarationStatement>
																		<conditionStatement>
																			<condition>
																				<methodInvokeExpression methodName="TryGetValue">
																					<target>
																						<fieldReferenceExpression name="fieldMap"/>
																					</target>
																					<parameters>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="p"/>
																						</propertyReferenceExpression>
																						<directionExpression direction="Out">
																							<variableReferenceExpression name="fieldNav"/>
																						</directionExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</condition>
																			<trueStatements>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="ValueEquality">
																							<methodInvokeExpression methodName="GetAttribute">
																								<target>
																									<variableReferenceExpression name="fieldNav"/>
																								</target>
																								<parameters>
																									<primitiveExpression value="isPrimaryKey"/>
																									<stringEmptyExpression/>
																								</parameters>
																							</methodInvokeExpression>
																							<primitiveExpression value="true" convertTo="String"/>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<variableDeclarationStatement name="fieldName">
																							<init>
																								<methodInvokeExpression methodName="GetAttribute">
																									<target>
																										<variableReferenceExpression name="fieldNav"/>
																									</target>
																									<parameters>
																										<primitiveExpression value="name"/>
																										<stringEmptyExpression/>
																									</parameters>
																								</methodInvokeExpression>
																							</init>
																						</variableDeclarationStatement>
																						<variableDeclarationStatement name="keyValue">
																							<init>
																								<methodInvokeExpression methodName="GetPropertyValue">
																									<parameters>
																										<castExpression targetType="JObject">
																											<variableReferenceExpression name="item"/>
																										</castExpression>
																										<propertyReferenceExpression name="Name">
																											<variableReferenceExpression name="p"/>
																										</propertyReferenceExpression>
																										<methodInvokeExpression methodName="GetAttribute">
																											<target>
																												<variableReferenceExpression name="fieldNav"/>
																											</target>
																											<parameters>
																												<primitiveExpression value="type"/>
																												<stringEmptyExpression/>
																											</parameters>
																										</methodInvokeExpression>
																									</parameters>
																								</methodInvokeExpression>
																							</init>
																						</variableDeclarationStatement>
																						<methodInvokeExpression methodName="Add">
																							<target>
																								<variableReferenceExpression name="itemKey"/>
																							</target>
																							<parameters>
																								<convertExpression to="String">
																									<variableReferenceExpression name="keyValue"/>
																								</convertExpression>
																							</parameters>
																						</methodInvokeExpression>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="IdentityEquality">
																									<arrayIndexerExpression>
																										<target>
																											<argumentReferenceExpression name="payload"/>
																										</target>
																										<indices>
																											<propertyReferenceExpression name="Name">
																												<variableReferenceExpression name="p"/>
																											</propertyReferenceExpression>
																										</indices>
																									</arrayIndexerExpression>
																									<primitiveExpression value="null"/>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<comment>copy the first selected value to the values array</comment>
																								<methodInvokeExpression methodName="SetPropertyValue">
																									<parameters>
																										<argumentReferenceExpression name="payload"/>
																										<propertyReferenceExpression name="Name">
																											<variableReferenceExpression name="p"/>
																										</propertyReferenceExpression>
																										<variableReferenceExpression name="keyValue"/>
																									</parameters>
																								</methodInvokeExpression>
																								<foreachStatement>
																									<variable name="fvo"/>
																									<target>
																										<variableReferenceExpression name="values"/>
																									</target>
																									<statements>
																										<conditionStatement>
																											<condition>
																												<binaryOperatorExpression operator="ValueEquality">
																													<propertyReferenceExpression name="Name">
																														<variableReferenceExpression name="fvo"/>
																													</propertyReferenceExpression>
																													<variableReferenceExpression name="fieldName"/>
																												</binaryOperatorExpression>
																											</condition>
																											<trueStatements>
																												<assignStatement>
																													<propertyReferenceExpression name="Value">
																														<variableReferenceExpression name="fvo"/>
																													</propertyReferenceExpression>
																													<variableReferenceExpression name="keyValue"/>
																												</assignStatement>
																												<breakStatement/>
																											</trueStatements>
																										</conditionStatement>
																									</statements>
																								</foreachStatement>
																							</trueStatements>
																						</conditionStatement>
																					</trueStatements>
																					<falseStatements>
																						<methodInvokeExpression methodName="ThrowError">
																							<target>
																								<typeReferenceExpression type="RESTfulResource"/>
																							</target>
																							<parameters>
																								<primitiveExpression value="400"/>
																								<primitiveExpression value="true"/>
																								<primitiveExpression value="invalid_argument"/>
																								<primitiveExpression>
																									<xsl:attribute name="value"><![CDATA[Field '{0}' is not allowed in the '{1}' item.]]></xsl:attribute>
																								</primitiveExpression>
																								<propertyReferenceExpression name="Name">
																									<variableReferenceExpression name="p"/>
																								</propertyReferenceExpression>
																								<propertyReferenceExpression name="CollectionKey"/>
																							</parameters>
																						</methodInvokeExpression>
																					</falseStatements>
																				</conditionStatement>
																			</trueStatements>
																			<falseStatements>
																				<methodInvokeExpression methodName="ThrowError">
																					<target>
																						<typeReferenceExpression type="RESTfulResource"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="400"/>
																						<primitiveExpression value="true"/>
																						<primitiveExpression value="invalid_argument"/>
																						<primitiveExpression>
																							<xsl:attribute name="value"><![CDATA[Unexpected field '{0}' is specified in the '{1}' item.]]></xsl:attribute>
																						</primitiveExpression>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="p"/>
																						</propertyReferenceExpression>
																						<propertyReferenceExpression name="CollectionKey"/>
																					</parameters>
																				</methodInvokeExpression>
																			</falseStatements>
																		</conditionStatement>
																	</statements>
																</foreachStatement>
															</trueStatements>
															<falseStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="400"/>
																		<primitiveExpression value="true"/>
																		<primitiveExpression value="invalid_argument"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Only object items are allowed in the '{0}'.]]></xsl:attribute>
																		</primitiveExpression>
																		<propertyReferenceExpression name="CollectionKey"/>
																	</parameters>
																</methodInvokeExpression>
															</falseStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="LessThan">
																	<propertyReferenceExpression name="Count">
																		<variableReferenceExpression name="itemKey"/>
																	</propertyReferenceExpression>
																	<propertyReferenceExpression name="Count">
																		<propertyReferenceExpression name="PK"/>
																	</propertyReferenceExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="ThrowError">
																	<target>
																		<typeReferenceExpression type="RESTfulResource"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="400"/>
																		<primitiveExpression value="true"/>
																		<primitiveExpression value="invalid_argument"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[Missing fields in the definition of an item in the '{0}'.]]></xsl:attribute>
																		</primitiveExpression>
																		<propertyReferenceExpression name="CollectionKey"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<argumentReferenceExpression name="selectedValues"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="Join">
																	<target>
																		<typeReferenceExpression type="System.String"/>
																	</target>
																	<parameters>
																		<primitiveExpression value=","/>
																		<variableReferenceExpression name="itemKey"/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</statements>
												</foreachStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method ValidateActionArguments(JObject, ActionArgs) -->
						<memberMethod name="ValidateActionArguments">
							<attributes family="true" />
							<parameters>
								<parameter type="JObject" name="payload"/>
								<parameter type="ActionArgs" name="args"/>
							</parameters>
						</memberMethod>
						<!-- method ExecuteFiles(PageRequest, JObject, string, string) -->
						<memberMethod name="ExecuteFiles">
							<attributes family="true"/>
							<parameters>
								<parameter type="PageRequest" name="request"/>
								<parameter type="JObject" name="payload"/>
								<parameter type="System.String" name="commandName"/>
								<parameter type="System.String" name="commandArgument"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="ValueEquality">
												<argumentReferenceExpression name="commandName"/>
												<primitiveExpression value="Insert"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="ValueEquality">
												<argumentReferenceExpression name="commandName"/>
												<primitiveExpression value="Update"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="files">
											<init>
												<propertyReferenceExpression name="Files">
													<propertyReferenceExpression name="Request">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<foreachStatement>
											<variable type="System.String" name="key" var="false"/>
											<target>
												<propertyReferenceExpression name="Keys">
													<variableReferenceExpression name="files"/>
												</propertyReferenceExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNotNullOrEmpty">
															<variableReferenceExpression name="key"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="f">
															<init>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="files"/>
																	</target>
																	<indices>
																		<variableReferenceExpression name="key"/>
																	</indices>
																</arrayIndexerExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="blobFieldName">
															<init>
																<variableReferenceExpression name="key"/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<propertyReferenceExpression name="PathField"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="blobFieldName"/>
																	<propertyReferenceExpression name="PathField"/>
																</assignStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityInequality">
																			<propertyReferenceExpression name="HttpMethod"/>
																			<primitiveExpression value="PUT"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="invalid_method"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Method {0} is not allowed for the BLOB resource.]]></xsl:attribute>
																				</primitiveExpression>
																				<propertyReferenceExpression name="HttpMethod"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<variableDeclarationStatement type="XPathNavigator" name="blobField" var="false">
															<init>
																<primitiveExpression value="null"/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="TryGetValue">
																	<target>
																		<fieldReferenceExpression name="fieldMap"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="blobFieldName"/>
																		<directionExpression direction="Out">
																			<variableReferenceExpression name="blobField"/>
																		</directionExpression>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement name="data">
																	<init>
																		<arrayCreateExpression>
																			<createType type="System.Byte"/>
																			<sizeExpression>
																				<propertyReferenceExpression name="Length">
																					<propertyReferenceExpression name="InputStream">
																						<variableReferenceExpression name="f"/>
																					</propertyReferenceExpression>
																				</propertyReferenceExpression>
																			</sizeExpression>
																		</arrayCreateExpression>
																	</init>
																</variableDeclarationStatement>
																<methodInvokeExpression methodName="Read">
																	<target>
																		<propertyReferenceExpression name="InputStream">
																			<variableReferenceExpression name="f"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="data"/>
																		<primitiveExpression value="0"/>
																		<propertyReferenceExpression name="Length">
																			<variableReferenceExpression name="data"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
																<methodInvokeExpression methodName="Write">
																	<target>
																		<typeReferenceExpression type="Blob"/>
																	</target>
																	<parameters>
																		<methodInvokeExpression methodName="GetAttribute">
																			<target>
																				<variableReferenceExpression name="blobField"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="onDemandHandler"/>
																				<stringEmptyExpression/>
																			</parameters>
																		</methodInvokeExpression>
																		<methodInvokeExpression methodName="PrimaryKeyToPath"/>
																		<propertyReferenceExpression name="FileName">
																			<variableReferenceExpression name="f"/>
																		</propertyReferenceExpression>
																		<propertyReferenceExpression name="ContentType">
																			<variableReferenceExpression name="f"/>
																		</propertyReferenceExpression>
																		<variableReferenceExpression name="data"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method FindAction(string) -->
						<memberMethod returnType="XPathNavigator" name="FindAction">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="action"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="FindAction">
										<parameters>
											<argumentReferenceExpression name="action"/>
											<primitiveExpression value="true"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method FindAction(string, bool) -->
						<memberMethod returnType="XPathNavigator" name="FindAction">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="action"/>
								<parameter type="System.Boolean" name="checkConstraints"/>
							</parameters>
							<statements>
								<foreachStatement>
									<variable name="match"/>
									<target>
										<methodInvokeExpression methodName="EnumerateActions">
											<parameters>
												<argumentReferenceExpression name="action"/>
												<primitiveExpression value="1"/>
												<argumentReferenceExpression name="checkConstraints"/>
											</parameters>
										</methodInvokeExpression>
									</target>
									<statements>
										<methodReturnStatement>
											<propertyReferenceExpression name="Value">
												<variableReferenceExpression name="match"/>
											</propertyReferenceExpression>
										</methodReturnStatement>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<primitiveExpression value="null"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method EnumerateActions(string, int, bool) -->
						<memberMethod returnType="SimpleConfigDictionary" name="EnumerateActions">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="action"/>
								<parameter type="System.Int32" name="limit"/>
								<parameter type="System.Boolean" name="checkConstraints"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="result">
									<init>
										<objectCreateExpression type="SimpleConfigDictionary"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="saveView">
									<init>
										<fieldReferenceExpression name="view"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<fieldReferenceExpression name="view"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<fieldReferenceExpression name="isCollection"/>
											</condition>
											<trueStatements>
												<assignStatement>
													<fieldReferenceExpression name="view"/>
													<methodInvokeExpression methodName="DefaultView">
														<parameters>
															<primitiveExpression value="collection"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<fieldReferenceExpression name="view"/>
													<methodInvokeExpression methodName="DefaultView">
														<parameters>
															<primitiveExpression value="singleton"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<argumentReferenceExpression name="action"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<argumentReferenceExpression name="action"/>
										</target>
										<parameters>
											<primitiveExpression value="-"/>
											<stringEmptyExpression/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<variableDeclarationStatement name="iterator">
									<init>
										<methodInvokeExpression methodName="Select">
											<target>
												<propertyReferenceExpression name="Config"/>
											</target>
											<parameters>
												<primitiveExpression value="/c:dataController/c:actions/c:actionGroup/c:action"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<whileStatement>
									<test>
										<methodInvokeExpression methodName="MoveNext">
											<target>
												<variableReferenceExpression name="iterator"/>
											</target>
										</methodInvokeExpression>
									</test>
									<statements>
										<variableDeclarationStatement name="actionNav">
											<init>
												<propertyReferenceExpression name="Current">
													<variableReferenceExpression name="iterator"/>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="id">
											<init>
												<methodInvokeExpression methodName="GetAttribute">
													<target>
														<variableReferenceExpression name="actionNav"/>
													</target>
													<parameters>
														<primitiveExpression value="id"/>
														<stringEmptyExpression/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="commandName">
											<init>
												<methodInvokeExpression methodName="GetAttribute">
													<target>
														<variableReferenceExpression name="actionNav"/>
													</target>
													<parameters>
														<primitiveExpression value="commandName"/>
														<stringEmptyExpression/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="isMatch">
											<init>
												<primitiveExpression value="false"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanOr">
													<methodInvokeExpression methodName="Equals">
														<target>
															<variableReferenceExpression name="id"/>
														</target>
														<parameters>
															<argumentReferenceExpression name="action"/>
															<propertyReferenceExpression name="OrdinalIgnoreCase">
																<typeReferenceExpression type="StringComparison"/>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
													<binaryOperatorExpression operator="BooleanOr">
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="ValueEquality">
																<argumentReferenceExpression name="limit"/>
																<primitiveExpression value="1"/>
															</binaryOperatorExpression>
															<methodInvokeExpression methodName="Equals">
																<target>
																	<variableReferenceExpression name="commandName"/>
																</target>
																<parameters>
																	<argumentReferenceExpression name="action"/>
																	<propertyReferenceExpression name="OrdinalIgnoreCase">
																		<typeReferenceExpression type="StringComparison"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
														</binaryOperatorExpression>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="ValueEquality">
																<argumentReferenceExpression name="limit"/>
																<primitiveExpression value="-1"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="BooleanAnd">
																<methodInvokeExpression methodName="StartsWith">
																	<target>
																		<variableReferenceExpression name="commandName"/>
																	</target>
																	<parameters>
																		<argumentReferenceExpression name="action"/>
																		<propertyReferenceExpression name="OrdinalIgnoreCase">
																			<typeReferenceExpression type="StringComparison"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
																<unaryOperatorExpression operator="Not">
																	<methodInvokeExpression methodName="IsMatch">
																		<target>
																			<typeReferenceExpression type="Regex"/>
																		</target>
																		<parameters>
																			<argumentReferenceExpression name="id"/>
																			<primitiveExpression>
																				<xsl:attribute name="value"><![CDATA[^a\d+$]]></xsl:attribute>
																			</primitiveExpression>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<argumentReferenceExpression name="checkConstraints"/>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="whenView">
															<init>
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<variableReferenceExpression name="actionNav"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="whenView"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="whenKeySelected">
															<init>
																<methodInvokeExpression methodName="GetAttribute">
																	<target>
																		<variableReferenceExpression name="actionNav"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="whenKeySelected"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanOr">
																	<unaryOperatorExpression operator="IsNullOrEmpty">
																		<variableReferenceExpression name="whenView"/>
																	</unaryOperatorExpression>
																	<methodInvokeExpression methodName="IsMatch">
																		<target>
																			<objectCreateExpression type="Regex">
																				<parameters>
																					<variableReferenceExpression name="whenView"/>
																				</parameters>
																			</objectCreateExpression>
																		</target>
																		<parameters>
																			<fieldReferenceExpression name="view"/>
																		</parameters>
																	</methodInvokeExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanOr">
																			<unaryOperatorExpression operator="IsNullOrEmpty">
																				<variableReferenceExpression name="whenKeySelected"/>
																			</unaryOperatorExpression>
																			<binaryOperatorExpression operator="BooleanOr">
																				<binaryOperatorExpression operator="BooleanAnd">
																					<binaryOperatorExpression operator="ValueEquality">
																						<variableReferenceExpression name="whenKeySelected"/>
																						<primitiveExpression value="false" convertTo="String"/>
																					</binaryOperatorExpression>
																					<fieldReferenceExpression name="isCollection"/>
																				</binaryOperatorExpression>
																				<binaryOperatorExpression operator="BooleanAnd">
																					<binaryOperatorExpression operator="ValueEquality">
																						<variableReferenceExpression name="whenKeySelected"/>
																						<primitiveExpression value="true" convertTo="String"/>
																					</binaryOperatorExpression>
																					<unaryOperatorExpression operator="Not">
																						<fieldReferenceExpression name="isCollection"/>
																					</unaryOperatorExpression>
																				</binaryOperatorExpression>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="isMatch"/>
																			<primitiveExpression value="true"/>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
													<falseStatements>
														<assignStatement>
															<variableReferenceExpression name="isMatch"/>
															<primitiveExpression value="true"/>
														</assignStatement>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<variableReferenceExpression name="isMatch"/>
											</condition>
											<trueStatements>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="result"/>
														</target>
														<indices>
															<methodInvokeExpression methodName="ToPathName">
																<parameters>
																	<argumentReferenceExpression name="id"/>
																</parameters>
															</methodInvokeExpression>
														</indices>
													</arrayIndexerExpression>
													<methodInvokeExpression methodName="Clone">
														<target>
															<variableReferenceExpression name="actionNav"/>
														</target>
													</methodInvokeExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="Count">
																<variableReferenceExpression name="result"/>
															</propertyReferenceExpression>
															<argumentReferenceExpression name="limit"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<breakStatement/>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</whileStatement>
								<assignStatement>
									<fieldReferenceExpression name="view"/>
									<variableReferenceExpression name="saveView"/>
								</assignStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method PrimaryKeyToPath() -->
						<memberMethod returnType="System.String" name="PrimaryKeyToPath">
							<attributes public="true" final="true"/>
							<statements>
								<variableDeclarationStatement name="pkValues">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable name="fvo"/>
									<target>
										<propertyReferenceExpression name="PK"/>
									</target>
									<statements>
										<variableDeclarationStatement name="v">
											<init>
												<propertyReferenceExpression name="Value">
													<variableReferenceExpression name="fvo"/>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="v"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="pkValues"/>
													</target>
													<parameters>
														<methodInvokeExpression methodName="ToString">
															<target>
																<variableReferenceExpression name="v"/>
															</target>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Join">
										<target>
											<typeReferenceExpression type="System.String"/>
										</target>
										<parameters>
											<primitiveExpression value="_"/>
											<variableReferenceExpression name="pkValues"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method PrimaryKeyToFieldNames() -->
						<memberMethod returnType="System.String[]" name="PrimaryKeyToFieldNames">
							<attributes public="true" final="true"/>
							<statements>
								<variableDeclarationStatement name="pkFieldNames">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable name="pkField"/>
									<target>
										<propertyReferenceExpression name="PK"/>
									</target>
									<statements>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="pkFieldNames"/>
											</target>
											<parameters>
												<propertyReferenceExpression name="Name">
													<variableReferenceExpression name="pkField"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ToArray">
										<target>
											<variableReferenceExpression name="pkFieldNames"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method CreateOwnerCollectionLinks(JObject) -->
						<memberMethod name="CreateOwnerCollectionLinks">
							<attributes public="true" final="true"/>
							<parameters>
								<parameter type="JObject" name="result"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="links">
									<init>
										<methodInvokeExpression methodName="CreateLinks">
											<parameters>
												<argumentReferenceExpression name="result"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="links"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="startsWith">
											<init>
												<propertyReferenceExpression name="ControllerResource"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<fieldReferenceExpression name="masterResource"/>
												</unaryOperatorExpression>"
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="startsWith"/>
													<fieldReferenceExpression name="masterResource"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement name="endsWith">
											<init>
												<variableReferenceExpression name="startsWith"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<fieldReferenceExpression name="lookupConfig"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="startsWith"/>
													<fieldReferenceExpression name="lookupResource"/>
												</assignStatement>
												<assignStatement>
													<variableReferenceExpression name="endsWith"/>
													<stringEmptyExpression/>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<conditionStatement>
													<condition>
														<propertyReferenceExpression name="IsCollection"/>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="endsWith"/>
															<binaryOperatorExpression operator="Add">
																<variableReferenceExpression name="endsWith"/>
																<primitiveExpression value="?count=true"/>
															</binaryOperatorExpression>
														</assignStatement>
													</trueStatements>
													<falseStatements>
														<assignStatement>
															<variableReferenceExpression name="startsWith"/>
															<fieldReferenceExpression name="id"/>
														</assignStatement>
														<assignStatement>
															<variableReferenceExpression name="endsWith"/>
															<stringEmptyExpression/>
														</assignStatement>
													</falseStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<propertyReferenceExpression name="LastEntity"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="AddLink">
													<parameters>
														<primitiveExpression value="upLink"/>
														<primitiveExpression value="GET"/>
														<variableReferenceExpression name="links"/>
														<methodInvokeExpression methodName="ReplaceRawUrlWith">
															<parameters>
																<variableReferenceExpression name="startsWith"/>
																<primitiveExpression value="false"/>
																<variableReferenceExpression name="endsWith"/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IdentityEquality">
														<fieldReferenceExpression name="lookupConfig"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="BooleanAnd">
														<binaryOperatorExpression operator="IdentityEquality">
															<arrayIndexerExpression>
																<target>
																	<fieldReferenceExpression name="args"/>
																</target>
																<indices>
																	<primitiveExpression value="fields"/>
																</indices>
															</arrayIndexerExpression>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
														<binaryOperatorExpression operator="IdentityEquality">
															<arrayIndexerExpression>
																<target>
																	<fieldReferenceExpression name="args"/>
																</target>
																<indices>
																	<propertyReferenceExpression name="EmbedParam"/>
																</indices>
															</arrayIndexerExpression>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<foreachStatement>
													<variable name="viewId"/>
													<target>
														<methodInvokeExpression methodName="EnumerateViews">
															<parameters>
																<primitiveExpression value="collection"/>
																<primitiveExpression value="null"/>
															</parameters>
														</methodInvokeExpression>
													</target>
													<statements>
														<variableDeclarationStatement name="viewName">
															<init>
																<variableReferenceExpression name="viewId"/>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="viewPath">
															<init>
																<variableReferenceExpression name="viewId"/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<variableReferenceExpression name="viewName"/>
																	<methodInvokeExpression methodName="DefaultView">
																		<parameters>
																			<primitiveExpression value="collection"/>
																		</parameters>
																	</methodInvokeExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="viewName"/>
																	<stringEmptyExpression/>
																</assignStatement>
																<assignStatement>
																	<variableReferenceExpression name="viewPath"/>
																	<stringEmptyExpression/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="viewPath"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="viewPath"/>
																	<binaryOperatorExpression operator="Add">
																		<primitiveExpression value="/"/>
																		<variableReferenceExpression name="viewPath"/>
																	</binaryOperatorExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<variableReferenceExpression name="viewName"/>
															<methodInvokeExpression methodName="ToPathName">
																<parameters>
																	<variableReferenceExpression name="viewName"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<assignStatement>
															<variableReferenceExpression name="viewPath"/>
															<methodInvokeExpression methodName="ToPathName">
																<parameters>
																	<variableReferenceExpression name="viewPath"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<variableDeclarationStatement name="entityPath">
															<init>
																<variableReferenceExpression name="startsWith"/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<propertyReferenceExpression name="IsSingleton"/>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="entityPath"/>
																	<stringEmptyExpression/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<methodInvokeExpression methodName="AddLink">
															<parameters>
																<primitiveExpression value="collection"/>
																<variableReferenceExpression name="viewName"/>
																<primitiveExpression value="GET"/>
																<variableReferenceExpression name="links"/>
																<methodInvokeExpression methodName="ReplaceRawUrlWith">
																	<parameters>
																		<variableReferenceExpression name="startsWith"/>
																		<primitiveExpression value="true"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[{0}{1}?count=true]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="entityPath"/>
																		<variableReferenceExpression name="viewPath"/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="AddLink">
															<parameters>
																<primitiveExpression value="firstLink"/>
																<variableReferenceExpression name="viewName"/>
																<primitiveExpression value="GET"/>
																<variableReferenceExpression name="links"/>
																<methodInvokeExpression methodName="ReplaceRawUrlWith">
																	<parameters>
																		<variableReferenceExpression name="startsWith"/>
																		<primitiveExpression value="true"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[{0}{1}?page=0&limit={2}]]></xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="entityPath"/>
																		<variableReferenceExpression name="viewPath"/>
																		<propertyReferenceExpression name="PageSize"/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</statements>
												</foreachStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method RowToObject(List<DataField>, List<DataField>, objectp[, List<int>, List<int>, -->
						<memberMethod returnType="JObject" name="RowToObject">
							<attributes public="true"/>
							<parameters>
								<parameter type="List" name="fieldList">
									<typeArguments>
										<typeReference type="DataField"/>
									</typeArguments>
								</parameter>
								<parameter type="List" name="ignoreList">
									<typeArguments>
										<typeReference type="DataField"/>
									</typeArguments>
								</parameter>
								<parameter type="System.Object[]" name="row"/>
								<parameter type="List" name="pkIndexMap">
									<typeArguments>
										<typeReference type="System.Int32"/>
									</typeArguments>
								</parameter>
								<parameter type="List" name="fieldIndexMap">
									<typeArguments>
										<typeReference type="System.Int32"/>
									</typeArguments>
								</parameter>
							</parameters>
							<statements>
								<variableDeclarationStatement name="obj">
									<init>
										<objectCreateExpression type="JObject"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="JProperty" name="links" var="false">
									<init>
										<methodInvokeExpression methodName="CreateLinks">
											<parameters>
												<variableReferenceExpression name="obj"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="pkAsString">
									<init>
										<propertyReferenceExpression name="PathKey"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<variableReferenceExpression name="pkAsString"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="pk">
											<init>
												<objectCreateExpression type="List">
													<typeArguments>
														<typeReference type="System.String"/>
													</typeArguments>
												</objectCreateExpression>
											</init>
										</variableDeclarationStatement>
										<foreachStatement>
											<variable name="pkFieldIndex"/>
											<target>
												<argumentReferenceExpression name="pkIndexMap"/>
											</target>
											<statements>
												<variableDeclarationStatement name="v">
													<init>
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="row"/>
															</target>
															<indices>
																<arrayIndexerExpression>
																	<target>
																		<argumentReferenceExpression name="fieldIndexMap"/>
																	</target>
																	<indices>
																		<variableReferenceExpression name="pkFieldIndex"/>
																	</indices>
																</arrayIndexerExpression>
															</indices>
														</arrayIndexerExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<variableReferenceExpression name="v"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="pk"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="ToString">
																	<target>
																		<variableReferenceExpression name="v"/>
																	</target>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
										<assignStatement>
											<variableReferenceExpression name="pkAsString"/>
											<methodInvokeExpression methodName="Join">
												<target>
													<typeReferenceExpression type="System.String"/>
												</target>
												<parameters>
													<primitiveExpression value="_"/>
													<variableReferenceExpression name="pk"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="selfLink">
									<init>
										<propertyReferenceExpression name="RawUrl"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="requiresSingletonLinks">
									<init>
										<primitiveExpression value="false"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="isRootView">
									<init>
										<primitiveExpression value="false"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="links"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<variableReferenceExpression name="pkAsString"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNullOrEmpty">
															<propertyReferenceExpression name="PathField"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<comment>object resource</comment>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<propertyReferenceExpression name="PathKey"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityEquality">
																			<propertyReferenceExpression name="Action"/>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="AddLink">
																			<parameters>
																				<primitiveExpression value="selfLink"/>
																				<primitiveExpression value="GET"/>
																				<variableReferenceExpression name="links"/>
																				<variableReferenceExpression name="selfLink"/>
																			</parameters>
																		</methodInvokeExpression>
																		<assignStatement>
																			<variableReferenceExpression name="isRootView"/>
																			<methodInvokeExpression methodName="IsTagged">
																				<parameters>
																					<fieldReferenceExpression name="viewNav"/>
																					<primitiveExpression value="rest-api-root"/>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																		<conditionStatement>
																			<condition>
																				<variableReferenceExpression name="isRootView"/>
																			</condition>
																			<trueStatements>
																				<foreachStatement>
																					<variable name="viewId"/>
																					<target>
																						<methodInvokeExpression methodName="EnumerateViews">
																							<parameters>
																								<primitiveExpression value="root"/>
																								<propertyReferenceExpression name="PathView"/>
																							</parameters>
																						</methodInvokeExpression>
																					</target>
																					<statements>
																						<variableDeclarationStatement name="viewName">
																							<init>
																								<variableReferenceExpression name="viewId"/>
																							</init>
																						</variableDeclarationStatement>
																						<variableDeclarationStatement name="viewPath">
																							<init>
																								<variableReferenceExpression name="viewId"/>
																							</init>
																						</variableDeclarationStatement>
																						<assignStatement>
																							<variableReferenceExpression name="viewName"/>
																							<methodInvokeExpression methodName="ToPathName">
																								<parameters>
																									<variableReferenceExpression name="viewName"/>
																								</parameters>
																							</methodInvokeExpression>
																						</assignStatement>
																						<conditionStatement>
																							<condition>
																								<unaryOperatorExpression operator="IsNotNullOrEmpty">
																									<variableReferenceExpression name="viewPath"/>
																								</unaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<assignStatement>
																									<variableReferenceExpression name="viewPath"/>
																									<binaryOperatorExpression operator="Add">
																										<primitiveExpression value="/"/>
																										<methodInvokeExpression methodName="ToPathName">
																											<parameters>
																												<variableReferenceExpression name="viewPath"/>
																											</parameters>
																										</methodInvokeExpression>
																									</binaryOperatorExpression>
																								</assignStatement>
																							</trueStatements>
																						</conditionStatement>
																						<methodInvokeExpression methodName="AddLink">
																							<parameters>
																								<methodInvokeExpression methodName="ToApiName">
																									<parameters>
																										<primitiveExpression value="selfLink"/>
																									</parameters>
																								</methodInvokeExpression>
																								<variableReferenceExpression name="viewName"/>
																								<primitiveExpression value="GET"/>
																								<variableReferenceExpression name="links"/>
																								<methodInvokeExpression methodName="ReplaceRawUrlWith">
																									<parameters>
																										<propertyReferenceExpression name="PathView"/>
																										<primitiveExpression value="false"/>
																										<variableReferenceExpression name="viewPath"/>
																									</parameters>
																								</methodInvokeExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</statements>
																				</foreachStatement>
																			</trueStatements>
																			<falseStatements>
																				<comment>singleton "self" links</comment>
																				<foreachStatement>
																					<variable name="viewId"/>
																					<target>
																						<methodInvokeExpression methodName="EnumerateViews">
																							<parameters>
																								<primitiveExpression value="singleton"/>
																								<propertyReferenceExpression name="PathView"/>
																							</parameters>
																						</methodInvokeExpression>
																					</target>
																					<statements>
																						<variableDeclarationStatement name="viewName">
																							<init>
																								<variableReferenceExpression name="viewId"/>
																							</init>
																						</variableDeclarationStatement>
																						<variableDeclarationStatement name="viewPath">
																							<init>
																								<variableReferenceExpression name="viewId"/>
																							</init>
																						</variableDeclarationStatement>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="ValueEquality">
																									<variableReferenceExpression name="viewId"/>
																									<methodInvokeExpression methodName="DefaultView">
																										<parameters>
																											<primitiveExpression value="singleton"/>
																										</parameters>
																									</methodInvokeExpression>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<assignStatement>
																									<variableReferenceExpression name="viewName"/>
																									<primitiveExpression value="default"/>
																								</assignStatement>
																								<assignStatement>
																									<variableReferenceExpression name="viewPath"/>
																									<stringEmptyExpression/>
																								</assignStatement>
																							</trueStatements>
																						</conditionStatement>
																						<assignStatement>
																							<variableReferenceExpression name="viewName"/>
																							<methodInvokeExpression methodName="ToPathName">
																								<parameters>
																									<variableReferenceExpression name="viewName"/>
																								</parameters>
																							</methodInvokeExpression>
																						</assignStatement>
																						<conditionStatement>
																							<condition>
																								<unaryOperatorExpression operator="IsNotNullOrEmpty">
																									<variableReferenceExpression name="viewPath"/>
																								</unaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<assignStatement>
																									<variableReferenceExpression name="viewPath"/>
																									<binaryOperatorExpression operator="Add">
																										<primitiveExpression value="/"/>
																										<methodInvokeExpression methodName="ToPathName">
																											<parameters>
																												<variableReferenceExpression name="viewPath"/>
																											</parameters>
																										</methodInvokeExpression>
																									</binaryOperatorExpression>
																								</assignStatement>
																							</trueStatements>
																						</conditionStatement>
																						<methodInvokeExpression methodName="AddLink">
																							<parameters>
																								<methodInvokeExpression methodName="ToApiName">
																									<parameters>
																										<primitiveExpression value="selfLink"/>
																									</parameters>
																								</methodInvokeExpression>
																								<variableReferenceExpression name="viewName"/>
																								<primitiveExpression value="GET"/>
																								<variableReferenceExpression name="links"/>
																								<methodInvokeExpression methodName="ReplaceRawUrlWith">
																									<parameters>
																										<propertyReferenceExpression name="LastEntity"/>
																										<primitiveExpression value="false"/>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA[{0}{1}]]></xsl:attribute>
																										</primitiveExpression>
																										<propertyReferenceExpression name="LastEntity"/>
																										<variableReferenceExpression name="viewPath"/>
																									</parameters>
																								</methodInvokeExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</statements>
																				</foreachStatement>
																				<methodInvokeExpression methodName="CreateOwnerCollectionLinks">
																					<parameters>
																						<variableReferenceExpression name="obj"/>
																					</parameters>
																				</methodInvokeExpression>
																			</falseStatements>
																		</conditionStatement>
																	</trueStatements>
																</conditionStatement>
																<assignStatement>
																	<variableReferenceExpression name="requiresSingletonLinks"/>
																	<binaryOperatorExpression operator="IdentityEquality">
																		<propertyReferenceExpression name="Action"/>
																		<primitiveExpression value="null"/>
																	</binaryOperatorExpression>
																</assignStatement>
															</trueStatements>
															<falseStatements>
																<comment>object is the item of a collection resource</comment>
																<assignStatement>
																	<variableReferenceExpression name="selfLink"/>
																	<methodInvokeExpression methodName="ExtendRawUrlWith">
																		<parameters>
																			<variableReferenceExpression name="pkAsString"/>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
																<methodInvokeExpression methodName="AddLink">
																	<parameters>
																		<primitiveExpression value="selfLink"/>
																		<primitiveExpression value="GET"/>
																		<variableReferenceExpression name="links"/>
																		<variableReferenceExpression name="selfLink"/>
																	</parameters>
																</methodInvokeExpression>
																<foreachStatement>
																	<variable name="viewId"/>
																	<target>
																		<methodInvokeExpression methodName="EnumerateViews">
																			<parameters>
																				<primitiveExpression value="singleton"/>
																				<methodInvokeExpression methodName="DefaultView">
																					<parameters>
																						<primitiveExpression value="singleton"/>
																					</parameters>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</target>
																	<statements>
																		<methodInvokeExpression methodName="AddLink">
																			<parameters>
																				<methodInvokeExpression methodName="ToApiName">
																					<parameters>
																						<primitiveExpression value="selfLink"/>
																					</parameters>
																				</methodInvokeExpression>
																				<methodInvokeExpression methodName="ToPathName">
																					<parameters>
																						<variableReferenceExpression name="viewId"/>
																					</parameters>
																				</methodInvokeExpression>
																				<primitiveExpression value="GET"/>
																				<variableReferenceExpression name="links"/>
																				<methodInvokeExpression methodName="ReplaceRawUrlWith">
																					<parameters>
																						<propertyReferenceExpression name="PathKey"/>
																						<primitiveExpression value="false"/>
																						<primitiveExpression>
																							<xsl:attribute name="value"><![CDATA[{0}/{1}]]></xsl:attribute>
																						</primitiveExpression>
																						<variableReferenceExpression name="pkAsString"/>
																						<methodInvokeExpression methodName="ToPathName">
																							<parameters>
																								<variableReferenceExpression name="viewId"/>
																							</parameters>
																						</methodInvokeExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</statements>
																</foreachStatement>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
													<falseStatements>
														<comment>object field resource</comment>
														<methodInvokeExpression methodName="AddLink">
															<parameters>
																<primitiveExpression value="selfLink"/>
																<primitiveExpression value="GET"/>
																<variableReferenceExpression name="links"/>
																<variableReferenceExpression name="selfLink"/>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="AddLink">
															<parameters>
																<primitiveExpression value="upLink"/>
																<primitiveExpression value="GET"/>
																<variableReferenceExpression name="links"/>
																<methodInvokeExpression methodName="ReplaceRawUrlWith">
																	<parameters>
																		<propertyReferenceExpression name="LastEntity"/>
																		<primitiveExpression value="false"/>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
											<falseStatements>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNotNullOrEmpty">
															<propertyReferenceExpression name="PathKey"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="AddLink">
															<parameters>
																<primitiveExpression value="collection"/>
																<primitiveExpression value="GET"/>
																<variableReferenceExpression name="links"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[/{0}]]></xsl:attribute>
																</primitiveExpression>
																<propertyReferenceExpression name="ControllerResource"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="fieldIndex">
									<init>
										<primitiveExpression value="0"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable name="df"/>
									<target>
										<argumentReferenceExpression name="fieldList"/>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="Not">
													<methodInvokeExpression methodName="Contains">
														<target>
															<argumentReferenceExpression name="ignoreList"/>
														</target>
														<parameters>
															<variableReferenceExpression name="df"/>
														</parameters>
													</methodInvokeExpression>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="ContainsKey">
															<target>
																<fieldReferenceExpression name="excludedFields"/>
															</target>
															<parameters>
																<propertyReferenceExpression name="Name">
																	<variableReferenceExpression name="df"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="fieldIndex"/>
															<binaryOperatorExpression operator="Add">
																<variableReferenceExpression name="fieldIndex"/>
																<primitiveExpression value="1"/>
															</binaryOperatorExpression>
														</assignStatement>
														<continueStatement/>
													</trueStatements>
												</conditionStatement>
												<variableDeclarationStatement name="addValueProperty">
													<init>
														<primitiveExpression value="true"/>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="valuePropertyName">
													<init>
														<methodInvokeExpression methodName="ToApiFieldName">
															<parameters>
																<propertyReferenceExpression name="Name">
																	<variableReferenceExpression name="df"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="pathFieldName">
													<init>
														<methodInvokeExpression methodName="ToPathName">
															<parameters>
																<propertyReferenceExpression name="Name">
																	<variableReferenceExpression name="df"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNotNullOrEmpty">
															<propertyReferenceExpression name="PathField"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="valuePropertyName"/>
															<methodInvokeExpression methodName="ToApiNameTemplate">
																<parameters>
																	<primitiveExpression value="valueKey"/>
																	<propertyReferenceExpression name="Name">
																		<variableReferenceExpression name="df"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<variableDeclarationStatement name="v">
													<init>
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="row"/>
															</target>
															<indices>
																<arrayIndexerExpression>
																	<target>
																		<argumentReferenceExpression name="fieldIndexMap"/>
																	</target>
																	<indices>
																		<variableReferenceExpression name="fieldIndex"/>
																	</indices>
																</arrayIndexerExpression>
															</indices>
														</arrayIndexerExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="Type">
																<variableReferenceExpression name="df"/>
															</propertyReferenceExpression>
															<primitiveExpression value="DataView"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="Not">
																	<methodInvokeExpression methodName="AllowController">
																		<parameters>
																			<propertyReferenceExpression name="DataViewController">
																				<variableReferenceExpression name="df"/>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<continueStatement/>
															</trueStatements>
														</conditionStatement>
														<comment>figure the default viewId for this DataView field</comment>
														<variableDeclarationStatement name="viewId">
															<init>
																<propertyReferenceExpression name="DataViewId">
																	<variableReferenceExpression name="df"/>
																</propertyReferenceExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="otherCollectionViews">
															<init>
																<methodInvokeExpression methodName="EnumerateViews">
																	<parameters>
																		<propertyReferenceExpression name="DataViewController">
																			<variableReferenceExpression name="df"/>
																		</propertyReferenceExpression>
																		<primitiveExpression value="collection"/>
																		<variableReferenceExpression name="viewId"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="defaultViewId">
															<init>
																<methodInvokeExpression methodName="DefaultView">
																	<parameters>
																		<primitiveExpression value="collection"/>
																		<propertyReferenceExpression name="DataViewController">
																			<variableReferenceExpression name="df"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<variableReferenceExpression name="viewId"/>
																	<variableReferenceExpression name="defaultViewId"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="viewId"/>
																	<stringEmptyExpression/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="viewId"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="viewId"/>
																	<binaryOperatorExpression operator="Add">
																		<primitiveExpression value="/"/>
																		<variableReferenceExpression name="viewId"/>
																	</binaryOperatorExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<comment>create the DataView field value and link</comment>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNullOrEmpty">
																	<propertyReferenceExpression name="PathField"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="IsNullOrEmpty">
																			<propertyReferenceExpression name="PathKey"/>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="v"/>
																			<methodInvokeExpression methodName="EscapeLink">
																				<parameters>
																					<methodInvokeExpression methodName="EnsurePublicApiKeyInUrl">
																						<parameters>
																							<methodInvokeExpression methodName="ExtendRawUrlWith">
																								<parameters>
																									<primitiveExpression>
																										<xsl:attribute name="value"><![CDATA[{0}/{1}{2}]]></xsl:attribute>
																									</primitiveExpression>
																									<variableReferenceExpression name="pkAsString"/>
																									<variableReferenceExpression name="pathFieldName"/>
																									<variableReferenceExpression name="viewId"/>
																								</parameters>
																							</methodInvokeExpression>
																						</parameters>
																					</methodInvokeExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																	</trueStatements>
																	<falseStatements>
																		<assignStatement>
																			<variableReferenceExpression name="v"/>
																			<methodInvokeExpression methodName="EscapeLink">
																				<parameters>
																					<methodInvokeExpression methodName="EnsurePublicApiKeyInUrl">
																						<parameters>
																							<methodInvokeExpression methodName="ExtendRawUrlWith">
																								<parameters>
																									<primitiveExpression>
																										<xsl:attribute name="value"><![CDATA[{0}{1}]]></xsl:attribute>
																									</primitiveExpression>
																									<variableReferenceExpression name="pathFieldName"/>
																									<variableReferenceExpression name="viewId"/>
																								</parameters>
																							</methodInvokeExpression>
																						</parameters>
																					</methodInvokeExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																	</falseStatements>
																</conditionStatement>
															</trueStatements>
															<falseStatements>
																<assignStatement>
																	<variableReferenceExpression name="addValueProperty"/>
																	<primitiveExpression value="false"/>
																</assignStatement>
															</falseStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<variableReferenceExpression name="links"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<comment>create an embeddable link for the DataView field</comment>
																<methodInvokeExpression methodName="ExtendLinkWith">
																	<parameters>
																		<primitiveExpression value="embeddable"/>
																		<primitiveExpression value="true"/>
																		<methodInvokeExpression methodName="AddLink">
																			<parameters>
																				<propertyReferenceExpression name="Name">
																					<variableReferenceExpression name="df"/>
																				</propertyReferenceExpression>
																				<primitiveExpression value="GET"/>
																				<variableReferenceExpression name="links"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[{0}?count=true]]></xsl:attribute>
																				</primitiveExpression>
																				<convertExpression to="String">
																					<variableReferenceExpression name="v"/>
																				</convertExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
																<methodInvokeExpression methodName="ExtendLinkWith">
																	<parameters>
																		<primitiveExpression value="embeddable"/>
																		<primitiveExpression value="true"/>
																		<methodInvokeExpression methodName="AddLink">
																			<parameters>
																				<propertyReferenceExpression name="Name">
																					<variableReferenceExpression name="df"/>
																				</propertyReferenceExpression>
																				<primitiveExpression value="firstLink"/>
																				<primitiveExpression value="GET"/>
																				<variableReferenceExpression name="links"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[{0}?page=0&limit={1}]]></xsl:attribute>
																				</primitiveExpression>
																				<convertExpression to="String">
																					<variableReferenceExpression name="v"/>
																				</convertExpression>
																				<propertyReferenceExpression name="PageSize"/>
																			</parameters>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
																<comment>create embeddable links for other views in the DataView field controller</comment>
																<foreachStatement>
																	<variable name="fieldViewId"/>
																	<target>
																		<variableReferenceExpression name="otherCollectionViews"/>
																	</target>
																	<statements>
																		<variableDeclarationStatement name="viewName">
																			<init>
																				<variableReferenceExpression name="fieldViewId"/>
																			</init>
																		</variableDeclarationStatement>
																		<variableDeclarationStatement name="viewPath">
																			<init>
																				<variableReferenceExpression name="fieldViewId"/>
																			</init>
																		</variableDeclarationStatement>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="ValueEquality">
																					<variableReferenceExpression name="fieldViewId"/>
																					<variableReferenceExpression name="defaultViewId"/>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<variableReferenceExpression name="viewName"/>
																					<primitiveExpression value="collection"/>
																				</assignStatement>
																				<assignStatement>
																					<variableReferenceExpression name="viewPath"/>
																					<stringEmptyExpression/>
																				</assignStatement>
																			</trueStatements>
																			<falseStatements>
																				<assignStatement>
																					<variableReferenceExpression name="viewPath"/>
																					<binaryOperatorExpression operator="Add">
																						<primitiveExpression value="/"/>
																						<variableReferenceExpression name="fieldViewId"/>
																					</binaryOperatorExpression>
																				</assignStatement>
																			</falseStatements>
																		</conditionStatement>
																		<assignStatement>
																			<variableReferenceExpression name="viewName"/>
																			<methodInvokeExpression methodName="ToPathName">
																				<parameters>
																					<variableReferenceExpression name="viewName"/>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																		<assignStatement>
																			<variableReferenceExpression name="viewPath"/>
																			<methodInvokeExpression methodName="ToPathName">
																				<parameters>
																					<variableReferenceExpression name="viewPath"/>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																		<variableDeclarationStatement type="System.String" name="fieldUrl" var="true"/>
																		<conditionStatement>
																			<condition>
																				<unaryOperatorExpression operator="IsNullOrEmpty">
																					<propertyReferenceExpression name="PathKey"/>
																				</unaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<variableReferenceExpression name="fieldUrl"/>
																					<methodInvokeExpression methodName="ExtendRawUrlWith">
																						<parameters>
																							<primitiveExpression>
																								<xsl:attribute name="value"><![CDATA[{0}/{1}{2}]]></xsl:attribute>
																							</primitiveExpression>
																							<variableReferenceExpression name="pkAsString"/>
																							<variableReferenceExpression name="pathFieldName"/>
																							<variableReferenceExpression name="viewPath"/>
																						</parameters>
																					</methodInvokeExpression>
																				</assignStatement>
																			</trueStatements>
																			<falseStatements>
																				<assignStatement>
																					<variableReferenceExpression name="fieldUrl"/>
																					<methodInvokeExpression methodName="ExtendRawUrlWith">
																						<parameters>
																							<primitiveExpression>
																								<xsl:attribute name="value"><![CDATA[{0}{1}]]></xsl:attribute>
																							</primitiveExpression>
																							<variableReferenceExpression name="pathFieldName"/>
																							<variableReferenceExpression name="viewPath"/>
																						</parameters>
																					</methodInvokeExpression>
																				</assignStatement>
																			</falseStatements>
																		</conditionStatement>
																		<methodInvokeExpression methodName="ExtendLinkWith">
																			<parameters>
																				<primitiveExpression value="embeddable"/>
																				<primitiveExpression value="true"/>
																				<methodInvokeExpression methodName="AddLink">
																					<parameters>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="df"/>
																						</propertyReferenceExpression>
																						<variableReferenceExpression name="viewName"/>
																						<primitiveExpression value="GET"/>
																						<variableReferenceExpression name="links"/>
																						<primitiveExpression>
																							<xsl:attribute name="value"><![CDATA[{0}]]></xsl:attribute>
																						</primitiveExpression>
																						<variableReferenceExpression name="fieldUrl"/>
																					</parameters>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																		<methodInvokeExpression methodName="ExtendLinkWith">
																			<parameters>
																				<primitiveExpression value="embeddable"/>
																				<primitiveExpression value="true"/>
																				<methodInvokeExpression methodName="AddLink">
																					<parameters>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="df"/>
																						</propertyReferenceExpression>
																						<binaryOperatorExpression operator="Add">
																							<methodInvokeExpression methodName="ToApiName">
																								<parameters>
																									<primitiveExpression value="firstLink"/>
																								</parameters>
																							</methodInvokeExpression>
																							<binaryOperatorExpression operator="Add">
																								<primitiveExpression value="-"/>
																								<variableReferenceExpression name="viewName"/>
																							</binaryOperatorExpression>
																						</binaryOperatorExpression>
																						<primitiveExpression value="GET"/>
																						<variableReferenceExpression name="links"/>
																						<primitiveExpression>
																							<xsl:attribute name="value"><![CDATA[{0}?page=0&limit={1}]]></xsl:attribute>
																						</primitiveExpression>
																						<variableReferenceExpression name="fieldUrl"/>
																						<propertyReferenceExpression name="PageSize"/>
																					</parameters>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</statements>
																</foreachStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
													<falseStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<variableReferenceExpression name="v"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="IdentityInequality">
																				<variableReferenceExpression name="links"/>
																				<primitiveExpression value="null"/>
																			</binaryOperatorExpression>
																			<binaryOperatorExpression operator="BooleanAnd">
																				<unaryOperatorExpression operator="IsNotNullOrEmpty">
																					<propertyReferenceExpression name="ItemsDataController">
																						<variableReferenceExpression name="df"/>
																					</propertyReferenceExpression>
																				</unaryOperatorExpression>
																				<binaryOperatorExpression operator="IdentityEquality">
																					<propertyReferenceExpression name="Action"/>
																					<primitiveExpression value="null"/>
																				</binaryOperatorExpression>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<conditionStatement>
																			<condition>
																				<methodInvokeExpression methodName="AllowController">
																					<parameters>
																						<propertyReferenceExpression name="ItemsDataController">
																							<variableReferenceExpression name="df"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</condition>
																			<trueStatements>
																				<conditionStatement>
																					<condition>
																						<unaryOperatorExpression operator="IsNullOrEmpty">
																							<propertyReferenceExpression name="PathKey"/>
																						</unaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<methodInvokeExpression methodName="ExtendLinkWith">
																							<parameters>
																								<primitiveExpression value="embeddable"/>
																								<primitiveExpression value="true"/>
																								<methodInvokeExpression methodName="AddLink">
																									<parameters>
																										<propertyReferenceExpression name="Name">
																											<variableReferenceExpression name="df"/>
																										</propertyReferenceExpression>
																										<primitiveExpression value="GET"/>
																										<variableReferenceExpression name="links"/>
																										<methodInvokeExpression methodName="ExtendRawUrlWith">
																											<parameters>
																												<primitiveExpression value="false"/>
																												<primitiveExpression>
																													<xsl:attribute name="value"><![CDATA[{0}/{1}]]></xsl:attribute>
																												</primitiveExpression>
																												<variableReferenceExpression name="pkAsString"/>
																												<variableReferenceExpression name="pathFieldName"/>
																											</parameters>
																										</methodInvokeExpression>
																									</parameters>
																								</methodInvokeExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</trueStatements>
																					<falseStatements>
																						<methodInvokeExpression methodName="ExtendLinkWith">
																							<parameters>
																								<primitiveExpression value="embeddable"/>
																								<primitiveExpression value="true"/>
																								<methodInvokeExpression methodName="AddLink">
																									<parameters>
																										<propertyReferenceExpression name="Name">
																											<variableReferenceExpression name="df"/>
																										</propertyReferenceExpression>
																										<primitiveExpression value="GET"/>
																										<variableReferenceExpression name="links"/>
																										<methodInvokeExpression methodName="ExtendRawUrlWith">
																											<parameters>
																												<primitiveExpression value="false"/>
																												<variableReferenceExpression name="pathFieldName"/>
																											</parameters>
																										</methodInvokeExpression>
																									</parameters>
																								</methodInvokeExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</falseStatements>
																				</conditionStatement>
																				<conditionStatement>
																					<condition>
																						<unaryOperatorExpression operator="IsNotNullOrEmpty">
																							<propertyReferenceExpression name="PathKey"/>
																						</unaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<methodInvokeExpression methodName="CreateLookupLink">
																							<parameters>
																								<variableReferenceExpression name="df"/>
																								<variableReferenceExpression name="links"/>
																							</parameters>
																						</methodInvokeExpression>
																					</trueStatements>
																				</conditionStatement>
																			</trueStatements>
																		</conditionStatement>
																	</trueStatements>
																	<falseStatements>
																		<conditionStatement>
																			<condition>
																				<propertyReferenceExpression name="OnDemand">
																					<variableReferenceExpression name="df"/>
																				</propertyReferenceExpression>
																			</condition>
																			<trueStatements>
																				<conditionStatement>
																					<condition>
																						<methodInvokeExpression methodName="StartsWith">
																							<target>
																								<methodInvokeExpression methodName="ToString">
																									<target>
																										<variableReferenceExpression name="v"/>
																									</target>
																								</methodInvokeExpression>
																							</target>
																							<parameters>
																								<primitiveExpression value="null|"/>
																							</parameters>
																						</methodInvokeExpression>
																					</condition>
																					<trueStatements>
																						<assignStatement>
																							<variableReferenceExpression name="v"/>
																							<primitiveExpression value="null"/>
																						</assignStatement>
																					</trueStatements>
																					<falseStatements>
																						<conditionStatement>
																							<condition>
																								<unaryOperatorExpression operator="IsNullOrEmpty">
																									<propertyReferenceExpression name="PathKey"/>
																								</unaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<assignStatement>
																									<variableReferenceExpression name="v"/>
																									<methodInvokeExpression methodName="ExtendRawUrlWith">
																										<parameters>
																											<primitiveExpression>
																												<xsl:attribute name="value"><![CDATA[{0}/{1}]]></xsl:attribute>
																											</primitiveExpression>
																											<variableReferenceExpression name="pkAsString"/>
																											<variableReferenceExpression name="pathFieldName"/>
																										</parameters>
																									</methodInvokeExpression>
																								</assignStatement>
																							</trueStatements>
																							<falseStatements>
																								<conditionStatement>
																									<condition>
																										<unaryOperatorExpression operator="IsNullOrEmpty">
																											<propertyReferenceExpression name="PathField"/>
																										</unaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<assignStatement>
																											<variableReferenceExpression name="v"/>
																											<methodInvokeExpression methodName="ExtendRawUrlWith">
																												<parameters>
																													<variableReferenceExpression name="pathFieldName"/>
																												</parameters>
																											</methodInvokeExpression>
																										</assignStatement>
																									</trueStatements>
																									<falseStatements>
																										<assignStatement>
																											<variableReferenceExpression name="v"/>
																											<methodInvokeExpression methodName="ExtendRawUrlWith">
																												<parameters>
																													<stringEmptyExpression/>
																												</parameters>
																											</methodInvokeExpression>
																										</assignStatement>
																									</falseStatements>
																								</conditionStatement>
																							</falseStatements>
																						</conditionStatement>
																						<variableDeclarationStatement name="qualifiedFileNameField">
																							<init>
																								<methodInvokeExpression methodName="ToApiFieldName">
																									<parameters>
																										<binaryOperatorExpression operator="Add">
																											<propertyReferenceExpression name="Name">
																												<variableReferenceExpression name="df"/>
																											</propertyReferenceExpression>
																											<primitiveExpression value="FileName"/>
																										</binaryOperatorExpression>
																									</parameters>
																								</methodInvokeExpression>
																							</init>
																						</variableDeclarationStatement>
																						<variableDeclarationStatement name="defaultFileNameField">
																							<init>
																								<methodInvokeExpression methodName="ToApiFieldName">
																									<parameters>
																										<primitiveExpression value="FileName"/>
																									</parameters>
																								</methodInvokeExpression>
																							</init>
																						</variableDeclarationStatement>
																						<variableDeclarationStatement name="fileNameFieldIndex">
																							<init>
																								<primitiveExpression value="0"/>
																							</init>
																						</variableDeclarationStatement>
																						<foreachStatement>
																							<variable name="f"/>
																							<target>
																								<variableReferenceExpression name="fieldList"/>
																							</target>
																							<statements>
																								<variableDeclarationStatement name="testFileName">
																									<init>
																										<methodInvokeExpression methodName="ToApiFieldName">
																											<parameters>
																												<propertyReferenceExpression name="Name">
																													<variableReferenceExpression name="f"/>
																												</propertyReferenceExpression>
																											</parameters>
																										</methodInvokeExpression>
																									</init>
																								</variableDeclarationStatement>
																								<conditionStatement>
																									<condition>
																										<binaryOperatorExpression operator="BooleanOr">
																											<binaryOperatorExpression operator="ValueEquality">
																												<variableReferenceExpression name="qualifiedFileNameField"/>
																												<variableReferenceExpression name="testFileName"/>
																											</binaryOperatorExpression>
																											<binaryOperatorExpression operator="ValueEquality">
																												<variableReferenceExpression name="defaultFileNameField"/>
																												<variableReferenceExpression name="testFileName"/>
																											</binaryOperatorExpression>
																										</binaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<variableDeclarationStatement name="fileName">
																											<init>
																												<convertExpression to="String">
																													<arrayIndexerExpression>
																														<target>
																															<argumentReferenceExpression name="row"/>
																														</target>
																														<indices>
																															<arrayIndexerExpression>
																																<target>
																																	<argumentReferenceExpression name="fieldIndexMap"/>
																																</target>
																																<indices>
																																	<variableReferenceExpression name="fileNameFieldIndex"/>
																																</indices>
																															</arrayIndexerExpression>
																														</indices>
																													</arrayIndexerExpression>
																												</convertExpression>
																											</init>
																										</variableDeclarationStatement>
																										<conditionStatement>
																											<condition>
																												<unaryOperatorExpression operator="IsNotNullOrEmpty">
																													<variableReferenceExpression name="fileName"/>
																												</unaryOperatorExpression>
																											</condition>
																											<trueStatements>
																												<variableDeclarationStatement name="extension">
																													<init>
																														<methodInvokeExpression methodName="GetExtension">
																															<target>
																																<typeReferenceExpression type="Path"/>
																															</target>
																															<parameters>
																																<variableReferenceExpression name="fileName"/>
																															</parameters>
																														</methodInvokeExpression>
																													</init>
																												</variableDeclarationStatement>
																												<variableDeclarationStatement name="blobPath">
																													<init>
																														<objectCreateExpression type="List">
																															<typeArguments>
																																<typeReference type="System.String"/>
																															</typeArguments>
																															<parameters>
																																<methodInvokeExpression methodName="Split">
																																	<target>
																																		<castExpression targetType="System.String">
																																			<variableReferenceExpression name="v"/>
																																		</castExpression>
																																	</target>
																																	<parameters>
																																		<primitiveExpression value="/" convertTo="Char"/>
																																	</parameters>
																																</methodInvokeExpression>
																															</parameters>
																														</objectCreateExpression>
																													</init>
																												</variableDeclarationStatement>
																												<conditionStatement>
																													<condition>
																														<binaryOperatorExpression operator="ValueEquality">
																															<arrayIndexerExpression>
																																<target>
																																	<variableReferenceExpression name="blobPath"/>
																																</target>
																																<indices>
																																	<binaryOperatorExpression operator="Subtract">
																																		<propertyReferenceExpression name="Count">
																																			<variableReferenceExpression name="blobPath"/>
																																		</propertyReferenceExpression>
																																		<primitiveExpression value="1"/>
																																	</binaryOperatorExpression>
																																</indices>
																															</arrayIndexerExpression>
																															<propertyReferenceExpression name="LatestVersionLink"/>
																														</binaryOperatorExpression>
																													</condition>
																													<trueStatements>
																														<methodInvokeExpression methodName="RemoveAt">
																															<target>
																																<variableReferenceExpression name="blobPath"/>
																															</target>
																															<parameters>
																																<binaryOperatorExpression operator="Subtract">
																																	<propertyReferenceExpression name="Count">
																																		<variableReferenceExpression name="blobPath"/>
																																	</propertyReferenceExpression>
																																	<primitiveExpression value="1"/>
																																</binaryOperatorExpression>
																															</parameters>
																														</methodInvokeExpression>
																													</trueStatements>
																												</conditionStatement>
																												<variableDeclarationStatement name="newFileName">
																													<init>
																														<binaryOperatorExpression operator="Add">
																															<methodInvokeExpression methodName="ToBase64UrlEncoded">
																																<target>
																																	<typeReferenceExpression type="TextUtility"/>
																																</target>
																																<parameters>
																																	<methodInvokeExpression methodName="GetBytes">
																																		<target>
																																			<propertyReferenceExpression name="UTF8">
																																				<typeReferenceExpression type="Encoding"/>
																																			</propertyReferenceExpression>
																																		</target>
																																		<parameters>
																																			<stringFormatExpression>
																																				<xsl:attribute name="format"><![CDATA[{0}/{1}/{2}]]></xsl:attribute>
																																				<arrayIndexerExpression>
																																					<target>
																																						<variableReferenceExpression name="blobPath"/>
																																					</target>
																																					<indices>
																																						<binaryOperatorExpression operator="Subtract">
																																							<propertyReferenceExpression name="Count">
																																								<variableReferenceExpression name="blobPath"/>
																																							</propertyReferenceExpression>
																																							<primitiveExpression value="2"/>
																																						</binaryOperatorExpression>
																																					</indices>
																																				</arrayIndexerExpression>
																																				<arrayIndexerExpression>
																																					<target>
																																						<variableReferenceExpression name="blobPath"/>
																																					</target>
																																					<indices>
																																						<binaryOperatorExpression operator="Subtract">
																																							<propertyReferenceExpression name="Count">
																																								<variableReferenceExpression name="blobPath"/>
																																							</propertyReferenceExpression>
																																							<primitiveExpression value="1"/>
																																						</binaryOperatorExpression>
																																					</indices>
																																				</arrayIndexerExpression>
																																				<methodInvokeExpression methodName="Substring">
																																					<target>
																																						<variableReferenceExpression name="extension"/>
																																					</target>
																																					<parameters>
																																						<primitiveExpression value="1"/>
																																						<primitiveExpression value="1"/>
																																					</parameters>
																																				</methodInvokeExpression>
																																			</stringFormatExpression>
																																		</parameters>
																																	</methodInvokeExpression>
																																</parameters>
																															</methodInvokeExpression>
																															<variableReferenceExpression name="extension"/>
																														</binaryOperatorExpression>
																													</init>
																												</variableDeclarationStatement>
																												<methodInvokeExpression methodName="RemoveAt">
																													<target>
																														<variableReferenceExpression name="blobPath"/>
																													</target>
																													<parameters>
																														<binaryOperatorExpression operator="Subtract">
																															<propertyReferenceExpression name="Count">
																																<variableReferenceExpression name="blobPath"/>
																															</propertyReferenceExpression>
																															<primitiveExpression value="1"/>
																														</binaryOperatorExpression>
																													</parameters>
																												</methodInvokeExpression>
																												<methodInvokeExpression methodName="RemoveAt">
																													<target>
																														<variableReferenceExpression name="blobPath"/>
																													</target>
																													<parameters>
																														<binaryOperatorExpression operator="Subtract">
																															<propertyReferenceExpression name="Count">
																																<variableReferenceExpression name="blobPath"/>
																															</propertyReferenceExpression>
																															<primitiveExpression value="1"/>
																														</binaryOperatorExpression>
																													</parameters>
																												</methodInvokeExpression>
																												<conditionStatement>
																													<condition>
																														<binaryOperatorExpression operator="ValueEquality">
																															<propertyReferenceExpression name="LatestVersion">
																																<typeReferenceExpression type="RESTfulResource"/>
																															</propertyReferenceExpression>
																															<propertyReferenceExpression name="Controller"/>
																														</binaryOperatorExpression>
																													</condition>
																													<trueStatements>
																														<methodInvokeExpression methodName="Add">
																															<target>
																																<variableReferenceExpression name="blobPath"/>
																															</target>
																															<parameters>
																																<propertyReferenceExpression name="LatestVersionLink"/>
																															</parameters>
																														</methodInvokeExpression>
																													</trueStatements>
																												</conditionStatement>
																												<methodInvokeExpression methodName="Add">
																													<target>
																														<variableReferenceExpression name="blobPath"/>
																													</target>
																													<parameters>
																														<variableReferenceExpression name="newFileName"/>
																													</parameters>
																												</methodInvokeExpression>
																												<assignStatement>
																													<variableReferenceExpression name="v"/>
																													<methodInvokeExpression methodName="Join">
																														<target>
																															<typeReferenceExpression type="System.String"/>
																														</target>
																														<parameters>
																															<primitiveExpression value="/"/>
																															<variableReferenceExpression name="blobPath"/>
																														</parameters>
																													</methodInvokeExpression>
																												</assignStatement>
																											</trueStatements>
																										</conditionStatement>
																										<breakStatement/>
																									</trueStatements>
																								</conditionStatement>
																								<assignStatement>
																									<variableReferenceExpression name="fileNameFieldIndex"/>
																									<binaryOperatorExpression operator="Add">
																										<variableReferenceExpression name="fileNameFieldIndex"/>
																										<primitiveExpression value="1"/>
																									</binaryOperatorExpression>
																								</assignStatement>
																							</statements>
																						</foreachStatement>
																						<assignStatement>
																							<variableReferenceExpression name="v"/>
																							<methodInvokeExpression methodName="EnsurePublicApiKeyInUrl">
																								<parameters>
																									<castExpression targetType="System.String">
																										<variableReferenceExpression name="v"/>
																									</castExpression>
																								</parameters>
																							</methodInvokeExpression>
																						</assignStatement>
																					</falseStatements>
																				</conditionStatement>
																			</trueStatements>
																		</conditionStatement>
																	</falseStatements>
																</conditionStatement>
															</trueStatements>
															<falseStatements>
																<comment>the value of the field is "null"</comment>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="IdentityInequality">
																				<variableReferenceExpression name="links"/>
																				<primitiveExpression value="null"/>
																			</binaryOperatorExpression>
																			<unaryOperatorExpression operator="IsNotNullOrEmpty">
																				<propertyReferenceExpression name="ItemsDataController">
																					<variableReferenceExpression name="df"/>
																				</propertyReferenceExpression>
																			</unaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<conditionStatement>
																			<condition>
																				<unaryOperatorExpression operator="IsNotNullOrEmpty">
																					<propertyReferenceExpression name="PathKey"/>
																				</unaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<methodInvokeExpression methodName="CreateLookupLink">
																					<parameters>
																						<variableReferenceExpression name="df"/>
																						<variableReferenceExpression name="links"/>
																					</parameters>
																				</methodInvokeExpression>
																			</trueStatements>
																		</conditionStatement>
																	</trueStatements>
																</conditionStatement>
															</falseStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="BooleanAnd">
																<binaryOperatorExpression operator="IdentityInequality">
																	<variableReferenceExpression name="links"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<propertyReferenceExpression name="ItemsDataController">
																		<variableReferenceExpression name="df"/>
																	</propertyReferenceExpression>
																</unaryOperatorExpression>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="BooleanAnd">
																<binaryOperatorExpression operator="BooleanAnd">
																	<binaryOperatorExpression operator="ValueEquality">
																		<propertyReferenceExpression name="ItemsDataController">
																			<variableReferenceExpression name="df"/>
																		</propertyReferenceExpression>
																		<propertyReferenceExpression name="ControllerName"/>
																	</binaryOperatorExpression>
																	<binaryOperatorExpression operator="ValueEquality">
																		<propertyReferenceExpression name="Count">
																			<variableReferenceExpression name="PK"/>
																		</propertyReferenceExpression>
																		<primitiveExpression value="1"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
																<binaryOperatorExpression operator="BooleanAnd">
																	<binaryOperatorExpression operator="IdentityEquality">
																		<propertyReferenceExpression name="Action"/>
																		<primitiveExpression value="null"/>
																	</binaryOperatorExpression>
																	<methodInvokeExpression methodName="AllowController">
																		<parameters>
																			<propertyReferenceExpression name="ItemsDataController">
																				<variableReferenceExpression name="df"/>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</binaryOperatorExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="childrenPath">
															<init>
																<objectCreateExpression type="List">
																	<typeArguments>
																		<typeReference type="System.String"/>
																	</typeArguments>
																</objectCreateExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNullOrEmpty">
																	<propertyReferenceExpression name="PathKey"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="childrenPath"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="pkAsString"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="childrenPath"/>
															</target>
															<parameters>
																<propertyReferenceExpression name="ChildrenKey"/>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="childrenPath"/>
															</target>
															<parameters>
																<variableReferenceExpression name="pathFieldName"/>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="ExtendLinkWith">
															<parameters>
																<primitiveExpression value="embeddable"/>
																<primitiveExpression value="true"/>
																<methodInvokeExpression methodName="AddLink">
																	<parameters>
																		<propertyReferenceExpression name="ChildrenKey"/>
																		<methodInvokeExpression methodName="ToApiFieldName">
																			<parameters>
																				<propertyReferenceExpression name="Name">
																					<variableReferenceExpression name="df"/>
																				</propertyReferenceExpression>
																			</parameters>
																		</methodInvokeExpression>
																		<primitiveExpression value="GET"/>
																		<variableReferenceExpression name="links"/>
																		<methodInvokeExpression methodName="ExtendRawUrlWith">
																			<parameters>
																				<primitiveExpression value="false"/>
																				<methodInvokeExpression methodName="Join">
																					<target>
																						<typeReferenceExpression type="System.String"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="/"/>
																						<variableReferenceExpression name="childrenPath"/>
																					</parameters>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<variableReferenceExpression name="addValueProperty"/>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="obj"/>
															</target>
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<variableReferenceExpression name="valuePropertyName"/>
																		<variableReferenceExpression name="v"/>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<assignStatement>
													<variableReferenceExpression name="fieldIndex"/>
													<binaryOperatorExpression operator="Add">
														<variableReferenceExpression name="fieldIndex"/>
														<primitiveExpression value="1"/>
													</binaryOperatorExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<conditionStatement>
									<condition>
										<variableReferenceExpression name="requiresSingletonLinks"/>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="Not">
													<variableReferenceExpression name="isRootView"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<methodInvokeExpression methodName="FindAction">
																<parameters>
																	<primitiveExpression value="Update"/>
																</parameters>
															</methodInvokeExpression>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="allowEdit">
															<init>
																<methodInvokeExpression methodName="AllowMethod">
																	<parameters>
																		<propertyReferenceExpression name="ControllerName"/>
																		<primitiveExpression value="PATCH"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<variableReferenceExpression name="allowEdit"/>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="AddLink">
																	<parameters>
																		<primitiveExpression value="editLink"/>
																		<primitiveExpression value="PATCH"/>
																		<variableReferenceExpression name="links"/>
																		<methodInvokeExpression methodName="ExtendRawUrlWith">
																			<parameters>
																				<stringEmptyExpression/>
																			</parameters>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<variableDeclarationStatement name="allowReplace">
															<init>
																<methodInvokeExpression methodName="AllowMethod">
																	<parameters>
																		<propertyReferenceExpression name="ControllerName"/>
																		<primitiveExpression value="PUT"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<variableReferenceExpression name="allowReplace"/>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="AddLink">
																	<parameters>
																		<primitiveExpression value="replaceLink"/>
																		<primitiveExpression value="PUT"/>
																		<variableReferenceExpression name="links"/>
																		<methodInvokeExpression methodName="ExtendRawUrlWith">
																			<parameters>
																				<stringEmptyExpression/>
																			</parameters>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<foreachStatement>
															<variable name="df"/>
															<target>
																<variableReferenceExpression name="fieldList"/>
															</target>
															<statements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="BooleanAnd">
																				<propertyReferenceExpression name="OnDemand">
																					<variableReferenceExpression name="df"/>
																				</propertyReferenceExpression>
																				<unaryOperatorExpression operator="Not">
																					<propertyReferenceExpression name="ReadOnly">
																						<variableReferenceExpression name="df"/>
																					</propertyReferenceExpression>
																				</unaryOperatorExpression>
																			</binaryOperatorExpression>
																			<binaryOperatorExpression operator="BooleanAnd">
																				<unaryOperatorExpression operator="Not">
																					<propertyReferenceExpression name="IsVirtual">
																						<variableReferenceExpression name="df"/>
																					</propertyReferenceExpression>
																				</unaryOperatorExpression>
																				<binaryOperatorExpression operator="BooleanOr">
																					<variableReferenceExpression name="allowEdit"/>
																					<variableReferenceExpression name="allowReplace"/>
																				</binaryOperatorExpression>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="AddLink">
																			<parameters>
																				<primitiveExpression value="replaceLink"/>
																				<methodInvokeExpression methodName="ToApiFieldName">
																					<parameters>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="df"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																				<primitiveExpression value="PUT"/>
																				<variableReferenceExpression name="links"/>
																				<methodInvokeExpression methodName="ExtendRawUrlWith">
																					<parameters>
																						<methodInvokeExpression methodName="ToPathName">
																							<parameters>
																								<propertyReferenceExpression name="Name">
																									<variableReferenceExpression name="df"/>
																								</propertyReferenceExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</parameters>
																		</methodInvokeExpression>
																		<variableDeclarationStatement name="blobValue">
																			<init>
																				<arrayIndexerExpression>
																					<target>
																						<variableReferenceExpression name="obj"/>
																					</target>
																					<indices>
																						<methodInvokeExpression methodName="ToApiFieldName">
																							<parameters>
																								<propertyReferenceExpression name="Name">
																									<variableReferenceExpression name="df"/>
																								</propertyReferenceExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</indices>
																				</arrayIndexerExpression>
																			</init>
																		</variableDeclarationStatement>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="BooleanAnd">
																					<binaryOperatorExpression operator="IdentityInequality">
																						<variableReferenceExpression name="blobValue"/>
																						<primitiveExpression value="null"/>
																					</binaryOperatorExpression>
																					<binaryOperatorExpression operator="ValueInequality">
																						<propertyReferenceExpression name="Type">
																							<variableReferenceExpression name="blobValue"/>
																						</propertyReferenceExpression>
																						<propertyReferenceExpression name="Null">
																							<typeReferenceExpression type="JTokenType"/>
																						</propertyReferenceExpression>
																					</binaryOperatorExpression>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<methodInvokeExpression methodName="AddLink">
																					<parameters>
																						<primitiveExpression value="deleteLink"/>
																						<methodInvokeExpression methodName="ToApiFieldName">
																							<parameters>
																								<propertyReferenceExpression name="Name">
																									<variableReferenceExpression name="df"/>
																								</propertyReferenceExpression>
																							</parameters>
																						</methodInvokeExpression>
																						<primitiveExpression value="DELETE"/>
																						<variableReferenceExpression name="links"/>
																						<methodInvokeExpression methodName="ExtendRawUrlWith">
																							<parameters>
																								<methodInvokeExpression methodName="ToPathName">
																									<parameters>
																										<propertyReferenceExpression name="Name">
																											<variableReferenceExpression name="df"/>
																										</propertyReferenceExpression>
																									</parameters>
																								</methodInvokeExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</trueStatements>
																		</conditionStatement>
																	</trueStatements>
																</conditionStatement>
															</statements>
														</foreachStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="IdentityInequality">
																<methodInvokeExpression methodName="FindAction">
																	<parameters>
																		<primitiveExpression value="Delete"/>
																	</parameters>
																</methodInvokeExpression>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="BooleanAnd">
																<binaryOperatorExpression operator="IdentityEquality">
																	<fieldReferenceExpression name="lookupConfig"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
																<methodInvokeExpression methodName="AllowMethod">
																	<parameters>
																		<propertyReferenceExpression name="ControllerName"/>
																		<primitiveExpression value="DELETE"/>
																	</parameters>
																</methodInvokeExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="AddLink">
															<parameters>
																<primitiveExpression value="deleteLink"/>
																<primitiveExpression value="DELETE"/>
																<variableReferenceExpression name="links"/>
																<methodInvokeExpression methodName="ExtendRawUrlWith">
																	<parameters>
																		<stringEmptyExpression/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="EnumerateActions">
											<parameters>
												<variableReferenceExpression name="links"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="CreateSchemaLink">
											<parameters>
												<variableReferenceExpression name="links"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
									<falseStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IdentityInequality">
														<propertyReferenceExpression name="Action"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<propertyReferenceExpression name="IsSingleton"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="AddLink">
													<parameters>
														<primitiveExpression value="selfLink"/>
														<primitiveExpression value="GET"/>
														<variableReferenceExpression name="links"/>
														<methodInvokeExpression methodName="ReplaceRawUrlWith">
															<parameters>
																<propertyReferenceExpression name="ActionPathName"/>
																<primitiveExpression value="false"/>
																<stringEmptyExpression/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</falseStatements>
								</conditionStatement>
								<methodInvokeExpression methodName="CreateLinks">
									<parameters>
										<variableReferenceExpression name="obj"/>
									</parameters>
								</methodInvokeExpression>
								<methodReturnStatement>
									<variableReferenceExpression name="obj"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method GetProperty(JObject, string, string) -->
						<memberMethod returnType="JToken" name="GetProperty">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="obj"/>
								<parameter type="System.String" name="propName"/>
								<parameter type="System.String" name="propType"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="token">
									<init>
										<arrayIndexerExpression>
											<target>
												<argumentReferenceExpression name="obj"/>
											</target>
											<indices>
												<argumentReferenceExpression name="propName"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="token"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<tryStatement>
											<statements>
												<methodInvokeExpression methodName="ConvertFromString">
													<target>
														<methodInvokeExpression methodName="GetConverter">
															<target>
																<typeReferenceExpression type="TypeDescriptor"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="GetType">
																	<target>
																		<typeReferenceExpression type="Type"/>
																	</target>
																	<parameters>
																		<binaryOperatorExpression operator="Add">
																			<primitiveExpression value="System."/>
																			<argumentReferenceExpression name="propType"/>
																		</binaryOperatorExpression>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</target>
													<parameters>
														<convertExpression to="String">
															<variableReferenceExpression name="token"/>
														</convertExpression>
													</parameters>
												</methodInvokeExpression>
											</statements>
											<catch exceptionType="Exception" localName="ex">
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="invalid_parameter"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Parameter '{0}': {1}]]></xsl:attribute>
														</primitiveExpression>
														<argumentReferenceExpression name="propName"/>
														<propertyReferenceExpression name="Message">
															<variableReferenceExpression name="ex"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</catch>
										</tryStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="token"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method SetPropertyValue(JObject, string, object) -->
						<memberMethod name="SetPropertyValue">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="obj"/>
								<parameter type="System.String" name="name"/>
								<parameter type="System.Object" name="value"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="propName">
									<init>
										<methodInvokeExpression methodName="ToApiFieldName">
											<parameters>
												<argumentReferenceExpression name="name"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<argumentReferenceExpression name="value"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="obj"/>
												</target>
												<indices>
													<variableReferenceExpression name="propName"/>
												</indices>
											</arrayIndexerExpression>
											<primitiveExpression value="null"/>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="obj"/>
												</target>
												<indices>
													<variableReferenceExpression name="propName"/>
												</indices>
											</arrayIndexerExpression>
											<methodInvokeExpression methodName="FromObject">
												<target>
													<typeReferenceExpression type="JToken"/>
												</target>
												<parameters>
													<argumentReferenceExpression name="value"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</falseStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method GetPropertyValue(JObject, string, JObject) -->
						<memberMethod returnType="System.Object" name="GetPropertyValue">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="obj"/>
								<parameter type="System.String" name="propName"/>
								<parameter type="JObject" name="schema"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="propSchema">
									<init>
										<arrayIndexerExpression>
											<target>
												<argumentReferenceExpression name="schema"/>
											</target>
											<indices>
												<variableReferenceExpression name="propName"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="result">
									<init>
										<methodInvokeExpression methodName="GetPropertyValue">
											<parameters>
												<argumentReferenceExpression name="obj"/>
												<argumentReferenceExpression name="propName"/>
												<castExpression targetType="System.String">
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="propSchema"/>
														</target>
														<indices>
															<primitiveExpression value="type"/>
														</indices>
													</arrayIndexerExpression>
												</castExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityEquality">
												<variableReferenceExpression name="result"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="IdentityInequality">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="propSchema"/>
													</target>
													<indices>
														<primitiveExpression value="default"/>
													</indices>
												</arrayIndexerExpression>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="result"/>
											<methodInvokeExpression methodName="GetPropertyValue">
												<parameters>
													<castExpression targetType="JObject">
														<arrayIndexerExpression>
															<target>
																<argumentReferenceExpression name="schema"/>
															</target>
															<indices>
																<argumentReferenceExpression name="propName"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
													<primitiveExpression value="default"/>
													<castExpression targetType="System.String">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="propSchema"/>
															</target>
															<indices>
																<primitiveExpression value="type"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IsTypeOf">
														<variableReferenceExpression name="result"/>
														<typeReferenceExpression type="System.String"/>
													</binaryOperatorExpression>
													<methodInvokeExpression methodName="StartsWith">
														<target>
															<castExpression targetType="System.String">
																<variableReferenceExpression name="result"/>
															</castExpression>
														</target>
														<parameters>
															<primitiveExpression value="$"/>
														</parameters>
													</methodInvokeExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="namedValue">
													<init>
														<castExpression targetType="System.String">
															<variableReferenceExpression name="result"/>
														</castExpression>
													</init>
												</variableDeclarationStatement>
												<assignStatement>
													<variableReferenceExpression name="result"/>
													<primitiveExpression value="null"/>
												</assignStatement>
												<variableDeclarationStatement name="login">
													<init>
														<methodInvokeExpression methodName="AuthorizationToLogin">
															<target>
																<typeReferenceExpression type="RESTfulResource"/>
															</target>
															<parameters>
																<primitiveExpression value="null"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<variableReferenceExpression name="login"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<variableReferenceExpression name="namedValue"/>
																	<primitiveExpression value="$username"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="result"/>
																	<arrayIndexerExpression>
																		<target>
																			<variableReferenceExpression name="login"/>
																		</target>
																		<indices>
																			<primitiveExpression value="0"/>
																		</indices>
																	</arrayIndexerExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<variableReferenceExpression name="namedValue"/>
																	<primitiveExpression value="$password"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="result"/>
																	<arrayIndexerExpression>
																		<target>
																			<variableReferenceExpression name="login"/>
																		</target>
																		<indices>
																			<primitiveExpression value="1"/>
																		</indices>
																	</arrayIndexerExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IsTypeOf">
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="propSchema"/>
												</target>
												<indices>
													<primitiveExpression value="values"/>
												</indices>
											</arrayIndexerExpression>
											<typeReferenceExpression type="JArray"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IdentityInequality">
														<variableReferenceExpression name="result"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="ValueEquality">
														<methodInvokeExpression methodName="IndexOf">
															<target>
																<typeReferenceExpression type="Array"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="ToObject">
																	<typeArguments>
																		<typeReference type="System.String[]"/>
																	</typeArguments>
																	<target>
																		<castExpression targetType="JArray">
																			<arrayIndexerExpression>
																				<target>
																					<variableReferenceExpression name="propSchema"/>
																				</target>
																				<indices>
																					<primitiveExpression value="values"/>
																				</indices>
																			</arrayIndexerExpression>
																		</castExpression>
																	</target>
																</methodInvokeExpression>
																<convertExpression to="String">
																	<variableReferenceExpression name="result"/>
																</convertExpression>
															</parameters>
														</methodInvokeExpression>
														<primitiveExpression value="-1"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="400"/>
														<primitiveExpression value="true"/>
														<primitiveExpression value="invalid_argument"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Value '{0}' specified in '{1}' is invalid.]]></xsl:attribute>
														</primitiveExpression>
														<variableReferenceExpression name="result"/>
														<propertyReferenceExpression name="Path">
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="obj"/>
																</target>
																<indices>
																	<argumentReferenceExpression name="propName"/>
																</indices>
															</arrayIndexerExpression>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method GetPropertyValue(JObject, string, string) -->
						<memberMethod returnType="System.Object" name="GetPropertyValue">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="obj"/>
								<parameter type="System.String" name="propName"/>
								<parameter type="System.String" name="propType"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.Object" name="result" var="false">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="token">
									<init>
										<arrayIndexerExpression>
											<target>
												<argumentReferenceExpression name="obj"/>
											</target>
											<indices>
												<argumentReferenceExpression name="propName"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityInequality">
												<variableReferenceExpression name="token"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="ValueInequality">
												<propertyReferenceExpression name="Type">
													<variableReferenceExpression name="token"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="Null">
													<typeReferenceExpression type="JTokenType"/>
												</propertyReferenceExpression>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<tryStatement>
											<statements>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNullOrEmpty">
															<argumentReferenceExpression name="propType"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<argumentReferenceExpression name="propType"/>
															<primitiveExpression value="String"/>
														</assignStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<propertyReferenceExpression name="Type">
																		<variableReferenceExpression name="token"/>
																	</propertyReferenceExpression>
																	<propertyReferenceExpression name="Integer">
																		<typeReferenceExpression type="JTokenType"/>
																	</propertyReferenceExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<argumentReferenceExpression name="propType"/>
																	<primitiveExpression value="Int64"/>
																</assignStatement>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<propertyReferenceExpression name="Type">
																				<variableReferenceExpression name="token"/>
																			</propertyReferenceExpression>
																			<propertyReferenceExpression name="Float">
																				<typeReferenceExpression type="JTokenType"/>
																			</propertyReferenceExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<argumentReferenceExpression name="propType"/>
																			<primitiveExpression value="Double"/>
																		</assignStatement>
																	</trueStatements>
																	<falseStatements>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="ValueEquality">
																					<propertyReferenceExpression name="Type">
																						<variableReferenceExpression name="token"/>
																					</propertyReferenceExpression>
																					<propertyReferenceExpression name="Boolean">
																						<typeReferenceExpression type="JTokenType"/>
																					</propertyReferenceExpression>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<argumentReferenceExpression name="propType"/>
																					<primitiveExpression value="Boolean"/>
																				</assignStatement>
																			</trueStatements>
																			<falseStatements>
																				<conditionStatement>
																					<condition>
																						<binaryOperatorExpression operator="ValueEquality">
																							<propertyReferenceExpression name="Type">
																								<variableReferenceExpression name="token"/>
																							</propertyReferenceExpression>
																							<propertyReferenceExpression name="Date">
																								<typeReferenceExpression type="JTokenType"/>
																							</propertyReferenceExpression>
																						</binaryOperatorExpression>
																					</condition>
																					<trueStatements>
																						<assignStatement>
																							<argumentReferenceExpression name="propType"/>
																							<primitiveExpression value="DateTime"/>
																						</assignStatement>
																					</trueStatements>
																					<falseStatements>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="ValueEquality">
																									<propertyReferenceExpression name="Type">
																										<variableReferenceExpression name="token"/>
																									</propertyReferenceExpression>
																									<propertyReferenceExpression name="Guid">
																										<typeReferenceExpression type="JTokenType"/>
																									</propertyReferenceExpression>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<assignStatement>
																									<variableReferenceExpression name="result"/>
																									<methodInvokeExpression methodName="Parse">
																										<target>
																											<typeReferenceExpression type="Guid"/>
																										</target>
																										<parameters>
																											<convertExpression to="String">
																												<variableReferenceExpression name="token"/>
																											</convertExpression>
																										</parameters>
																									</methodInvokeExpression>
																								</assignStatement>
																							</trueStatements>
																						</conditionStatement>
																					</falseStatements>
																				</conditionStatement>
																			</falseStatements>
																		</conditionStatement>
																	</falseStatements>
																</conditionStatement>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityEquality">
															<variableReferenceExpression name="result"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="result"/>
															<methodInvokeExpression methodName="ConvertFromString">
																<target>
																	<methodInvokeExpression methodName="GetConverter">
																		<target>
																			<typeReferenceExpression type="TypeDescriptor"/>
																		</target>
																		<parameters>
																			<methodInvokeExpression methodName="GetType">
																				<target>
																					<typeReferenceExpression type="Type"/>
																				</target>
																				<parameters>
																					<binaryOperatorExpression operator="Add">
																						<primitiveExpression value="System."/>
																						<argumentReferenceExpression name="propType"/>
																					</binaryOperatorExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</parameters>
																	</methodInvokeExpression>
																</target>
																<parameters>
																	<convertExpression to="String">
																		<variableReferenceExpression name="token"/>
																	</convertExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
											<catch exceptionType="Exception" localName="ex">
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="400"/>
														<primitiveExpression value="true"/>
														<primitiveExpression value="invalid_argument"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Field '{0}': {1}]]></xsl:attribute>
														</primitiveExpression>
														<propertyReferenceExpression name="Path">
															<variableReferenceExpression name="token"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="Message">
															<variableReferenceExpression name="ex"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</catch>
										</tryStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method EnumerateActions(JProperty) -->
						<memberMethod name="EnumerateActions">
							<attributes public="true" final="true"/>
							<parameters>
								<parameter type="JProperty" name="links"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<propertyReferenceExpression name="IsCollection"/>
											<binaryOperatorExpression operator="IdentityInequality">
												<methodInvokeExpression methodName="FindAction">
													<parameters>
														<primitiveExpression value="Insert"/>
													</parameters>
												</methodInvokeExpression>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="defaultCreateView">
											<init>
												<methodInvokeExpression methodName="DefaultView">
													<parameters>
														<primitiveExpression value="POST"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<foreachStatement>
											<variable name="viewId"/>
											<target>
												<methodInvokeExpression methodName="EnumerateViews">
													<parameters>
														<primitiveExpression value="POST"/>
														<primitiveExpression value="null"/>
													</parameters>
												</methodInvokeExpression>
											</target>
											<statements>
												<variableDeclarationStatement name="createView">
													<init>
														<methodInvokeExpression methodName="ToPathName">
															<parameters>
																<variableReferenceExpression name="viewId"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<variableReferenceExpression name="viewId"/>
															<variableReferenceExpression name="defaultCreateView"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="createView"/>
															<stringEmptyExpression/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="AllowMethod">
															<parameters>
																<propertyReferenceExpression name="Controller"/>
																<primitiveExpression value="POST"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="AddLink">
															<parameters>
																<primitiveExpression value="createLink"/>
																<variableReferenceExpression name="createView"/>
																<primitiveExpression value="POST"/>
																<argumentReferenceExpression name="links"/>
																<methodInvokeExpression methodName="ExtendRawUrlWith">
																	<parameters>
																		<primitiveExpression value="false"/>
																		<variableReferenceExpression name="createView"/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<foreachStatement>
									<variable name="match"/>
									<target>
										<methodInvokeExpression methodName="EnumerateActions">
											<parameters>
												<primitiveExpression value="Custom"/>
												<primitiveExpression value="-1"/>
												<primitiveExpression value="true"/>
											</parameters>
										</methodInvokeExpression>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="AllowMethod">
													<parameters>
														<propertyReferenceExpression name="ControllerName"/>
														<propertyReferenceExpression name="Key">
															<variableReferenceExpression name="match"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="AddLink">
													<parameters>
														<propertyReferenceExpression name="Key">
															<variableReferenceExpression name="match"/>
														</propertyReferenceExpression>
														<primitiveExpression value="POST"/>
														<variableReferenceExpression name="links"/>
														<methodInvokeExpression methodName="ExtendRawUrlWith">
															<parameters>
																<propertyReferenceExpression name="Key">
																	<variableReferenceExpression name="match"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<foreachStatement>
									<variable name="match"/>
									<target>
										<methodInvokeExpression methodName="EnumerateActions">
											<parameters>
												<primitiveExpression value="Report"/>
												<primitiveExpression value="-1"/>
												<primitiveExpression value="true"/>
											</parameters>
										</methodInvokeExpression>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="AllowMethod">
													<parameters>
														<propertyReferenceExpression name="ControllerName"/>
														<propertyReferenceExpression name="Key">
															<variableReferenceExpression name="match"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="reportMethod">
													<init>
														<primitiveExpression value="GET"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNotNullOrEmpty">
															<methodInvokeExpression methodName="GetAttribute">
																<target>
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="match"/>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<primitiveExpression value="confirmation"/>
																	<stringEmptyExpression/>
																</parameters>
															</methodInvokeExpression>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="reportMethod"/>
															<primitiveExpression value="POST"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<variableDeclarationStatement name="allQueryParams">
													<init>
														<methodInvokeExpression methodName="ToQueryParams">
															<parameters>
																<methodInvokeExpression methodName="ReplaceRawUrlWith">
																	<parameters>
																		<stringEmptyExpression/>
																		<primitiveExpression value="true"/>
																		<propertyReferenceExpression name="Key">
																			<variableReferenceExpression name="match"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="reportActionUrl">
													<init>
														<methodInvokeExpression methodName="ExtendRawUrlWith">
															<parameters>
																<propertyReferenceExpression name="Key">
																	<variableReferenceExpression name="match"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="queryParams">
													<init>
														<objectCreateExpression type="StringBuilder">
															<parameters>
																<primitiveExpression value="?"/>
															</parameters>
														</objectCreateExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="System.String" name="p" var="false">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="TryGetValue">
															<target>
																<variableReferenceExpression name="allQueryParams"/>
															</target>
															<parameters>
																<propertyReferenceExpression name="FilterParam"/>
																<directionExpression direction="Out">
																	<variableReferenceExpression name="p"/>
																</directionExpression>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="AppendFormat">
															<target>
																<variableReferenceExpression name="queryParams"/>
															</target>
															<parameters>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[{0}={1}]]></xsl:attribute>
																</primitiveExpression>
																<propertyReferenceExpression name="FilterParam"/>
																<variableReferenceExpression name="p"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="TryGetValue">
															<target>
																<variableReferenceExpression name="allQueryParams"/>
															</target>
															<parameters>
																<primitiveExpression value="sort"/>
																<directionExpression direction="Out">
																	<variableReferenceExpression name="p"/>
																</directionExpression>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="GreaterThan">
																	<propertyReferenceExpression name="Length">
																		<variableReferenceExpression name="queryParams"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="1"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="Append">
																	<target>
																		<variableReferenceExpression name="queryParams"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="&amp;"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<methodInvokeExpression methodName="AppendFormat">
															<target>
																<variableReferenceExpression name="queryParams"/>
															</target>
															<parameters>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[{0}={1}]]></xsl:attribute>
																</primitiveExpression>
																<primitiveExpression value="sort"/>
																<variableReferenceExpression name="p"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="Length">
																<variableReferenceExpression name="queryParams"/>
															</propertyReferenceExpression>
															<primitiveExpression value="1"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="Clear">
															<target>
																<variableReferenceExpression name="queryParams"/>
															</target>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<methodInvokeExpression methodName="AddLink">
													<parameters>
														<propertyReferenceExpression name="Key">
															<variableReferenceExpression name="match"/>
														</propertyReferenceExpression>
														<variableReferenceExpression name="reportMethod"/>
														<argumentReferenceExpression name="links"/>
														<binaryOperatorExpression operator="Add">
															<variableReferenceExpression name="reportActionUrl"/>
															<methodInvokeExpression methodName="ToString">
																<target>
																	<variableReferenceExpression name="queryParams"/>
																</target>
															</methodInvokeExpression>
														</binaryOperatorExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
							</statements>
						</memberMethod>
						<!-- CreateSchemaLink(JProperty) -->
						<memberMethod name="CreateSchemaLink">
							<attributes public="true" final="true"/>
							<parameters>
								<parameter type="JProperty" name="links"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<unaryOperatorExpression operator="Not">
												<propertyReferenceExpression name="RequiresSchema"/>
											</unaryOperatorExpression>
											<propertyReferenceExpression name="Hypermedia"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="AddLink">
											<parameters>
												<primitiveExpression value="schemaLink"/>
												<primitiveExpression value="GET"/>
												<argumentReferenceExpression name="links"/>
												<methodInvokeExpression methodName="ExtendRawUrlWith">
													<parameters>
														<primitiveExpression value="true"/>
														<primitiveExpression value="?_schema=true"/>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method CreateUpLink(JProperty) -->
						<memberMethod name="CreateUpLink">
							<attributes public="true" final="true"/>
							<parameters>
								<parameter type="JProperty" name="links"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="upUrl">
									<init>
										<methodInvokeExpression methodName="ReplaceRawUrlWith">
											<parameters>
												<propertyReferenceExpression name="LastEntity"/>
												<primitiveExpression value="false"/>
												<stringEmptyExpression/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="EndsWith">
											<target>
												<variableReferenceExpression name="upUrl"/>
											</target>
											<parameters>
												<binaryOperatorExpression operator="Add">
													<primitiveExpression value="/"/>
													<propertyReferenceExpression name="ChildrenKey"/>
												</binaryOperatorExpression>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="upUrl"/>
											<methodInvokeExpression methodName="Substring">
												<target>
													<variableReferenceExpression name="upUrl"/>
												</target>
												<parameters>
													<primitiveExpression value="0"/>
													<binaryOperatorExpression operator="Subtract">
														<binaryOperatorExpression operator="Subtract">
															<propertyReferenceExpression name="Length">
																<variableReferenceExpression name="upUrl"/>
															</propertyReferenceExpression>
															<propertyReferenceExpression name="Length">
																<propertyReferenceExpression name="ChildrenKey"/>
															</propertyReferenceExpression>
														</binaryOperatorExpression>
														<primitiveExpression value="1"/>
													</binaryOperatorExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodInvokeExpression methodName="AddLink">
									<parameters>
										<primitiveExpression value="upLink"/>
										<primitiveExpression value="GET"/>
										<argumentReferenceExpression name="links"/>
										<variableReferenceExpression name="upUrl"/>
									</parameters>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method CreateLookupLink(DataField, JProperty) -->
						<memberMethod name="CreateLookupLink">
							<attributes public="true" final="true"/>
							<parameters>
								<parameter type="DataField" name="field"/>
								<parameter type="JProperty" name="links"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityEquality">
												<propertyReferenceExpression name="Action"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<convertExpression to="Boolean">
												<methodInvokeExpression methodName="SettingsProperty">
													<target>
														<typeReferenceExpression type="ApplicationServicesBase"/>
													</target>
													<parameters>
														<primitiveExpression value="server.rest.hypermedia.links.lookups"/>
														<primitiveExpression value="true"/>
													</parameters>
												</methodInvokeExpression>
											</convertExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="lookupFieldNames">
											<init>
												<objectCreateExpression type="List">
													<typeArguments>
														<typeReference type="System.String"/>
													</typeArguments>
												</objectCreateExpression>
											</init>
										</variableDeclarationStatement>
										<comment>fetch "value" and "text" feilds</comment>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<propertyReferenceExpression name="ItemsDataValueField">
														<argumentReferenceExpression name="field"/>
													</propertyReferenceExpression>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="lookupFieldNames"/>
													</target>
													<parameters>
														<methodInvokeExpression methodName="ToApiFieldName">
															<parameters>
																<propertyReferenceExpression name="ItemsDataValueField">
																	<variableReferenceExpression name="field"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<propertyReferenceExpression name="ItemsDataTextField">
														<argumentReferenceExpression name="field"/>
													</propertyReferenceExpression>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="lookupFieldNames"/>
													</target>
													<parameters>
														<methodInvokeExpression methodName="ToApiFieldName">
															<parameters>
																<propertyReferenceExpression name="ItemsDataTextField">
																	<variableReferenceExpression name="field"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<comment>add "copy" fields</comment>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<propertyReferenceExpression name="Copy">
														<argumentReferenceExpression name="field"/>
													</propertyReferenceExpression>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<foreachStatement>
													<variable type="Match" name="m" var="false"/>
													<target>
														<methodInvokeExpression methodName="Matches">
															<target>
																<typeReferenceExpression type="Regex"/>
															</target>
															<parameters>
																<propertyReferenceExpression name="Copy">
																	<variableReferenceExpression name="field"/>
																</propertyReferenceExpression>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[(\w+)\s*=\s*(\w+)]]></xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
													</target>
													<statements>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="lookupFieldNames"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="ToApiFieldName">
																	<parameters>
																		<propertyReferenceExpression name="Value">
																			<arrayIndexerExpression>
																				<target>
																					<propertyReferenceExpression name="Groups">
																						<variableReferenceExpression name="m"/>
																					</propertyReferenceExpression>
																				</target>
																				<indices>
																					<primitiveExpression value="2"/>
																				</indices>
																			</arrayIndexerExpression>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</statements>
												</foreachStatement>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement name="fieldsParam">
											<init>
												<methodInvokeExpression methodName="Join">
													<target>
														<typeReferenceExpression type="System.String"/>
													</target>
													<parameters>
														<primitiveExpression value=","/>
														<methodInvokeExpression methodName="ToArray">
															<target>
																<variableReferenceExpression name="lookupFieldNames"/>
															</target>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<variableReferenceExpression name="fieldsParam"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="fieldsParam"/>
													<binaryOperatorExpression operator="Add">
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[&fields=]]></xsl:attribute>
														</primitiveExpression>
														<variableReferenceExpression name="fieldsParam"/>
													</binaryOperatorExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<comment>figure the default lookup view</comment>
										<variableDeclarationStatement name="viewPath">
											<init>
												<propertyReferenceExpression name="ItemsDataView">
													<variableReferenceExpression name="field"/>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<unaryOperatorExpression operator="IsNotNullOrEmpty">
														<variableReferenceExpression name="viewPath"/>
													</unaryOperatorExpression>
													<binaryOperatorExpression operator="ValueInequality">
														<variableReferenceExpression name="viewPath"/>
														<methodInvokeExpression methodName="DefaultView">
															<parameters>
																<primitiveExpression value="collection"/>
																<propertyReferenceExpression name="ItemsDataController">
																	<variableReferenceExpression name="field"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="viewPath"/>
													<binaryOperatorExpression operator="Add">
														<primitiveExpression value="/"/>
														<methodInvokeExpression methodName="ToPathName">
															<parameters>
																<variableReferenceExpression name="viewPath"/>
															</parameters>
														</methodInvokeExpression>
													</binaryOperatorExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="ExtendLinkWith">
											<parameters>
												<primitiveExpression value="embeddable"/>
												<primitiveExpression value="true"/>
												<methodInvokeExpression methodName="AddLink">
													<parameters>
														<binaryOperatorExpression operator="Add">
															<primitiveExpression value="lookup-"/>
															<methodInvokeExpression methodName="ToApiFieldName">
																<parameters>
																	<propertyReferenceExpression name="Name">
																		<variableReferenceExpression name="field"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
														</binaryOperatorExpression>
														<primitiveExpression value="GET"/>
														<argumentReferenceExpression name="links"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[/{0}{1}?count=true{2}]]></xsl:attribute>
														</primitiveExpression>
														<methodInvokeExpression methodName="ToPathName">
															<parameters>
																<propertyReferenceExpression name="ItemsDataController">
																	<variableReferenceExpression name="field"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
														<variableReferenceExpression name="viewPath"/>
														<variableReferenceExpression name="fieldsParam"/>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="ValueEquality">
														<propertyReferenceExpression name="ItemsDataController">
															<variableReferenceExpression name="field"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="ControllerName"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="BooleanAnd">
														<propertyReferenceExpression name="IsCollection"/>
														<propertyReferenceExpression name="IsRoot"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="ExtendLinkWith">
													<parameters>
														<primitiveExpression value="embeddable"/>
														<primitiveExpression value="true"/>
														<methodInvokeExpression methodName="AddLink">
															<parameters>
																<propertyReferenceExpression name="RootKey"/>
																<methodInvokeExpression methodName="ToApiFieldName">
																	<parameters>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="field"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
																<primitiveExpression value="GET"/>
																<argumentReferenceExpression name="links"/>
																<methodInvokeExpression methodName="ExtendRawUrlWith">
																	<parameters>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[/root/{0}?count=true]]></xsl:attribute>
																		</primitiveExpression>
																		<methodInvokeExpression methodName="ToPathName">
																			<parameters>
																				<propertyReferenceExpression name="Name">
																					<variableReferenceExpression name="field"/>
																				</propertyReferenceExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method EnumerateSchemaProperties(JObject, string, string, JObject) -->
						<memberMethod name="EnumerateSchemaProperties">
							<attributes family="true"/>
							<parameters>
								<parameter type="JObject" name="schema"/>
								<parameter type="System.String" name="inputKey"/>
								<parameter type="JObject" name="target"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="JObject" name="source">
									<init>
										<methodInvokeExpression methodName="FindSchemaInput">
											<parameters>
												<argumentReferenceExpression name="schema"/>
												<argumentReferenceExpression name="inputKey"/>
												<binaryOperatorExpression operator="ValueInequality">
													<argumentReferenceExpression name="inputKey"/>
													<primitiveExpression value="_input"/>
												</binaryOperatorExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="source"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<foreachStatement>
											<variable name="f"/>
											<target>
												<methodInvokeExpression methodName="Properties">
													<target>
														<variableReferenceExpression name="source"/>
													</target>
												</methodInvokeExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="Type">
																<propertyReferenceExpression name="Value">
																	<variableReferenceExpression name="f"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
															<propertyReferenceExpression name="Object">
																<typeReferenceExpression type="JTokenType"/>
															</propertyReferenceExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="fieldSchema">
															<init>
																<objectCreateExpression type="JObject"/>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement name="targetSchema">
															<init>
																<variableReferenceExpression name="target"/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<methodInvokeExpression methodName="StartsWith">
																		<target>
																			<argumentReferenceExpression name="inputKey"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="_"/>
																		</parameters>
																	</methodInvokeExpression>
																	<binaryOperatorExpression operator="ValueInequality">
																		<argumentReferenceExpression name="inputKey"/>
																		<primitiveExpression value="_output"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement name="targetSchemaWrapper">
																	<init>
																		<castExpression targetType="JObject">
																			<arrayIndexerExpression>
																				<target>
																					<argumentReferenceExpression name="target"/>
																				</target>
																				<indices>
																					<argumentReferenceExpression name="inputKey"/>
																				</indices>
																			</arrayIndexerExpression>
																		</castExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityEquality">
																			<variableReferenceExpression name="targetSchemaWrapper"/>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="targetSchemaWrapper"/>
																			<objectCreateExpression type="JObject"/>
																		</assignStatement>
																		<variableDeclarationStatement name="p">
																			<init>
																				<objectCreateExpression type="JProperty">
																					<parameters>
																						<argumentReferenceExpression name="inputKey"/>
																						<variableReferenceExpression name="targetSchemaWrapper"/>
																					</parameters>
																				</objectCreateExpression>
																			</init>
																		</variableDeclarationStatement>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="BooleanOr">
																					<binaryOperatorExpression operator="ValueEquality">
																						<argumentReferenceExpression name="inputKey"/>
																						<primitiveExpression value="_parameters"/>
																					</binaryOperatorExpression>
																					<binaryOperatorExpression operator="ValueEquality">
																						<argumentReferenceExpression name="inputKey"/>
																						<primitiveExpression value="_path"/>
																					</binaryOperatorExpression>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<methodInvokeExpression methodName="AddFirst">
																					<target>
																						<variableReferenceExpression name="target"/>
																					</target>
																					<parameters>
																						<variableReferenceExpression name="p"/>
																					</parameters>
																				</methodInvokeExpression>
																			</trueStatements>
																			<falseStatements>
																				<methodInvokeExpression methodName="Add">
																					<target>
																						<variableReferenceExpression name="target"/>
																					</target>
																					<parameters>
																						<variableReferenceExpression name="p"/>
																					</parameters>
																				</methodInvokeExpression>
																			</falseStatements>
																		</conditionStatement>
																	</trueStatements>
																</conditionStatement>
																<assignStatement>
																	<variableReferenceExpression name="targetSchema"/>
																	<castExpression targetType="JObject">
																		<arrayIndexerExpression>
																			<target>
																				<variableReferenceExpression name="targetSchemaWrapper"/>
																			</target>
																			<indices>
																				<propertyReferenceExpression name="SchemaKey"/>
																			</indices>
																		</arrayIndexerExpression>
																	</castExpression>
																</assignStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityEquality">
																			<variableReferenceExpression name="targetSchema"/>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="targetSchema"/>
																			<objectCreateExpression type="JObject"/>
																		</assignStatement>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="targetSchemaWrapper"/>
																			</target>
																			<parameters>
																				<objectCreateExpression type="JProperty">
																					<parameters>
																						<propertyReferenceExpression name="SchemaKey"/>
																						<variableReferenceExpression name="targetSchema"/>
																					</parameters>
																				</objectCreateExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="targetSchema"/>
															</target>
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="f"/>
																		</propertyReferenceExpression>
																		<variableReferenceExpression name="fieldSchema"/>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<arrayIndexerExpression>
																		<target>
																			<propertyReferenceExpression name="Value">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																		</target>
																		<indices>
																			<primitiveExpression value="properties"/>
																		</indices>
																	</arrayIndexerExpression>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement name="hint">
																	<init>
																		<arrayIndexerExpression>
																			<target>
																				<propertyReferenceExpression name="Value">
																					<variableReferenceExpression name="f"/>
																				</propertyReferenceExpression>
																			</target>
																			<indices>
																				<primitiveExpression value="hint"/>
																			</indices>
																		</arrayIndexerExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityInequality">
																			<variableReferenceExpression name="hint"/>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="fieldSchema"/>
																			</target>
																			<parameters>
																				<objectCreateExpression type="JProperty">
																					<parameters>
																						<primitiveExpression value="hint"/>
																						<variableReferenceExpression name="hint"/>
																					</parameters>
																				</objectCreateExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<convertExpression to="Boolean">
																			<arrayIndexerExpression>
																				<target>
																					<propertyReferenceExpression name="Value">
																						<variableReferenceExpression name="f"/>
																					</propertyReferenceExpression>
																				</target>
																				<indices>
																					<primitiveExpression value="required"/>
																				</indices>
																			</arrayIndexerExpression>
																		</convertExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="fieldSchema"/>
																			</target>
																			<parameters>
																				<objectCreateExpression type="JProperty">
																					<parameters>
																						<primitiveExpression value="required"/>
																						<primitiveExpression value="true"/>
																					</parameters>
																				</objectCreateExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<convertExpression to="Boolean">
																			<arrayIndexerExpression>
																				<target>
																					<propertyReferenceExpression name="Value">
																						<variableReferenceExpression name="f"/>
																					</propertyReferenceExpression>
																				</target>
																				<indices>
																					<primitiveExpression value="array"/>
																				</indices>
																			</arrayIndexerExpression>
																		</convertExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="fieldSchema"/>
																			</target>
																			<parameters>
																				<objectCreateExpression type="JProperty">
																					<parameters>
																						<primitiveExpression value="array"/>
																						<primitiveExpression value="true"/>
																					</parameters>
																				</objectCreateExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
																<variableDeclarationStatement name="complexFieldSchema">
																	<init>
																		<objectCreateExpression type="JObject"/>
																	</init>
																</variableDeclarationStatement>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="fieldSchema"/>
																	</target>
																	<parameters>
																		<objectCreateExpression type="JProperty">
																			<parameters>
																				<propertyReferenceExpression name="SchemaKey"/>
																				<variableReferenceExpression name="complexFieldSchema"/>
																			</parameters>
																		</objectCreateExpression>
																	</parameters>
																</methodInvokeExpression>
																<methodInvokeExpression methodName="EnumerateSchemaProperties">
																	<parameters>
																		<castExpression targetType="JObject">
																			<propertyReferenceExpression name="Value">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																		</castExpression>
																		<primitiveExpression value="properties"/>
																		<variableReferenceExpression name="complexFieldSchema"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
															<falseStatements>
																<foreachStatement>
																	<variable name="p"/>
																	<target>
																		<methodInvokeExpression methodName="Properties">
																			<target>
																				<castExpression targetType="JObject">
																					<propertyReferenceExpression name="Value">
																						<variableReferenceExpression name="f"/>
																					</propertyReferenceExpression>
																				</castExpression>
																			</target>
																		</methodInvokeExpression>
																	</target>
																	<statements>
																		<conditionStatement>
																			<condition>
																				<methodInvokeExpression methodName="IsMatch">
																					<target>
																						<typeReferenceExpression type="Regex"/>
																					</target>
																					<parameters>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="p"/>
																						</propertyReferenceExpression>
																						<primitiveExpression>
																							<xsl:attribute name="value"><![CDATA[type|length|default|required|key|readOnly|lookup|child|blob|label|footer|hint|values|literal]]></xsl:attribute>
																						</primitiveExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</condition>
																			<trueStatements>
																				<methodInvokeExpression methodName="Add">
																					<target>
																						<variableReferenceExpression name="fieldSchema"/>
																					</target>
																					<parameters>
																						<objectCreateExpression type="JProperty">
																							<parameters>
																								<propertyReferenceExpression name="Name">
																									<variableReferenceExpression name="p"/>
																								</propertyReferenceExpression>
																								<propertyReferenceExpression name="Value">
																									<variableReferenceExpression name="p"/>
																								</propertyReferenceExpression>
																							</parameters>
																						</objectCreateExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</trueStatements>
																		</conditionStatement>
																	</statements>
																</foreachStatement>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method AddSchema(JObject) -->
						<memberMethod name="AddSchema">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="result"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityInequality">
												<argumentReferenceExpression name="result"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="IdentityInequality">
												<arrayIndexerExpression>
													<target>
														<argumentReferenceExpression name="result"/>
													</target>
													<indices>
														<primitiveExpression value="error"/>
													</indices>
												</arrayIndexerExpression>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="Not">
													<propertyReferenceExpression name="AllowsSchema"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Add">
													<target>
														<castExpression targetType="JObject">
															<propertyReferenceExpression name="First">
																<castExpression targetType="JArray">
																	<arrayIndexerExpression>
																		<target>
																			<arrayIndexerExpression>
																				<target>
																					<argumentReferenceExpression name="result"/>
																				</target>
																				<indices>
																					<primitiveExpression value="error"/>
																				</indices>
																			</arrayIndexerExpression>
																		</target>
																		<indices>
																			<primitiveExpression value="errors"/>
																		</indices>
																	</arrayIndexerExpression>
																</castExpression>
															</propertyReferenceExpression>
														</castExpression>
													</target>
													<parameters>
														<objectCreateExpression type="JProperty">
															<parameters>
																<primitiveExpression value="hint"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[Set 'server.rest.schema.enabled' to true in the settings to get more information about this resource.]]></xsl:attribute>
																</primitiveExpression>
															</parameters>
														</objectCreateExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="BooleanOr">
												<unaryOperatorExpression operator="Not">
													<propertyReferenceExpression name="RequiresSchema"/>
												</unaryOperatorExpression>
												<unaryOperatorExpression operator="Not">
													<propertyReferenceExpression name="AllowsSchema"/>
												</unaryOperatorExpression>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="IdentityEquality">
												<argumentReferenceExpression name="result"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement/>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="schema">
									<init>
										<objectCreateExpression type="JObject"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="schemaProp">
									<init>
										<objectCreateExpression type="JProperty">
											<parameters>
												<propertyReferenceExpression name="SchemaKey"/>
												<variableReferenceExpression name="schema"/>
											</parameters>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="result"/>
												</target>
												<indices>
													<primitiveExpression value="error"/>
												</indices>
											</arrayIndexerExpression>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="AddFirst">
											<target>
												<argumentReferenceExpression name="result"/>
											</target>
											<parameters>
												<variableReferenceExpression name="schemaProp"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
									<falseStatements>
										<methodInvokeExpression methodName="Add">
											<target>
												<argumentReferenceExpression name="result"/>
											</target>
											<parameters>
												<variableReferenceExpression name="schemaProp"/>
											</parameters>
										</methodInvokeExpression>
									</falseStatements>
								</conditionStatement>
								<methodInvokeExpression methodName="EmbedCustomSchema">
									<parameters>
										<propertyReferenceExpression name="CustomSchema"/>
										<variableReferenceExpression name="schema"/>
									</parameters>
								</methodInvokeExpression>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<propertyReferenceExpression name="Config"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement/>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="fieldList">
									<init>
										<methodInvokeExpression methodName="ToSchemaFields">
											<parameters>
												<propertyReferenceExpression name="ControllerName"/>
												<propertyReferenceExpression name="PathView"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="inputSchema">
									<init>
										<castExpression targetType="JObject">
											<methodInvokeExpression methodName="SelectToken">
												<target>
													<variableReferenceExpression name="schema"/>
												</target>
												<parameters>
													<primitiveExpression value="_input._schema"/>
												</parameters>
											</methodInvokeExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="inputSchema"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<comment>create a '*' key indicating that the output keys fields are also accepted in the input</comment>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="Not">
													<methodInvokeExpression methodName="ContainsKey">
														<target>
															<variableReferenceExpression name="inputSchema"/>
														</target>
														<parameters>
															<primitiveExpression value="*"/>
														</parameters>
													</methodInvokeExpression>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="inputSchema"/>
													</target>
													<parameters>
														<objectCreateExpression type="JProperty">
															<parameters>
																<primitiveExpression value="*"/>
																<primitiveExpression value="true"/>
															</parameters>
														</objectCreateExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<comment>add the fields</comment>
								<methodInvokeExpression methodName="AddFieldsToSchema">
									<parameters>
										<variableReferenceExpression name="schema"/>
										<variableReferenceExpression name="fieldList"/>
									</parameters>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method EmbedCustomSchema(JObject, JObject) -->
						<memberMethod name="EmbedCustomSchema">
							<attributes family="true"/>
							<parameters>
								<parameter type="JObject" name="schema"/>
								<parameter type="JObject" name="target"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="JObject" name="inputSchema" var="false">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueInequality">
											<propertyReferenceExpression name="HttpMethod"/>
											<primitiveExpression value="GET"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="input">
											<init>
												<castExpression targetType="JObject">
													<arrayIndexerExpression>
														<target>
															<argumentReferenceExpression name="target"/>
														</target>
														<indices>
															<primitiveExpression value="_input"/>
														</indices>
													</arrayIndexerExpression>
												</castExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IdentityEquality">
														<variableReferenceExpression name="input"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="IdentityInequality">
														<methodInvokeExpression methodName="FindSchemaInput">
															<parameters>
																<argumentReferenceExpression name="schema"/>
																<primitiveExpression value="_input"/>
																<primitiveExpression value="false"/>
															</parameters>
														</methodInvokeExpression>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="input"/>
													<objectCreateExpression type="JObject"/>
												</assignStatement>
												<methodInvokeExpression methodName="Add">
													<target>
														<argumentReferenceExpression name="target"/>
													</target>
													<parameters>
														<objectCreateExpression type="JProperty">
															<parameters>
																<primitiveExpression value="_input"/>
																<variableReferenceExpression name="input"/>
															</parameters>
														</objectCreateExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="input"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="inputSchema"/>
													<castExpression targetType="JObject">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="input"/>
															</target>
															<indices>
																<propertyReferenceExpression name="SchemaKey"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityEquality">
															<variableReferenceExpression name="inputSchema"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="inputSchema"/>
															<objectCreateExpression type="JObject"/>
														</assignStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="input"/>
															</target>
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<propertyReferenceExpression name="SchemaKey"/>
																		<variableReferenceExpression name="inputSchema"/>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<argumentReferenceExpression name="schema"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="EnumerateSchemaProperties">
											<parameters>
												<argumentReferenceExpression name="schema"/>
												<primitiveExpression value="_parameters"/>
												<argumentReferenceExpression name="target"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="EnumerateSchemaProperties">
											<parameters>
												<argumentReferenceExpression name="schema"/>
												<primitiveExpression value="_path"/>
												<argumentReferenceExpression name="target"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="EnumerateSchemaProperties">
											<parameters>
												<argumentReferenceExpression name="schema"/>
												<primitiveExpression value="_input"/>
												<argumentReferenceExpression name="target"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="EnumerateSchemaProperties">
											<parameters>
												<argumentReferenceExpression name="schema"/>
												<primitiveExpression value="_output"/>
												<argumentReferenceExpression name="target"/>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement name="hint">
											<init>
												<methodInvokeExpression methodName="Trim">
													<target>
														<convertExpression to="String">
															<arrayIndexerExpression>
																<target>
																	<argumentReferenceExpression name="schema"/>
																</target>
																<indices>
																	<primitiveExpression value="hint"/>
																</indices>
															</arrayIndexerExpression>
														</convertExpression>
													</target>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<variableReferenceExpression name="hint"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="outputElements">
													<init>
														<objectCreateExpression type="List">
															<typeArguments>
																<typeReference type="JProperty"/>
															</typeArguments>
														</objectCreateExpression>
													</init>
												</variableDeclarationStatement>
												<foreachStatement>
													<variable name="p"/>
													<target>
														<methodInvokeExpression methodName="Properties">
															<target>
																<argumentReferenceExpression name="target"/>
															</target>
														</methodInvokeExpression>
													</target>
													<statements>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="Not">
																	<methodInvokeExpression methodName="StartsWith">
																		<target>
																			<propertyReferenceExpression name="Name">
																				<variableReferenceExpression name="p"/>
																			</propertyReferenceExpression>
																		</target>
																		<parameters>
																			<primitiveExpression value="_"/>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<propertyReferenceExpression name="outputElements"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="p"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</statements>
												</foreachStatement>
												<methodInvokeExpression methodName="AddFirst">
													<target>
														<argumentReferenceExpression name="target"/>
													</target>
													<parameters>
														<objectCreateExpression type="JProperty">
															<parameters>
																<primitiveExpression value="hint"/>
																<variableReferenceExpression name="hint"/>
															</parameters>
														</objectCreateExpression>
													</parameters>
												</methodInvokeExpression>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="GreaterThan">
															<propertyReferenceExpression name="Count">
																<variableReferenceExpression name="outputElements"/>
															</propertyReferenceExpression>
															<primitiveExpression value="0"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="output">
															<init>
																<objectCreateExpression type="JObject"/>
															</init>
														</variableDeclarationStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<argumentReferenceExpression name="target"/>
															</target>
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<primitiveExpression value="_output"/>
																		<variableReferenceExpression name="output"/>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
														<foreachStatement>
															<variable name="p"/>
															<target>
																<variableReferenceExpression name="outputElements"/>
															</target>
															<statements>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="output"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="p"/>
																	</parameters>
																</methodInvokeExpression>
																<methodInvokeExpression methodName="Remove">
																	<target>
																		<argumentReferenceExpression name="target"/>
																	</target>
																	<parameters>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="p"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</statements>
														</foreachStatement>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method FindSchemaInput(JObject, string, bool) -->
						<memberMethod returnType="JObject" name="FindSchemaInput">
							<attributes public="true" final="true"/>
							<parameters>
								<parameter type="JObject" name="schema"/>
								<parameter type="System.String" name="inputKey"/>
								<parameter type="System.Boolean" name="resolve"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="JObject" name="inputSchema" var="false">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<argumentReferenceExpression name="schema"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="inputSchemaValue">
											<init>
												<arrayIndexerExpression>
													<target>
														<argumentReferenceExpression name="schema"/>
													</target>
													<indices>
														<argumentReferenceExpression name="inputKey"/>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="inputSchemaValue"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="Type">
																<variableReferenceExpression name="inputSchemaValue"/>
															</propertyReferenceExpression>
															<propertyReferenceExpression name="String">
																<typeReferenceExpression type="JTokenType"/>
															</propertyReferenceExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<argumentReferenceExpression name="resolve"/>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="inputSchema"/>
																	<castExpression targetType="JObject">
																		<methodInvokeExpression methodName="SelectToken">
																			<target>
																				<propertyReferenceExpression name="Parent">
																					<propertyReferenceExpression name="Parent">
																						<variableReferenceExpression name="schema"/>
																					</propertyReferenceExpression>
																				</propertyReferenceExpression>
																			</target>
																			<parameters>
																				<convertExpression to="String">
																					<variableReferenceExpression name="inputSchemaValue"/>
																				</convertExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</castExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
													<falseStatements>
														<assignStatement>
															<variableReferenceExpression name="inputSchema"/>
															<castExpression targetType="JObject">
																<variableReferenceExpression name="inputSchemaValue"/>
															</castExpression>
														</assignStatement>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="inputSchema"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ValidateWithSchema(JObject, string, JObject, string) -->
						<memberMethod name="ValidateWithSchema">
							<attributes family="true"/>
							<parameters>
								<parameter type="JObject" name="schema"/>
								<parameter type="System.String" name="inputKey"/>
								<parameter type="JObject" name="payload"/>
								<parameter type="System.String" name="propPath"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="request">
									<init>
										<propertyReferenceExpression name="Request">
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<argumentReferenceExpression name="propPath"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<argumentReferenceExpression name="propPath"/>
											<binaryOperatorExpression operator="Add">
												<argumentReferenceExpression name="propPath"/>
												<primitiveExpression value="."/>
											</binaryOperatorExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="errors">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="RESTfulResourceException"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="JObject" name="inputSchema" var="false">
									<init>
										<methodInvokeExpression methodName="FindSchemaInput">
											<parameters>
												<argumentReferenceExpression name="schema"/>
												<argumentReferenceExpression name="inputKey"/>
												<primitiveExpression value="true"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="inputSchema"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="inputKey"/>
													<primitiveExpression value="_parameters"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<foreachStatement>
													<variable name="paramName"/>
													<target>
														<propertyReferenceExpression name="QueryString">
															<variableReferenceExpression name="request"/>
														</propertyReferenceExpression>
													</target>
													<statements>
														<tryStatement>
															<statements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="ValueEquality">
																				<methodInvokeExpression methodName="IndexOf">
																					<target>
																						<typeReferenceExpression type="Array"/>
																					</target>
																					<parameters>
																						<arrayCreateExpression>
																							<createType type="System.String"/>
																							<initializers>
																								<propertyReferenceExpression name="LinksKey"/>
																								<propertyReferenceExpression name="SchemaKey"/>
																								<propertyReferenceExpression name="EmbedParam"/>
																								<primitiveExpression value="api_key"/>
																								<primitiveExpression value="x-api-key"/>
																							</initializers>
																						</arrayCreateExpression>
																						<variableReferenceExpression name="paramName"/>
																					</parameters>
																				</methodInvokeExpression>
																				<primitiveExpression value="-1"/>
																			</binaryOperatorExpression>
																			<binaryOperatorExpression operator="BooleanOr">
																				<unaryOperatorExpression operator="Not">
																					<propertyReferenceExpression name="IsCollection"/>
																				</unaryOperatorExpression>
																				<binaryOperatorExpression operator="ValueEquality">
																					<methodInvokeExpression methodName="IndexOf">
																						<target>
																							<typeReferenceExpression type="Array"/>
																						</target>
																						<parameters>
																							<arrayCreateExpression>
																								<createType type="System.String"/>
																								<initializers>
																									<propertyReferenceExpression name="FilterParam"/>
																									<primitiveExpression value="sort"/>
																								</initializers>
																							</arrayCreateExpression>
																							<variableReferenceExpression name="paramName"/>
																						</parameters>
																					</methodInvokeExpression>
																					<primitiveExpression value="-1"/>
																				</binaryOperatorExpression>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="400"/>
																				<primitiveExpression value="true"/>
																				<primitiveExpression value="invalid_parameter"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Unexpected parameter '{0}' is specified in the URL.]]></xsl:attribute>
																				</primitiveExpression>
																				<variableReferenceExpression name="paramName"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</statements>
															<catch exceptionType="RESTfulResourceException" localName="ex">
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="errors"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="ex"/>
																	</parameters>
																</methodInvokeExpression>
															</catch>
														</tryStatement>
													</statements>
												</foreachStatement>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="GreaterThan">
													<propertyReferenceExpression name="Count">
														<variableReferenceExpression name="errors"/>
													</propertyReferenceExpression>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<throwExceptionStatement>
													<objectCreateExpression type="RESTfulResourceException">
														<parameters>
															<variableReferenceExpression name="errors"/>
														</parameters>
													</objectCreateExpression>
												</throwExceptionStatement>
											</trueStatements>
										</conditionStatement>
										<methodReturnStatement/>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="inputIsBody">
									<init>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="ValueEquality">
												<argumentReferenceExpression name="inputKey"/>
												<primitiveExpression value="_input"/>
											</binaryOperatorExpression>
											<unaryOperatorExpression operator="Not">
												<methodInvokeExpression methodName="StartsWith">
													<target>
														<argumentReferenceExpression name="inputKey"/>
													</target>
													<parameters>
														<primitiveExpression value="_"/>
													</parameters>
												</methodInvokeExpression>
											</unaryOperatorExpression>
										</binaryOperatorExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="nameType">
									<init>
										<primitiveExpression value="field"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="nameSource">
									<init>
										<primitiveExpression value="body"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="errorType">
									<init>
										<primitiveExpression value="invalid_argument"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="propNames">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<variableReferenceExpression name="inputIsBody"/>
									</condition>
									<trueStatements>
										<foreachStatement>
											<variable name="p"/>
											<target>
												<methodInvokeExpression methodName="Properties">
													<target>
														<argumentReferenceExpression name="payload"/>
													</target>
												</methodInvokeExpression>
											</target>
											<statements>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="propNames"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="Name">
															<variableReferenceExpression name="p"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<argumentReferenceExpression name="inputKey"/>
											<primitiveExpression value="_path"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="nameType"/>
											<primitiveExpression value="resource"/>
										</assignStatement>
										<assignStatement>
											<variableReferenceExpression name="nameSource"/>
											<primitiveExpression value="path"/>
										</assignStatement>
										<assignStatement>
											<variableReferenceExpression name="errorType"/>
											<primitiveExpression value="invalid_path"/>
										</assignStatement>
										<foreachStatement>
											<variable name="p"/>
											<target>
												<methodInvokeExpression methodName="Properties">
													<target>
														<variableReferenceExpression name="inputSchema"/>
													</target>
												</methodInvokeExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<convertExpression to="Boolean">
															<arrayIndexerExpression>
																<target>
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="p"/>
																	</propertyReferenceExpression>
																</target>
																<indices>
																	<primitiveExpression value="literal"/>
																</indices>
															</arrayIndexerExpression>
														</convertExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<argumentReferenceExpression name="payload"/>
																</target>
																<indices>
																	<propertyReferenceExpression name="Name">
																		<variableReferenceExpression name="p"/>
																	</propertyReferenceExpression>
																</indices>
															</arrayIndexerExpression>
															<propertyReferenceExpression name="Name">
																<variableReferenceExpression name="p"/>
															</propertyReferenceExpression>
														</assignStatement>
													</trueStatements>
													<falseStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<fieldReferenceExpression name="customSchemaPath"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<arrayIndexerExpression>
																		<target>
																			<argumentReferenceExpression name="payload"/>
																		</target>
																		<indices>
																			<propertyReferenceExpression name="Name">
																				<variableReferenceExpression name="p"/>
																			</propertyReferenceExpression>
																		</indices>
																	</arrayIndexerExpression>
																	<propertyReferenceExpression name="Value">
																		<arrayIndexerExpression>
																			<target>
																				<fieldReferenceExpression name="customSchemaPath"/>
																			</target>
																			<indices>
																				<propertyReferenceExpression name="Name">
																					<variableReferenceExpression name="p"/>
																				</propertyReferenceExpression>
																			</indices>
																		</arrayIndexerExpression>
																	</propertyReferenceExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="propNames"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="Name">
															<variableReferenceExpression name="p"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<argumentReferenceExpression name="inputKey"/>
											<primitiveExpression value="_parameters"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="nameType"/>
											<primitiveExpression value="parameter"/>
										</assignStatement>
										<assignStatement>
											<variableReferenceExpression name="nameSource"/>
											<primitiveExpression value="URL"/>
										</assignStatement>
										<assignStatement>
											<variableReferenceExpression name="errorType"/>
											<primitiveExpression value="invalid_parameter"/>
										</assignStatement>
										<foreachStatement>
											<variable type="System.String" name="paramName" var="false"/>
											<target>
												<propertyReferenceExpression name="QueryString">
													<variableReferenceExpression name="request"/>
												</propertyReferenceExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNotNullOrEmpty">
															<variableReferenceExpression name="paramName"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<argumentReferenceExpression name="payload"/>
																</target>
																<indices>
																	<variableReferenceExpression name="paramName"/>
																</indices>
															</arrayIndexerExpression>
															<methodInvokeExpression methodName="Trim">
																<target>
																	<arrayIndexerExpression>
																		<target>
																			<propertyReferenceExpression name="QueryString">
																				<variableReferenceExpression name="request"/>
																			</propertyReferenceExpression>
																		</target>
																		<indices>
																			<variableReferenceExpression name="paramName"/>
																		</indices>
																	</arrayIndexerExpression>
																</target>
															</methodInvokeExpression>
														</assignStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="propNames"/>
															</target>
															<parameters>
																<variableReferenceExpression name="paramName"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<foreachStatement>
									<variable name="propName"/>
									<target>
										<variableReferenceExpression name="propNames"/>
									</target>
									<statements>
										<tryStatement>
											<statements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityEquality">
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="inputSchema"/>
																</target>
																<indices>
																	<variableReferenceExpression name="propName"/>
																</indices>
															</arrayIndexerExpression>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<methodInvokeExpression methodName="IndexOf">
																		<target>
																			<typeReferenceExpression type="Array"/>
																		</target>
																		<parameters>
																			<arrayCreateExpression>
																				<createType type="System.String"/>
																				<initializers>
																					<propertyReferenceExpression name="LinksKey"/>
																					<propertyReferenceExpression name="SchemaKey"/>
																					<propertyReferenceExpression name="EmbeddedKey"/>
																				</initializers>
																			</arrayCreateExpression>
																			<variableReferenceExpression name="propName"/>
																		</parameters>
																	</methodInvokeExpression>
																	<primitiveExpression value="-1"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanOr">
																			<unaryOperatorExpression operator="Not">
																				<variableReferenceExpression name="inputIsBody"/>
																			</unaryOperatorExpression>
																			<binaryOperatorExpression operator="BooleanAnd">
																				<binaryOperatorExpression operator="BooleanAnd">
																					<binaryOperatorExpression operator="IdentityEquality">
																						<methodInvokeExpression methodName="SelectToken">
																							<target>
																								<argumentReferenceExpression name="schema"/>
																							</target>
																							<parameters>
																								<binaryOperatorExpression operator="Add">
																									<primitiveExpression value="_path."/>
																									<variableReferenceExpression name="propName"/>
																								</binaryOperatorExpression>
																							</parameters>
																						</methodInvokeExpression>
																						<primitiveExpression value="null"/>
																					</binaryOperatorExpression>
																					<binaryOperatorExpression operator="IdentityEquality">
																						<methodInvokeExpression methodName="SelectToken">
																							<target>
																								<argumentReferenceExpression name="schema"/>
																							</target>
																							<parameters>
																								<binaryOperatorExpression operator="Add">
																									<primitiveExpression value="_parameters."/>
																									<variableReferenceExpression name="propName"/>
																								</binaryOperatorExpression>
																							</parameters>
																						</methodInvokeExpression>
																						<primitiveExpression value="null"/>
																					</binaryOperatorExpression>
																				</binaryOperatorExpression>
																				<binaryOperatorExpression operator="BooleanOr">
																					<binaryOperatorExpression operator="IdentityEquality">
																						<arrayIndexerExpression>
																							<target>
																								<variableReferenceExpression name="inputSchema"/>
																							</target>
																							<indices>
																								<primitiveExpression value="*"/>
																							</indices>
																						</arrayIndexerExpression>
																						<primitiveExpression value="null"/>
																					</binaryOperatorExpression>
																					<unaryOperatorExpression operator="Not">
																						<methodInvokeExpression methodName="ContainsKey">
																							<target>
																								<propertyReferenceExpression name="FieldMap"/>
																							</target>
																							<parameters>
																								<variableReferenceExpression name="propName"/>
																							</parameters>
																						</methodInvokeExpression>
																					</unaryOperatorExpression>
																				</binaryOperatorExpression>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="400"/>
																				<primitiveExpression value="true"/>
																				<variableReferenceExpression name="errorType"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Unexpected {0} '{1}' is specified in the {2}.]]></xsl:attribute>
																				</primitiveExpression>
																				<variableReferenceExpression name="nameType"/>
																				<binaryOperatorExpression operator="Add">
																					<argumentReferenceExpression name="propPath"/>
																					<variableReferenceExpression name="propName"/>
																				</binaryOperatorExpression>
																				<variableReferenceExpression name="nameSource"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
															<falseStatements>
																<methodInvokeExpression methodName="Remove">
																	<target>
																		<argumentReferenceExpression name="payload"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="propName"/>
																	</parameters>
																</methodInvokeExpression>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
											<catch exceptionType="RESTfulResourceException" localName="ex">
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="errors"/>
													</target>
													<parameters>
														<argumentReferenceExpression name="ex"/>
													</parameters>
												</methodInvokeExpression>
											</catch>
										</tryStatement>
									</statements>
								</foreachStatement>
								<foreachStatement>
									<variable name="p"/>
									<target>
										<methodInvokeExpression methodName="Properties">
											<target>
												<variableReferenceExpression name="inputSchema"/>
											</target>
										</methodInvokeExpression>
									</target>
									<statements>
										<tryStatement>
											<statements>
												<variableDeclarationStatement name="v">
													<init>
														<arrayIndexerExpression>
															<target>
																<argumentReferenceExpression name="payload"/>
															</target>
															<indices>
																<propertyReferenceExpression name="Name">
																	<variableReferenceExpression name="p"/>
																</propertyReferenceExpression>
															</indices>
														</arrayIndexerExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanOr">
															<binaryOperatorExpression operator="BooleanAnd">
																<binaryOperatorExpression operator="IdentityEquality">
																	<variableReferenceExpression name="v"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
																<binaryOperatorExpression operator="ValueEquality">
																	<propertyReferenceExpression name="HttpMethod"/>
																	<primitiveExpression value="PATCH"/>
																</binaryOperatorExpression>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="BooleanOr">
																<binaryOperatorExpression operator="ValueEquality">
																	<propertyReferenceExpression name="Name">
																		<variableReferenceExpression name="p"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="*"/>
																</binaryOperatorExpression>
																<binaryOperatorExpression operator="BooleanAnd">
																	<binaryOperatorExpression operator="ValueEquality">
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="p"/>
																		</propertyReferenceExpression>
																		<propertyReferenceExpression name="CollectionKey"/>
																	</binaryOperatorExpression>
																	<propertyReferenceExpression name="IsCollection"/>
																</binaryOperatorExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<continueStatement/>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<arrayIndexerExpression>
																<target>
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="p"/>
																	</propertyReferenceExpression>
																</target>
																<indices>
																	<primitiveExpression value="properties"/>
																</indices>
															</arrayIndexerExpression>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityInequality">
																	<variableReferenceExpression name="v"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<propertyReferenceExpression name="Type">
																				<variableReferenceExpression name="v"/>
																			</propertyReferenceExpression>
																			<propertyReferenceExpression name="Object">
																				<typeReferenceExpression type="JTokenType"/>
																			</propertyReferenceExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ValidateWithSchema">
																			<parameters>
																				<castExpression targetType="JObject">
																					<arrayIndexerExpression>
																						<target>
																							<variableReferenceExpression name="inputSchema"/>
																						</target>
																						<indices>
																							<propertyReferenceExpression name="Name">
																								<variableReferenceExpression name="p"/>
																							</propertyReferenceExpression>
																						</indices>
																					</arrayIndexerExpression>
																				</castExpression>
																				<primitiveExpression value="properties"/>
																				<castExpression targetType="JObject">
																					<arrayIndexerExpression>
																						<target>
																							<argumentReferenceExpression name="payload"/>
																						</target>
																						<indices>
																							<propertyReferenceExpression name="Name">
																								<variableReferenceExpression name="p"/>
																							</propertyReferenceExpression>
																						</indices>
																					</arrayIndexerExpression>
																				</castExpression>
																				<binaryOperatorExpression operator="Add">
																					<argumentReferenceExpression name="propPath"/>
																					<propertyReferenceExpression name="Name">
																						<variableReferenceExpression name="p"/>
																					</propertyReferenceExpression>
																				</binaryOperatorExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																	<falseStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="400"/>
																				<primitiveExpression value="true"/>
																				<variableReferenceExpression name="errorType"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Object is expected as the value of the field '{0}' in the {1}.]]></xsl:attribute>
																				</primitiveExpression>
																				<binaryOperatorExpression operator="Add">
																					<argumentReferenceExpression name="propPath"/>
																					<propertyReferenceExpression name="Name">
																						<variableReferenceExpression name="p"/>
																					</propertyReferenceExpression>
																				</binaryOperatorExpression>
																				<variableReferenceExpression name="nameSource"/>
																			</parameters>
																		</methodInvokeExpression>
																	</falseStatements>
																</conditionStatement>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<convertExpression to="Boolean">
																			<arrayIndexerExpression>
																				<target>
																					<propertyReferenceExpression name="Value">
																						<variableReferenceExpression name="p"/>
																					</propertyReferenceExpression>
																				</target>
																				<indices>
																					<primitiveExpression value="required"/>
																				</indices>
																			</arrayIndexerExpression>
																		</convertExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="400"/>
																				<primitiveExpression value="true"/>
																				<variableReferenceExpression name="errorType"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[{0} '{1}' is expected in the {2}.]]></xsl:attribute>
																				</primitiveExpression>
																				<binaryOperatorExpression operator="Add">
																					<methodInvokeExpression methodName="ToUpper">
																						<target>
																							<methodInvokeExpression methodName="Substring">
																								<target>
																									<variableReferenceExpression name="nameType"/>
																								</target>
																								<parameters>
																									<primitiveExpression value="0"/>
																									<primitiveExpression value="1"/>
																								</parameters>
																							</methodInvokeExpression>
																						</target>
																					</methodInvokeExpression>
																					<methodInvokeExpression methodName="Substring">
																						<target>
																							<variableReferenceExpression name="nameType"/>
																						</target>
																						<parameters>
																							<primitiveExpression value="1"/>
																						</parameters>
																					</methodInvokeExpression>
																				</binaryOperatorExpression>
																				<binaryOperatorExpression operator="Add">
																					<argumentReferenceExpression name="propPath"/>
																					<propertyReferenceExpression name="Name">
																						<variableReferenceExpression name="p"/>
																					</propertyReferenceExpression>
																				</binaryOperatorExpression>
																				<variableReferenceExpression name="nameSource"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
													<falseStatements>
														<variableDeclarationStatement name="propValue">
															<init>
																<methodInvokeExpression methodName="GetPropertyValue">
																	<parameters>
																		<argumentReferenceExpression name="payload"/>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="p"/>
																		</propertyReferenceExpression>
																		<variableReferenceExpression name="inputSchema"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<binaryOperatorExpression operator="IdentityEquality">
																		<variableReferenceExpression name="v"/>
																		<primitiveExpression value="null"/>
																	</binaryOperatorExpression>
																	<binaryOperatorExpression operator="IdentityInequality">
																		<variableReferenceExpression name="propValue"/>
																		<primitiveExpression value="null"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="SetPropertyValue">
																	<parameters>
																		<argumentReferenceExpression name="payload"/>
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="p"/>
																		</propertyReferenceExpression>
																		<variableReferenceExpression name="propValue"/>
																	</parameters>
																</methodInvokeExpression>
																<assignStatement>
																	<variableReferenceExpression name="v"/>
																	<arrayIndexerExpression>
																		<target>
																			<argumentReferenceExpression name="payload"/>
																		</target>
																		<indices>
																			<propertyReferenceExpression name="Name">
																				<variableReferenceExpression name="p"/>
																			</propertyReferenceExpression>
																		</indices>
																	</arrayIndexerExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<convertExpression to="Boolean">
																	<arrayIndexerExpression>
																		<target>
																			<propertyReferenceExpression name="Value">
																				<variableReferenceExpression name="p"/>
																			</propertyReferenceExpression>
																		</target>
																		<indices>
																			<primitiveExpression value="required"/>
																		</indices>
																	</arrayIndexerExpression>
																</convertExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityEquality">
																			<variableReferenceExpression name="v"/>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="400"/>
																				<primitiveExpression value="true"/>
																				<variableReferenceExpression name="errorType"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[{0} '{1}' is expected in the {2}.]]></xsl:attribute>
																				</primitiveExpression>
																				<binaryOperatorExpression operator="Add">
																					<methodInvokeExpression methodName="ToUpper">
																						<target>
																							<methodInvokeExpression methodName="Substring">
																								<target>
																									<variableReferenceExpression name="nameType"/>
																								</target>
																								<parameters>
																									<primitiveExpression value="0"/>
																									<primitiveExpression value="1"/>
																								</parameters>
																							</methodInvokeExpression>
																						</target>
																					</methodInvokeExpression>
																					<methodInvokeExpression methodName="Substring">
																						<target>
																							<variableReferenceExpression name="nameType"/>
																						</target>
																						<parameters>
																							<primitiveExpression value="1"/>
																						</parameters>
																					</methodInvokeExpression>
																				</binaryOperatorExpression>
																				<binaryOperatorExpression operator="Add">
																					<argumentReferenceExpression name="propPath"/>
																					<propertyReferenceExpression name="Name">
																						<variableReferenceExpression name="p"/>
																					</propertyReferenceExpression>
																				</binaryOperatorExpression>
																				<variableReferenceExpression name="nameSource"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<propertyReferenceExpression name="Type">
																				<variableReferenceExpression name="v"/>
																			</propertyReferenceExpression>
																			<propertyReferenceExpression name="Null">
																				<typeReferenceExpression type="JTokenType"/>
																			</propertyReferenceExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="400"/>
																				<primitiveExpression value="true"/>
																				<variableReferenceExpression name="errorType"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[{0} '{1}' is expected in the {2}. The 'null' value is specified.]]></xsl:attribute>
																				</primitiveExpression>
																				<binaryOperatorExpression operator="Add">
																					<methodInvokeExpression methodName="ToUpper">
																						<target>
																							<methodInvokeExpression methodName="Substring">
																								<target>
																									<variableReferenceExpression name="nameType"/>
																								</target>
																								<parameters>
																									<primitiveExpression value="0"/>
																									<primitiveExpression value="1"/>
																								</parameters>
																							</methodInvokeExpression>
																						</target>
																					</methodInvokeExpression>
																					<methodInvokeExpression methodName="Substring">
																						<target>
																							<variableReferenceExpression name="nameType"/>
																						</target>
																						<parameters>
																							<primitiveExpression value="1"/>
																						</parameters>
																					</methodInvokeExpression>
																				</binaryOperatorExpression>
																				<binaryOperatorExpression operator="Add">
																					<argumentReferenceExpression name="propPath"/>
																					<propertyReferenceExpression name="Name">
																						<variableReferenceExpression name="p"/>
																					</propertyReferenceExpression>
																				</binaryOperatorExpression>
																				<variableReferenceExpression name="nameSource"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="ValueEquality">
																				<propertyReferenceExpression name="Type">
																					<variableReferenceExpression name="v"/>
																				</propertyReferenceExpression>
																				<propertyReferenceExpression name="String">
																					<typeReferenceExpression type="JTokenType"/>
																				</propertyReferenceExpression>
																			</binaryOperatorExpression>
																			<unaryOperatorExpression operator="IsNullOrEmpty">
																				<castExpression targetType="System.String">
																					<variableReferenceExpression name="v"/>
																				</castExpression>
																			</unaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="400"/>
																				<primitiveExpression value="true"/>
																				<variableReferenceExpression name="errorType"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Non-blank {0} '{1}' is expected in the {2}.]]></xsl:attribute>
																				</primitiveExpression>
																				<variableReferenceExpression name="nameType"/>
																				<binaryOperatorExpression operator="Add">
																					<argumentReferenceExpression name="propPath"/>
																					<propertyReferenceExpression name="Name">
																						<variableReferenceExpression name="p"/>
																					</propertyReferenceExpression>
																				</binaryOperatorExpression>
																				<variableReferenceExpression name="nameSource"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IsTypeOf">
																	<variableReferenceExpression name="propValue"/>
																	<typeReferenceExpression type="System.String"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement name="len">
																	<init>
																		<convertExpression to="String">
																			<arrayIndexerExpression>
																				<target>
																					<arrayIndexerExpression>
																						<target>
																							<variableReferenceExpression name="inputSchema"/>
																						</target>
																						<indices>
																							<propertyReferenceExpression name="Name">
																								<variableReferenceExpression name="p"/>
																								<variableReferenceExpression name="p"/>
																							</propertyReferenceExpression>
																						</indices>
																					</arrayIndexerExpression>
																				</target>
																				<indices>
																					<primitiveExpression value="length"/>
																				</indices>
																			</arrayIndexerExpression>
																		</convertExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<unaryOperatorExpression operator="IsNotNullOrEmpty">
																				<variableReferenceExpression name="len"/>
																			</unaryOperatorExpression>
																			<binaryOperatorExpression operator="LessThan">
																				<convertExpression to="Int32">
																					<variableReferenceExpression name="len"/>
																				</convertExpression>
																				<propertyReferenceExpression name="Length">
																					<castExpression targetType="System.String">
																						<variableReferenceExpression name="propValue"/>
																					</castExpression>
																				</propertyReferenceExpression>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="ThrowError">
																			<target>
																				<typeReferenceExpression type="RESTfulResource"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="invalid_argument"/>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[The maximum length of the field '{0}' is {1}.]]></xsl:attribute>
																				</primitiveExpression>
																				<propertyReferenceExpression name="Name">
																					<variableReferenceExpression name="p"/>
																				</propertyReferenceExpression>
																				<variableReferenceExpression name="len"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<methodInvokeExpression methodName="SetPropertyValue">
															<parameters>
																<argumentReferenceExpression name="payload"/>
																<propertyReferenceExpression name="Name">
																	<variableReferenceExpression name="p"/>
																</propertyReferenceExpression>
																<variableReferenceExpression name="propValue"/>
															</parameters>
														</methodInvokeExpression>
													</falseStatements>
												</conditionStatement>
											</statements>
											<catch exceptionType="RESTfulResourceException" localName="ex">
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="errors"/>
													</target>
													<parameters>
														<variableReferenceExpression name="ex"/>
													</parameters>
												</methodInvokeExpression>
												<foreachStatement>
													<variable name="related"/>
													<target>
														<propertyReferenceExpression name="Related">
															<variableReferenceExpression name="ex"/>
														</propertyReferenceExpression>
													</target>
													<statements>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="errors"/>
															</target>
															<parameters>
																<variableReferenceExpression name="related"/>
															</parameters>
														</methodInvokeExpression>
													</statements>
												</foreachStatement>
											</catch>
										</tryStatement>
									</statements>
								</foreachStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="GreaterThan">
											<propertyReferenceExpression name="Count">
												<variableReferenceExpression name="errors"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<throwExceptionStatement>
											<objectCreateExpression type="RESTfulResourceException">
												<parameters>
													<variableReferenceExpression name="errors"/>
												</parameters>
											</objectCreateExpression>
										</throwExceptionStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method MergePayloads(JObject, JObject) -->
						<memberMethod name="MergePayloads">
							<attributes family="true"/>
							<parameters>
								<parameter type="JObject" name="source"/>
								<parameter type="JObject" name="dest"/>
							</parameters>
							<statements>
								<foreachStatement>
									<variable name="p"/>
									<target>
										<methodInvokeExpression methodName="Properties">
											<target>
												<argumentReferenceExpression name="source"/>
											</target>
										</methodInvokeExpression>
									</target>
									<statements>
										<variableDeclarationStatement name="destVal">
											<init>
												<arrayIndexerExpression>
													<target>
														<argumentReferenceExpression name="dest"/>
													</target>
													<indices>
														<propertyReferenceExpression name="Name">
															<variableReferenceExpression name="p"/>
														</propertyReferenceExpression>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IdentityInequality">
														<variableReferenceExpression name="destVal"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="ValueInequality">
														<convertExpression to="String">
															<variableReferenceExpression name="destVal"/>
														</convertExpression>
														<convertExpression to="String">
															<propertyReferenceExpression name="Value">
																<variableReferenceExpression name="p"/>
															</propertyReferenceExpression>
														</convertExpression>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="403"/>
														<primitiveExpression value="invalid_argument"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Field '{0}' must be set to '{1}' in the body.]]></xsl:attribute>
														</primitiveExpression>
														<propertyReferenceExpression name="Name">
															<variableReferenceExpression name="p"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="Value">
															<variableReferenceExpression name="p"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="dest"/>
												</target>
												<indices>
													<propertyReferenceExpression name="Name">
														<variableReferenceExpression name="p"/>
													</propertyReferenceExpression>
												</indices>
											</arrayIndexerExpression>
											<propertyReferenceExpression name="Value">
												<variableReferenceExpression name="p"/>
											</propertyReferenceExpression>
										</assignStatement>
									</statements>
								</foreachStatement>
							</statements>
						</memberMethod>
						<!-- method ExecuteWithSchema(JObject, JObject, JObject) -->
						<memberMethod returnType="System.Boolean" name="ExecuteWithSchema">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="schema"/>
								<parameter type="JObject" name="payload"/>
								<parameter type="JObject" name="result"/>
							</parameters>
							<statements>
								<xsl:if test="$IsUnlimited!='true'">
									<conditionStatement>
										<condition>
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<propertyReferenceExpression name="OAuth"/>
											</unaryOperatorExpression>
										</condition>
										<trueStatements>
											<methodInvokeExpression methodName="ThrowError">
												<target>
													<typeReferenceExpression type="RESTfulResource"/>
												</target>
												<parameters>
													<primitiveExpression value="not_supported"/>
													<primitiveExpression>
														<xsl:attribute name="value"><![CDATA[OAuth 2.0 API is not supported in the apps created with your product edition.]]></xsl:attribute>
													</primitiveExpression>
												</parameters>
											</methodInvokeExpression>
										</trueStatements>
									</conditionStatement>
								</xsl:if>
								<variableDeclarationStatement name="handled">
									<init>
										<primitiveExpression value="false"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<argumentReferenceExpression name="schema"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="Not">
													<methodInvokeExpression methodName="IsAuthorized">
														<target>
															<typeReferenceExpression type="RESTfulResource"/>
														</target>
														<parameters>
															<argumentReferenceExpression name="schema"/>
														</parameters>
													</methodInvokeExpression>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="403"/>
														<primitiveExpression value="unauthorized"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[Insufficient credentials to access this resource.]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement name="pathPayload">
											<init>
												<objectCreateExpression type="JObject"/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="ValidateWithSchema">
											<parameters>
												<argumentReferenceExpression name="schema"/>
												<primitiveExpression value="_path"/>
												<variableReferenceExpression name="pathPayload"/>
												<stringEmptyExpression/>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement name="parametersPayload">
											<init>
												<objectCreateExpression type="JObject"/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="ValidateWithSchema">
											<parameters>
												<argumentReferenceExpression name="schema"/>
												<primitiveExpression value="_parameters"/>
												<variableReferenceExpression name="parametersPayload"/>
												<stringEmptyExpression/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="ValidateWithSchema">
											<parameters>
												<argumentReferenceExpression name="schema"/>
												<primitiveExpression value="_input"/>
												<argumentReferenceExpression name="payload"/>
												<stringEmptyExpression/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="MergePayloads">
											<parameters>
												<variableReferenceExpression name="pathPayload"/>
												<variableReferenceExpression name="payload"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="MergePayloads">
											<parameters>
												<variableReferenceExpression name="parametersPayload"/>
												<variableReferenceExpression name="payload"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<xsl:if test="$IsUnlimited='true'">
									<conditionStatement>
										<condition>
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<propertyReferenceExpression name="OAuth"/>
											</unaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<variableReferenceExpression name="handled"/>
												<primitiveExpression value="true"/>
											</assignStatement>
											<comment>execute the method of oatuh2/v2 endpoint</comment>
											<methodInvokeExpression methodName="ExecuteOAuth">
												<parameters>
													<argumentReferenceExpression name="schema"/>
													<argumentReferenceExpression name="payload"/>
													<argumentReferenceExpression name="result"/>
												</parameters>
											</methodInvokeExpression>
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="ValueInequality">
														<propertyReferenceExpression name="HttpMethod"/>
														<primitiveExpression value="GET"/>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<methodInvokeExpression methodName="SetNoStore">
														<target>
															<propertyReferenceExpression name="Cache">
																<propertyReferenceExpression name="Response">
																	<propertyReferenceExpression name="Current">
																		<typeReferenceExpression type="HttpContext"/>k
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</target>
													</methodInvokeExpression>
												</trueStatements>
											</conditionStatement>
										</trueStatements>
									</conditionStatement>
								</xsl:if>
								<methodReturnStatement>
									<variableReferenceExpression name="handled"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method AllowMethod(string, string) -->
						<memberMethod returnType="System.Boolean" name="AllowMethod">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="controller"/>
								<parameter type="System.String" name="method"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<argumentReferenceExpression name="controller"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="true"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<methodInvokeExpression methodName="AllowController">
												<parameters>
													<argumentReferenceExpression name="controller"/>
												</parameters>
											</methodInvokeExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="false"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<propertyReferenceExpression name="LastAclRole"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="true"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<argumentReferenceExpression name="method"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<argumentReferenceExpression name="method"/>
											<propertyReferenceExpression name="ActionPathName"/>
										</assignStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNullOrEmpty">
													<argumentReferenceExpression name="method"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<argumentReferenceExpression name="method"/>
													<propertyReferenceExpression name="HttpMethod"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="role">
									<init>
										<propertyReferenceExpression name="LastAclRole"/>
									</init>
								</variableDeclarationStatement>
								<whileStatement>
									<test>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="role"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</test>
									<statements>
										<variableDeclarationStatement type="Regex" name="re" var="false">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<tryStatement>
											<statements>
												<assignStatement>
													<variableReferenceExpression name="re"/>
													<objectCreateExpression type="Regex">
														<parameters>
															<convertExpression to="String">
																<propertyReferenceExpression name="Value">
																	<variableReferenceExpression name="role"/>
																</propertyReferenceExpression>
															</convertExpression>
															<propertyReferenceExpression name="IgnoreCase">
																<typeReferenceExpression type="RegexOptions"/>
															</propertyReferenceExpression>
														</parameters>
													</objectCreateExpression>
												</assignStatement>
											</statements>
											<catch exceptionType="Exception" localName="ex">
												<methodInvokeExpression methodName="ThrowError">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
													<parameters>
														<primitiveExpression value="500"/>
														<primitiveExpression value="invalid_config"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA["Rule 'server.rest.acl.\"{0}\".\"{1}\".\"{2}\"' specified in touch-settings.json is not a valid regular expression. Error: {3}]]></xsl:attribute>
														</primitiveExpression>
														<propertyReferenceExpression name="Name">
															<castExpression targetType="JProperty">
																<propertyReferenceExpression name="Parent">
																	<propertyReferenceExpression name="Parent">
																		<variableReferenceExpression name="role"/>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</castExpression>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="Name">
															<variableReferenceExpression name="role"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="Value">
															<variableReferenceExpression name="role"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="Message">
															<variableReferenceExpression name="ex"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</catch>
										</tryStatement>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="IsMatch">
													<target>
														<variableReferenceExpression name="re"/>
													</target>
													<parameters>
														<argumentReferenceExpression name="method"/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="true"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<variableReferenceExpression name="role"/>
											<castExpression targetType="JProperty">
												<propertyReferenceExpression name="Next">
													<variableReferenceExpression name="role"/>
												</propertyReferenceExpression>
											</castExpression>
										</assignStatement>
										<whileStatement>
											<test>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IdentityInequality">
														<variableReferenceExpression name="role"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<unaryOperatorExpression operator="Not">
														<binaryOperatorExpression operator="BooleanOr">
															<methodInvokeExpression methodName="Contains">
																<target>
																	<propertyReferenceExpression name="UserScopes"/>
																</target>
																<parameters>
																	<propertyReferenceExpression name="Name">
																		<variableReferenceExpression name="role"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="IsInRole">
																<target>
																	<propertyReferenceExpression name="User">
																		<propertyReferenceExpression name="Current">
																			<typeReferenceExpression type="HttpContext"/>
																		</propertyReferenceExpression>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<propertyReferenceExpression name="Name">
																		<variableReferenceExpression name="role"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
														</binaryOperatorExpression>
													</unaryOperatorExpression>
												</binaryOperatorExpression>
											</test>
											<statements>
												<assignStatement>
													<variableReferenceExpression name="role"/>
													<castExpression targetType="JProperty">
														<propertyReferenceExpression name="Next">
															<variableReferenceExpression name="role"/>
														</propertyReferenceExpression>
													</castExpression>
												</assignStatement>
											</statements>
										</whileStatement>
									</statements>
								</whileStatement>
								<methodReturnStatement>
									<primitiveExpression value="false"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method TrimLocationToIdentifier() -->
						<memberMethod returnType="System.String" name="TrimLocationToIdentifier">
							<attributes public="true" final="true"/>
							<statements>
								<variableDeclarationStatement name="path">
									<init>
										<propertyReferenceExpression name="Location"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<propertyReferenceExpression name="Id"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<argumentReferenceExpression name="path"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="index">
									<init>
										<methodInvokeExpression methodName="LastIndexOf">
											<target>
												<argumentReferenceExpression name="path"/>
											</target>
											<parameters>
												<binaryOperatorExpression operator="Add">
													<primitiveExpression value="/"/>
													<propertyReferenceExpression name="Id"/>k
													<propertyReferenceExpression name="Id"/>k
												</binaryOperatorExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<variableReferenceExpression name="index"/>
											<primitiveExpression value="-1"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<argumentReferenceExpression name="path"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Substring">
										<target>
											<argumentReferenceExpression name="path"/>
										</target>
										<parameters>
											<primitiveExpression value="0"/>
											<binaryOperatorExpression operator="Add">
												<binaryOperatorExpression operator="Add">
													<variableReferenceExpression name="index"/>
													<propertyReferenceExpression name="Length">
														<propertyReferenceExpression name="Id"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
												<primitiveExpression value="1"/>
											</binaryOperatorExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
			</types>
		</compileUnit>
	</xsl:template>
</xsl:stylesheet>
