<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns="http://www.codeontime.com/2008/codedom-compiler"  xmlns:a="urn:schemas-codeontime-com:data-aquarium-project"
    xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:codeontime="urn:schemas-codeontime-com:ease"  exclude-result-prefixes="msxsl a codeontime"
>

	<xsl:output method="xml" indent="yes"/>
	<xsl:param name="TargetFramework" select="a:project/@targetFramework"/>
	<xsl:param name="TargetFramework45Plus"/>
	<xsl:param name="ScriptOnly" select="a:project/a:features/a:framework/@scriptOnly"/>
	<xsl:param name="PageImplementation" select="a:project/@pageImplementation"/>
	<xsl:param name="IsUnlimited"/>
	<xsl:param name="IsPremium"/>
	<xsl:param name="Mobile"/>
	<xsl:param name="ProjectId"/>
	<xsl:param name="SiteContentTableName" select="''"/>
	<xsl:param name="SiteContentSiteContentID"/>
	<xsl:param name="SiteContentFileName"/>
	<xsl:param name="SiteContentContentType"/>
	<xsl:param name="SiteContentLength"/>
	<xsl:param name="SiteContentRoles"/>
	<xsl:param name="SiteContentUsers"/>
	<xsl:param name="SiteContentCacheProfile"/>
	<xsl:param name="SiteContentRoleExceptions"/>
	<xsl:param name="SiteContentUserExceptions"/>
	<xsl:param name="SiteContentSchedule"/>
	<xsl:param name="SiteContentScheduleExceptions"/>
	<xsl:param name="SiteContentCreatedDate"/>
	<xsl:param name="SiteContentModifiedDate"/>

	<xsl:variable name="Theme" select="a:project/a:theme/@name"/>
	<xsl:variable name="MembershipEnabled" select="a:project/a:membership/@enabled"/>
	<xsl:variable name="CustomSecurity" select="a:project/a:membership/@customSecurity"/>

	<xsl:variable name="MobileAppSupported" select="$Mobile='true' and $PageImplementation='html'"/>

	<xsl:param name="ProviderName" select="a:project/a:providerName"/>

	<msxsl:script language="C#" implements-prefix="codeontime">
		<![CDATA[
    private System.Collections.Generic.SortedDictionary<string, string> _tables = new System.Collections.Generic.SortedDictionary<string, string>();
    private System.Collections.Generic.SortedDictionary<string, System.Collections.Generic.SortedDictionary<string,string>> _columns = 
      new System.Collections.Generic.SortedDictionary<string, System.Collections.Generic.SortedDictionary<string,string>>();
    private System.Collections.Generic.SortedDictionary<string, System.Collections.Generic.List<string>> _roles = 
      new System.Collections.Generic.SortedDictionary<string, System.Collections.Generic.List<string>>();
    private System.Collections.Generic.List<string> _users = new System.Collections.Generic.List<string>();
    
    public string Initialize(string map) { 
      // initialize tables and columns
      string currentTableName = String.Empty; 
      map = "\r\n" + map;
      // |\s*column\s+(\[.+\])(?'ColumnName'\w+)\s*=\s*(?'PhysicalColumnName'.+?)
      Match m = Regex.Match(map, @"$\s*(table\s*(?'TableName'\w+)\s*=\s*(?'PhysicalTableName'.+?)\s*$)|(column\s*(\[.+?\])\s*(?'ColumnName'\w+)\s*=(?'PhysicalColumnName'.*?)\s*$)", RegexOptions.IgnoreCase | RegexOptions.Multiline);
      while (m.Success) {
        string tableName = m.Groups["TableName"].Value;
        if (!String.IsNullOrEmpty(tableName)) { 
          currentTableName = tableName.ToLower();
          _tables[currentTableName] = m.Groups["PhysicalTableName"].Value;
        }
        string columnName = m.Groups["ColumnName"].Value;
        if (!String.IsNullOrEmpty(columnName)) {
          System.Collections.Generic.SortedDictionary<string, string> columns = null;
          if (!_columns.TryGetValue(currentTableName, out columns)) {
            columns = new System.Collections.Generic.SortedDictionary<string, string>();
            _columns[currentTableName] = columns;
          } 
          columns[columnName.ToLower()] = m.Groups["PhysicalColumnName"].Value.Trim();
        }
        m = m.NextMatch();
      }
      
      // initialize role mapping
      m = Regex.Match(map, @"$\s*role\s+(?'Role'.+)\s+=\s*(?'Users'.+?)\s*(?:$)", RegexOptions.IgnoreCase | RegexOptions.Multiline);
      while (m.Success) {
        string role = m.Groups["Role"].Value;
        string userList = m.Groups["Users"].Value;
          System.Collections.Generic.List<string> users = null;
          if (!_roles.TryGetValue(role, out users)) {
            users = new System.Collections.Generic.List<string>();
            _roles[role] = users;
          }
          Match m2 = Regex.Match(userList, @"\s*(?'UserName'.+?)\s*(,|$)");
          while (m2.Success) {
             string userName = m2.Groups["UserName"].Value;
             users.Add(userName);
             if (!String.IsNullOrEmpty(userName) && !_users.Contains(userName))
                _users.Add(userName);
             
             m2 = m2.NextMatch();
          }
        
        m = m.NextMatch();
      }
      
      // return an empty string
      return String.Empty;
    }
    
    public XPathNavigator Roles() {
        StringBuilder sb = new StringBuilder();
        sb.Append("<roles>");
        foreach (string role in _roles.Keys) {
           sb.AppendFormat("<role name=\"{0}\" loweredName=\"{1}\">", role, role.ToLower());
           foreach (string user in _roles[role])
             sb.AppendFormat("<user name=\"{0}\" loweredName=\"{1}\"/>", user, user.ToLower());
           sb.Append("</role>");
        }
        sb.Append("</roles>");
        return new XPathDocument(new System.IO.StringReader(sb.ToString())).CreateNavigator().SelectSingleNode("/roles");
    }
    
    public XPathNavigator Users() {
        StringBuilder sb = new StringBuilder();
        sb.Append("<users>");
        foreach (string userName in _users) {
           sb.AppendFormat("<user name=\"{0}\" loweredName=\"{1}\"/>", userName, userName.ToLower());
        }
        sb.Append("</users>");
        return new XPathDocument(new System.IO.StringReader(sb.ToString())).CreateNavigator().SelectSingleNode("/users");
    }
    
    public XPathNavigator UserRoles(string user) {
        StringBuilder sb = new StringBuilder();
        sb.Append("<roles>");
        foreach (string role in _roles.Keys) {
          if (_roles[role].Contains(user) || _roles[role].Contains("*"))
           sb.AppendFormat("<role name=\"{0}\" loweredName=\"{1}\"/>", role, role.ToLower());
        }
        sb.Append("</roles>");
        return new XPathDocument(new System.IO.StringReader(sb.ToString())).CreateNavigator().SelectSingleNode("/roles");
    }

    public string GetTable(string table) 
    {
        table = table.ToLower();
        string result;
        if (!_tables.TryGetValue(table, out result) || String.IsNullOrEmpty(result))
          return String.Format("Table_{0}_IsNotMapped", table);
        return result;
    } 
    public string GetTableColumn(string table, string column) 
    {
        table = table.ToLower();
        column = column.ToLower();
        System.Collections.Generic.SortedDictionary<string, string> columns = null;
        if (!_columns.TryGetValue(table, out columns))
            return String.Format("Table_{0}_IsNotMapped", table);
        string result;
        if (!columns.TryGetValue(column, out result) || String.IsNullOrEmpty(result)) 
            return String.Format("Column_{0}_{1}_IsNotMapped", table, column);
        return result;
    }
    public string TranslateSql(string sql) {
      sql = Regex.Replace(sql, @"\?\?(?'Expression'[\s\S]+?)\^(?'Table'\w+)(.(?'Column'\w+))?\?\?", DoReplaceConditionals);
      sql = Regex.Replace(sql, @"\[(?'Table'\w+)(.(?'Column'\w+))?\]", DoReplaceKnownName);
      return sql;
    }
    
    public bool TableColumnIsDefined(string table, string column) {
      string columnName = GetTableColumn(table, column);
      return !columnName.Contains("_IsNotMapped");
    }
    
    private string DoReplaceConditionals(Match m) {
      string table = m.Groups["Table"].Value;
      string column = m.Groups["Column"].Value;
      string expression = m.Groups["Expression"].Value;
      if (!String.IsNullOrEmpty(column) && !GetTableColumn(table, column).EndsWith("_IsNotMapped"))
         return expression;
      return String.Empty;
    }
    
    private string DoReplaceKnownName(Match m) {
      string table = m.Groups["Table"].Value;
      string column = m.Groups["Column"].Value;    
      if (String.IsNullOrEmpty(column))
        return GetTable(table);
      return GetTableColumn(table, column);
    }
    
  public string NormalizeLineEndings(string s) {
    s = s.Trim();
    s = (s.Contains("\n") ? "\r\n" : String.Empty) + TranslateSql(s).Replace("\n", "\r\n");
    s = Regex.Replace(s, @"(\s)set\s*,s*", "$1set ");
    return Regex.Replace(s, "(\r\n){2,100}", "\r\n");
  }
  
  public string SubstringAfterLast(string s, string indexOf) {
    return s.Substring(s.LastIndexOf(indexOf) + 1);
  }
  public string SubstringBeforeLast(string s, string indexOf) {
    return s.Substring(0, s.LastIndexOf(indexOf));
  }
  
    ]]>
	</msxsl:script>

	<xsl:param name="CustomMembershipMapping">
		<xsl:choose>
			<xsl:when test="contains($ProviderName, 'Oracle')">
				<![CDATA[
///// aspnet_Sessions /////
table aspnet_Sessions=ASPNET_SESSIONS
column [text] SessionId = SESSION_ID
column [text] ApplicationName = APPLICATION_NAME
column [datetime] Created = CREATED
column [datetime] Expires = EXPIRES
column [datetime] LockDate = LOCK_DATE
column [int] LockId = LOCK_ID
column [int] Timeout = TIMEOUT
column [bit] Locked = LOCKED
column [ntext] SessionItems = SESSION_ITEMS
column [int] Flags = FLAGS
    ]]>
			</xsl:when>
			<xsl:when test="contains($ProviderName, 'MySql')">
				<![CDATA[
///// aspnet_Sessions /////
table aspnet_Sessions=aspnet_sessions
column [text] SessionId = session_id
column [text] ApplicationName = application_name
column [datetime] Created = created
column [datetime] Expires = expires
column [datetime] LockDate = lock_date
column [int] LockId = lock_id
column [int] Timeout = timeout
column [bit] Locked = locked
column [ntext] SessionItems = session_items
column [int] Flags = flags
    ]]>
			</xsl:when>
			<xsl:otherwise>
				<![CDATA[
///// aspnet_Sessions /////
table aspnet_Sessions=aspnet_Sessions
column [text] SessionId = SessionId
column [text] ApplicationName = ApplicationName
column [datetime] Created = Created
column [datetime] Expires = Expires
column [datetime] LockDate = LockDate
column [int] LockId = LockId
column [int] Timeout = Timeout
column [bit] Locked = Locked
column [ntext] SessionItems = SessionItems
column [int] Flags = Flags
    ]]>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:param>

	<xsl:variable name="InitializeMapping" select="codeontime:Initialize($CustomMembershipMapping)"/>

	<msxsl:script language="C#" implements-prefix="codeontime">
		<![CDATA[
    public string OptionValue(string map, string optionName, string defaultValue) { 
        map = "\r\n" + map;
        Match m = Regex.Match(map, @"$\s*option\s+(?'Name'.+?)\s*=\s*(?'Value'.+?)\s*(?:$)", RegexOptions.IgnoreCase | RegexOptions.Multiline);
        while (m.Success) {
           string name = Regex.Replace(m.Groups["Name"].Value, @"\s+", String.Empty);
           if (name.Equals(optionName, StringComparison.CurrentCultureIgnoreCase))
              return m.Groups["Value"].Value;
           m = m.NextMatch();
        }
        return defaultValue;
    } 
    ]]>
	</msxsl:script>


	<xsl:variable name="Namespace" select="a:project/a:namespace"/>

	<xsl:variable name="PageHeader" select="a:project/a:features/@pageHeader"/>

	<xsl:template match="/">
		<compileUnit namespace="{$Namespace}.Services">
			<imports>
				<namespaceImport name="System"/>
				<namespaceImport name="System.Collections.Generic"/>
				<namespaceImport name="System.Collections.Specialized"/>
				<namespaceImport name="System.ComponentModel"/>
				<namespaceImport name="System.Data"/>
				<namespaceImport name="System.Data.Common"/>
				<namespaceImport name="System.Configuration"/>
				<namespaceImport name="System.IO"/>
				<namespaceImport name="System.Globalization"/>
				<namespaceImport name="System.Linq"/>
				<namespaceImport name="System.Net"/>
				<namespaceImport name="System.Reflection"/>
				<namespaceImport name="System.Threading"/>
				<namespaceImport name="System.Security.Principal"/>
				<namespaceImport name="System.Text"/>
				<namespaceImport name="System.Text.RegularExpressions"/>
				<namespaceImport name="System.Web"/>
				<namespaceImport name="System.Web.Caching"/>
				<namespaceImport name="System.Web.UI"/>
				<namespaceImport name="System.Web.UI.HtmlControls"/>
				<namespaceImport name="System.Web.Security"/>
				<namespaceImport name="System.Web.SessionState"/>
				<namespaceImport name="System.Web.Configuration"/>
				<namespaceImport name="System.IO.Compression"/>
				<namespaceImport name="System.Xml.XPath"/>
				<xsl:if test="$TargetFramework != '3.5'">
					<namespaceImport name="System.Web.Routing"/>
					<namespaceImport name="System.Drawing"/>
					<namespaceImport name="System.Drawing.Imaging"/>
				</xsl:if>
				<namespaceImport name="System.Security.Cryptography"/>
				<namespaceImport name="Newtonsoft.Json"/>
				<namespaceImport name="Newtonsoft.Json.Linq"/>
				<namespaceImport name="{$Namespace}.Data"/>
				<namespaceImport name="{$Namespace}.Handlers"/>
				<namespaceImport name="{$Namespace}.Services.Rest"/>
				<namespaceImport name="{$Namespace}.Web"/>
			</imports>
			<types>
				<!-- class ServiceRequestHandler -->
				<typeDeclaration name="ServiceRequestHandler">
					<attributes abstract="true" public="true"/>
					<members>
						<!-- method HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes abstract="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
						</memberMethod>
						<!-- method HandleException(JObject, Exception)-->
						<memberMethod returnType="System.Object" name="HandleException">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="args"/>
								<parameter type="Exception" name="ex"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="HandleException">
										<target>
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="ApplicationServices"/>
											</propertyReferenceExpression>
										</target>
										<parameters>
											<variableReferenceExpression name="args"/>
											<variableReferenceExpression name="ex"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property AllowedMethods-->
						<memberProperty type="System.String[]" name="AllowedMethods">
							<attributes public="true"/>
							<getStatements>
								<methodReturnStatement>
									<arrayCreateExpression>
										<createType type="System.String"/>
										<initializers>
											<primitiveExpression value="POST"/>
										</initializers>
									</arrayCreateExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property RequiresAuthentication-->
						<memberProperty type="System.Boolean" name="RequiresAuthentication">
							<attributes public="true"/>
							<getStatements>
								<methodReturnStatement>
									<primitiveExpression value="false"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- Redirect(string)-->
						<memberMethod name="Redirect">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="redirectUrl"/>
							</parameters>
							<statements>
								<throwExceptionStatement>
									<objectCreateExpression type="ServiceRequestRedirectException">
										<parameters>
											<variableReferenceExpression name="redirectUrl"/>
										</parameters>
									</objectCreateExpression>
								</throwExceptionStatement>
							</statements>
						</memberMethod>
						<!-- property WrapOutput -->
						<memberProperty type="System.Boolean" name="WrapOutput">
							<attributes public="true"/>
							<getStatements>
								<methodReturnStatement>
									<primitiveExpression value="true"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method ClearHeaders -->
						<memberMethod name="ClearHeaders">
							<attributes public="true"/>
						</memberMethod>
						<!-- method Parse(string)  -->
						<memberMethod returnType="JObject" name="Parse">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="args"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Parse">
										<target>
											<typeReferenceExpression type="JObject"/>
										</target>
										<parameters>
											<argumentReferenceExpression name="args"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method Validate(DataControllerService, JObject) -->
						<memberMethod returnType="System.Object" name="Validate">
							<attributes public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<primitiveExpression value="null"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method OutputContentType() -->
						<memberMethod returnType="System.String" name="OutputContentType">
							<attributes public="true"/>
							<statements>
								<variableDeclarationStatement name="request">
									<init>
										<propertyReferenceExpression name="Request">
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<propertyReferenceExpression name="AcceptTypes">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<foreachStatement>
											<variable name="accept"/>
											<target>
												<propertyReferenceExpression name="AcceptTypes">
													<variableReferenceExpression name="request"/>
												</propertyReferenceExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanOr">
															<binaryOperatorExpression operator="ValueEquality">
																<variableReferenceExpression name="accept"/>
																<primitiveExpression value="text/yaml"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="BooleanOr">
																<binaryOperatorExpression operator="ValueEquality">
																	<variableReferenceExpression name="accept"/>
																	<primitiveExpression value="text/x-yaml"/>
																</binaryOperatorExpression>
																<binaryOperatorExpression operator="ValueEquality">
																	<variableReferenceExpression name="accept"/>
																	<primitiveExpression value="application/x-yaml"/>
																</binaryOperatorExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodReturnStatement>
															<variableReferenceExpression name="accept"/>
														</methodReturnStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanOr">
															<binaryOperatorExpression operator="ValueEquality">
																<variableReferenceExpression name="accept"/>
																<primitiveExpression value="text/xml"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="ValueEquality">
																<variableReferenceExpression name="accept"/>
																<primitiveExpression value="application/xml"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodReturnStatement>
															<variableReferenceExpression name="accept"/>
														</methodReturnStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<primitiveExpression value="application/json"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class GetPageServiceRequestHandler-->
				<typeDeclaration name="GetPageServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="PageRequest" name="r">
									<init>
										<methodInvokeExpression methodName="ToObject">
											<typeArguments>
												<typeReference type="PageRequest"/>
											</typeArguments>
											<target>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="request"/>
													</indices>
												</arrayIndexerExpression>
											</target>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetPage">
										<target>
											<variableReferenceExpression name="service"/>
										</target>
										<parameters>
											<methodInvokeExpression methodName="ValidateName">
												<target>
													<typeReferenceExpression type="ControllerUtilities"/>
												</target>
												<parameters>
													<castExpression targetType="System.String">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="args"/>
															</target>
															<indices>
																<primitiveExpression value="controller"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="ValidateName">
												<target>
													<typeReferenceExpression type="ControllerUtilities"/>
												</target>
												<parameters>
													<castExpression targetType="System.String">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="args"/>
															</target>
															<indices>
																<primitiveExpression value="view"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
												</parameters>
											</methodInvokeExpression>
											<variableReferenceExpression name="r"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class GetControllerListServiceRequestHandler -->
				<typeDeclaration name="GetControllerListServiceRequestHandler">
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes public="true" override="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="StringBuilder" name="jsonArray">
									<init>
										<objectCreateExpression type="StringBuilder">
											<parameters>
												<primitiveExpression value="["/>
											</parameters>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String[]" name="list">
									<init>
										<methodInvokeExpression methodName="ToObject">
											<typeArguments>
												<typeReference type="System.String[]"/>
											</typeArguments>
											<target>
												<arrayIndexerExpression>
													<target>
														<argumentReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="controllers"/>
													</indices>
												</arrayIndexerExpression>
											</target>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Boolean" name="first">
									<init>
										<primitiveExpression value="true"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="System.String" name="name"/>
									<target>
										<variableReferenceExpression name="list"/>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<variableReferenceExpression name="first"/>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="first"/>
													<primitiveExpression value="false"/>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<methodInvokeExpression methodName="Append">
													<target>
														<variableReferenceExpression name="jsonArray"/>
													</target>
													<parameters>
														<primitiveExpression value=","/>
													</parameters>
												</methodInvokeExpression>
											</falseStatements>
										</conditionStatement>
										<variableDeclarationStatement type="ControllerConfiguration" name="config">
											<init>
												<methodInvokeExpression methodName="CreateConfigurationInstance">
													<target>
														<typeReferenceExpression type="DataControllerBase"/>
													</target>
													<parameters>
														<methodInvokeExpression methodName="GetType"/>
														<variableReferenceExpression name="name"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.String" name="json">
											<init>
												<methodInvokeExpression methodName="ToJson">
													<target>
														<variableReferenceExpression name="config"/>
													</target>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="Append">
											<target>
												<variableReferenceExpression name="jsonArray"/>
											</target>
											<parameters>
												<variableReferenceExpression name="json"/>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</foreachStatement>
								<methodInvokeExpression methodName="Append">
									<target>
										<variableReferenceExpression name="jsonArray"/>
									</target>
									<parameters>
										<primitiveExpression value="]"/>
									</parameters>
								</methodInvokeExpression>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ToString">
										<target>
											<variableReferenceExpression name="jsonArray"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property RequiresAuthentication -->
						<xsl:if test="$MembershipEnabled='true' or $CustomSecurity='true'">
							<memberProperty type="System.Boolean" name="RequiresAuthentication">
								<attributes public="true" override="true"/>
								<getStatements>
									<methodReturnStatement>
										<primitiveExpression value="true"/>
									</methodReturnStatement>
								</getStatements>
							</memberProperty>
						</xsl:if>
					</members>
				</typeDeclaration>
				<!-- class CommitServiceRequestHandler -->
				<typeDeclaration name="CommitServiceRequestHandler">
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes public="true" override="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="TransactionManager" name="tm">
									<init>
										<objectCreateExpression type="TransactionManager"/>
									</init>
								</variableDeclarationStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Commit">
										<target>
											<variableReferenceExpression name="tm"/>
										</target>
										<parameters>
											<castExpression targetType="JArray">
												<arrayIndexerExpression>
													<target>
														<argumentReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="log"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property RequiresAuthentication -->
						<xsl:if test="$MembershipEnabled='true' or $CustomSecurity='true'">
							<memberProperty type="System.Boolean" name="RequiresAuthentication">
								<attributes public="true" override="true"/>
								<getStatements>
									<methodReturnStatement>
										<primitiveExpression value="true"/>
									</methodReturnStatement>
								</getStatements>
							</memberProperty>
						</xsl:if>
					</members>
				</typeDeclaration>
				<!-- class GetPageListServiceRequestHandler-->
				<typeDeclaration name="GetPageListServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetPageList">
										<target>
											<variableReferenceExpression name="service"/>
										</target>
										<parameters>
											<methodInvokeExpression methodName="ToObject">
												<typeArguments>
													<typeReference type="PageRequest[]"/>
												</typeArguments>
												<target>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="args"/>
														</target>
														<indices>
															<primitiveExpression value="requests"/>
														</indices>
													</arrayIndexerExpression>
												</target>
											</methodInvokeExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class GetListOfValuesServiceRequestHandler-->
				<typeDeclaration name="GetListOfValuesServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="DistinctValueRequest" name="r">
									<init>
										<methodInvokeExpression methodName="ToObject">
											<typeArguments>
												<typeReference type="DistinctValueRequest"/>
											</typeArguments>
											<target>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="request"/>
													</indices>
												</arrayIndexerExpression>
											</target>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetListOfValues">
										<target>
											<variableReferenceExpression name="service"/>
										</target>
										<parameters>
											<methodInvokeExpression methodName="ValidateName">
												<target>
													<typeReferenceExpression type="ControllerUtilities"/>
												</target>
												<parameters>
													<castExpression targetType="System.String">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="args"/>
															</target>
															<indices>
																<primitiveExpression value="controller"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="ValidateName">
												<target>
													<typeReferenceExpression type="ControllerUtilities"/>
												</target>
												<parameters>
													<castExpression targetType="System.String">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="args"/>
															</target>
															<indices>
																<primitiveExpression value="view"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
												</parameters>
											</methodInvokeExpression>
											<variableReferenceExpression name="r"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class ExecuteServiceRequestHandler-->
				<typeDeclaration name="ExecuteServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="ActionArgs" name="a">
									<init>
										<methodInvokeExpression methodName="ToObject">
											<typeArguments>
												<typeReference type="ActionArgs"/>
											</typeArguments>
											<target>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="args"/>
													</indices>
												</arrayIndexerExpression>
											</target>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Execute">
										<target>
											<variableReferenceExpression name="service"/>
										</target>
										<parameters>
											<methodInvokeExpression methodName="ValidateName">
												<target>
													<typeReferenceExpression type="ControllerUtilities"/>
												</target>
												<parameters>
													<castExpression targetType="System.String">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="args"/>
															</target>
															<indices>
																<primitiveExpression value="controller"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="ValidateName">
												<target>
													<typeReferenceExpression type="ControllerUtilities"/>
												</target>
												<parameters>
													<castExpression targetType="System.String">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="args"/>
															</target>
															<indices>
																<primitiveExpression value="view"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
												</parameters>
											</methodInvokeExpression>
											<variableReferenceExpression name="a"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class ExecuteAndGetPageServiceRequestHandler-->
				<typeDeclaration name="ExecuteAndGetPageServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="ExecuteViewPageArgs" name="arg">
									<init>
										<methodInvokeExpression methodName="ToObject">
											<typeArguments>
												<typeReference type="ExecuteViewPageArgs"/>
											</typeArguments>
											<target>
												<variableReferenceExpression name="args"/>
											</target>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="ActionArgs" name="a">
									<init>
										<propertyReferenceExpression name="Args">
											<variableReferenceExpression name="arg"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="ActionResult" name="result">
									<init>
										<methodInvokeExpression methodName="Execute">
											<target>
												<variableReferenceExpression name="service"/>
											</target>
											<parameters>
												<propertyReferenceExpression name="Controller">
													<variableReferenceExpression name="a"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="View">
													<variableReferenceExpression name="a"/>
												</propertyReferenceExpression>
												<variableReferenceExpression name="a"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="GreaterThan">
											<propertyReferenceExpression name="Count">
												<propertyReferenceExpression name="Errors">
													<variableReferenceExpression name="result"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="ViewPage" name="vp">
											<init>
												<objectCreateExpression type="ViewPage"/>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<propertyReferenceExpression name="Errors">
												<variableReferenceExpression name="vp"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="Errors">
												<variableReferenceExpression name="result"/>
											</propertyReferenceExpression>
										</assignStatement>
										<methodReturnStatement>
											<variableReferenceExpression name="vp"/>
										</methodReturnStatement>
									</trueStatements>
									<falseStatements>
										<variableDeclarationStatement type="PageRequest" name="request">
											<init>
												<objectCreateExpression type="PageRequest">
													<parameters>
														<primitiveExpression value="0"/>
														<propertyReferenceExpression name="PageSize">
															<variableReferenceExpression name="arg"/>
														</propertyReferenceExpression>
														<stringEmptyExpression/>
														<primitiveExpression value="null"/>
													</parameters>
												</objectCreateExpression>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<propertyReferenceExpression name="Controller">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="Controller">
												<variableReferenceExpression name="a"/>
											</propertyReferenceExpression>
											<variableReferenceExpression name="controller"/>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="View">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="View">
												<variableReferenceExpression name="a"/>
											</propertyReferenceExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="LastCommandName">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="CommandName">
												<variableReferenceExpression name="a"/>
											</propertyReferenceExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="LastCommandArgument">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="CommandArgument">
												<variableReferenceExpression name="a"/>
											</propertyReferenceExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="RequiresMetaData">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="Metadata">
												<variableReferenceExpression name="arg"/>
											</propertyReferenceExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="DoesNotRequireAggregates">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<unaryOperatorExpression operator="Not">
												<propertyReferenceExpression name="Aggregates">
													<variableReferenceExpression name="arg"/>
												</propertyReferenceExpression>
											</unaryOperatorExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="RequiresRowCount">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="RowCount">
												<variableReferenceExpression name="arg"/>
											</propertyReferenceExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="SyncKey">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<methodInvokeExpression methodName="GetPrimaryKey">
												<parameters>
													<variableReferenceExpression name="result"/>
													<variableReferenceExpression name="a"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<methodReturnStatement>
											<methodInvokeExpression methodName="GetPage">
												<target>
													<variableReferenceExpression name="service"/>
												</target>
												<parameters>
													<propertyReferenceExpression name="Controller">
														<variableReferenceExpression name="a"/>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="View">
														<variableReferenceExpression name="a"/>
													</propertyReferenceExpression>
													<variableReferenceExpression name="request"/>
												</parameters>
											</methodInvokeExpression>
										</methodReturnStatement>
									</falseStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method GetPrimaryKey(ActionResult, ActionArgs)-->
						<memberMethod returnType="System.Object[]" name="GetPrimaryKey">
							<attributes private="true" final="true"/>
							<parameters>
								<parameter type="ActionResult" name="result"/>
								<parameter type="ActionArgs" name="args"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="ControllerConfiguration" name="config">
									<init>
										<methodInvokeExpression methodName="CreateConfigurationInstance">
											<target>
												<typeReferenceExpression type="Controller"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="GetType"/>
												<propertyReferenceExpression name="Controller">
													<variableReferenceExpression name="args"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="SortedDictionary" name="pKeys">
									<typeArguments>
										<typeReference type="System.String"/>
										<typeReference type="FieldValue"/>
									</typeArguments>
									<init>
										<objectCreateExpression type="SortedDictionary">
											<typeArguments>
												<typeReference type="System.String"/>
												<typeReference type="FieldValue"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="XPathNavigator" name="nav" var="false"/>
									<target>
										<methodInvokeExpression methodName="Select">
											<target>
												<variableReferenceExpression name="config"/>
											</target>
											<parameters>
												<primitiveExpression value="/c:dataController/c:fields/c:field[@isPrimaryKey='true']"/>
											</parameters>
										</methodInvokeExpression>
									</target>
									<statements>
										<foreachStatement>
											<variable type="FieldValue" name="fvo"/>
											<target>
												<propertyReferenceExpression name="Values">
													<variableReferenceExpression name="result"/>
												</propertyReferenceExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="Name">
																<variableReferenceExpression name="fvo"/>
															</propertyReferenceExpression>
															<methodInvokeExpression methodName="GetAttribute">
																<target>
																	<variableReferenceExpression name="nav"/>
																</target>
																<parameters>
																	<primitiveExpression value="name"/>
																	<stringEmptyExpression/>
																</parameters>
															</methodInvokeExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="pKeys"/>
																</target>
																<indices>
																	<propertyReferenceExpression name="Name">
																		<variableReferenceExpression name="fvo"/>
																	</propertyReferenceExpression>
																</indices>
															</arrayIndexerExpression>
															<variableReferenceExpression name="fvo"/>
														</assignStatement>
														<breakStatement/>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
										<foreachStatement>
											<variable type="FieldValue" name="fvo"/>
											<target>
												<propertyReferenceExpression name="Values">
													<variableReferenceExpression name="args"/>
												</propertyReferenceExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="Name">
																<variableReferenceExpression name="fvo"/>
															</propertyReferenceExpression>
															<methodInvokeExpression methodName="GetAttribute">
																<target>
																	<variableReferenceExpression name="nav"/>
																</target>
																<parameters>
																	<primitiveExpression value="name"/>
																	<stringEmptyExpression/>
																</parameters>
															</methodInvokeExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="pKeys"/>
																</target>
																<indices>
																	<propertyReferenceExpression name="Name">
																		<variableReferenceExpression name="fvo"/>
																	</propertyReferenceExpression>
																</indices>
															</arrayIndexerExpression>
															<variableReferenceExpression name="fvo"/>
														</assignStatement>
														<breakStatement/>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</statements>
								</foreachStatement>
								<variableDeclarationStatement type="List" name="key">
									<typeArguments>
										<typeReference type="System.Object"/>
									</typeArguments>
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.Object"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="FieldValue" name="fvo"/>
									<target>
										<propertyReferenceExpression name="Values">
											<variableReferenceExpression name="pKeys"/>
										</propertyReferenceExpression>
									</target>
									<statements>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="key"/>
											</target>
											<parameters>
												<propertyReferenceExpression name="Value">
													<variableReferenceExpression name="fvo"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ToArray">
										<target>
											<variableReferenceExpression name="key"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class ExecuteListServiceRequestHandler-->
				<typeDeclaration name="ExecuteListServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ExecuteList">
										<target>
											<variableReferenceExpression name="service"/>
										</target>
										<parameters>
											<methodInvokeExpression methodName="ToObject">
												<typeArguments>
													<typeReference type="ActionArgs[]"/>
												</typeArguments>
												<target>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="args"/>
														</target>
														<indices>
															<primitiveExpression value="requests"/>
														</indices>
													</arrayIndexerExpression>
												</target>
											</methodInvokeExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class GetCompletionListServiceRequestHandler-->
				<typeDeclaration name="GetCompletionListServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetCompletionList">
										<target>
											<variableReferenceExpression name="service"/>
										</target>
										<parameters>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="prefixText"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
											<castExpression targetType="System.Int32">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="count"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="contextKey"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class LoginServiceRequestHandler-->
				<typeDeclaration name="LoginServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Login">
										<target>
											<variableReferenceExpression name="service"/>
										</target>
										<parameters>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="username"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="password"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
											<convertExpression to="Boolean">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="createPersistentCookie"/>
													</indices>
												</arrayIndexerExpression>
											</convertExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class LogoutServiceRequestHandler-->
				<typeDeclaration name="LogoutServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<methodInvokeExpression methodName="Logout">
									<target>
										<variableReferenceExpression name="service"/>
									</target>
								</methodInvokeExpression>
								<methodReturnStatement>
									<primitiveExpression value="null"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class RolesServiceRequestHandler-->
				<typeDeclaration name="RolesServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Roles">
										<target>
											<variableReferenceExpression name="service"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class AddonServiceRequestHandler -->
				<typeDeclaration name="AddonServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- method HandleRequest(DataControllerService, JObject) -->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes public="true" override="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="type">
									<init>
										<castExpression targetType="System.String">
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="args"/>
												</target>
												<indices>
													<primitiveExpression value="type"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="method">
									<init>
										<castExpression targetType="System.String">
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="args"/>
												</target>
												<indices>
													<primitiveExpression value="method"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Object" name="result">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="System.Object" name="addon"/>
									<target>
										<propertyReferenceExpression name="Addons">
											<typeReferenceExpression type="ApplicationServices"/>
										</propertyReferenceExpression>
									</target>
									<statements>
										<variableDeclarationStatement type="Type" name="t">
											<init>
												<methodInvokeExpression methodName="GetType">
													<target>
														<variableReferenceExpression name="addon"/>
													</target>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanOr">
													<binaryOperatorExpression operator="ValueEquality">
														<propertyReferenceExpression name="Name">
															<variableReferenceExpression name="t"/>
														</propertyReferenceExpression>
														<variableReferenceExpression name="type"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="ValueEquality">
														<variableReferenceExpression name="type"/>
														<primitiveExpression value="All"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="result"/>
													<methodInvokeExpression methodName="Invoke">
														<target>
															<methodInvokeExpression methodName="GetMethod">
																<target>
																	<variableReferenceExpression name="t"/>
																</target>
																<parameters>
																	<primitiveExpression value="Invoke"/>
																</parameters>
															</methodInvokeExpression>
														</target>
														<parameters>
															<variableReferenceExpression name="addon"/>
															<arrayCreateExpression>
																<createType type="System.Object"/>
																<initializers>
																	<argumentReferenceExpression name="service"/>
																	<variableReferenceExpression name="method"/>
																	<arrayIndexerExpression>
																		<target>
																			<argumentReferenceExpression name="args"/>
																		</target>
																		<indices>
																			<primitiveExpression value="args"/>
																		</indices>
																	</arrayIndexerExpression>
																</initializers>
															</arrayCreateExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueInequality">
															<variableReferenceExpression name="type"/>
															<primitiveExpression value="All"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<breakStatement/>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class ThemesServiceRequestHandler-->
				<typeDeclaration name="ThemesServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Themes">
										<target>
											<variableReferenceExpression name="service"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<xsl:if test="$IsPremium='true'">
					<!-- class SavePermalinkServiceRequestHandler-->
					<typeDeclaration name="SavePermalinkServiceRequestHandler">
						<attributes public="true"/>
						<baseTypes>
							<typeReference type="ServiceRequestHandler"/>
						</baseTypes>
						<members>
							<!-- HandleRequest(DataControllerService, JObject)-->
							<memberMethod returnType="System.Object" name="HandleRequest">
								<attributes override="true" public="true"/>
								<parameters>
									<parameter type="DataControllerService" name="service"/>
									<parameter type="JObject" name="args"/>
								</parameters>
								<statements>
									<methodInvokeExpression methodName="SavePermalink">
										<target>
											<variableReferenceExpression name="service"/>
										</target>
										<parameters>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="link"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="html"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</parameters>
									</methodInvokeExpression>
									<methodReturnStatement>
										<primitiveExpression value="null"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
						</members>
					</typeDeclaration>
					<!-- class EncodePermalinkServiceRequestHandler-->
					<typeDeclaration name="EncodePermalinkServiceRequestHandler">
						<attributes public="true"/>
						<baseTypes>
							<typeReference type="ServiceRequestHandler"/>
						</baseTypes>
						<members>
							<!-- HandleRequest(DataControllerService, JObject)-->
							<memberMethod returnType="System.Object" name="HandleRequest">
								<attributes override="true" public="true"/>
								<parameters>
									<parameter type="DataControllerService" name="service"/>
									<parameter type="JObject" name="args"/>
								</parameters>
								<statements>
									<methodReturnStatement>
										<methodInvokeExpression methodName="EncodePermalink">
											<target>
												<variableReferenceExpression name="service"/>
											</target>
											<parameters>
												<castExpression targetType="System.String">
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="args"/>
														</target>
														<indices>
															<primitiveExpression value="link"/>
														</indices>
													</arrayIndexerExpression>
												</castExpression>
												<castExpression targetType="System.Boolean">
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="args"/>
														</target>
														<indices>
															<primitiveExpression value="rooted"/>
														</indices>
													</arrayIndexerExpression>
												</castExpression>
											</parameters>
										</methodInvokeExpression>
									</methodReturnStatement>
								</statements>
							</memberMethod>
						</members>
					</typeDeclaration>
					<!-- class ListAllPermalinksServiceRequestHandler-->
					<typeDeclaration name="ListAllPermalinksServiceRequestHandler">
						<attributes public="true"/>
						<baseTypes>
							<typeReference type="ServiceRequestHandler"/>
						</baseTypes>
						<members>
							<!-- HandleRequest(DataControllerService, JObject)-->
							<memberMethod returnType="System.Object" name="HandleRequest">
								<attributes override="true" public="true"/>
								<parameters>
									<parameter type="DataControllerService" name="service"/>
									<parameter type="JObject" name="args"/>
								</parameters>
								<statements>
									<methodReturnStatement>
										<methodInvokeExpression methodName="ListAllPermalinks">
											<target>
												<variableReferenceExpression name="service"/>
											</target>
										</methodInvokeExpression>
									</methodReturnStatement>
								</statements>
							</memberMethod>
						</members>
					</typeDeclaration>
				</xsl:if>
				<!-- class GetSurveyServiceRequestHandler-->
				<typeDeclaration name="GetSurveyServiceRequestHandler">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ServiceRequestHandler"/>
					</baseTypes>
					<members>
						<!-- HandleRequest(DataControllerService, JObject)-->
						<memberMethod returnType="System.Object" name="HandleRequest">
							<attributes override="true" public="true"/>
							<parameters>
								<parameter type="DataControllerService" name="service"/>
								<parameter type="JObject" name="args"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetSurvey">
										<target>
											<variableReferenceExpression name="service"/>
										</target>
										<parameters>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="name"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<xsl:if test="$TargetFramework!='3.5' and ($MembershipEnabled='true' or $CustomSecurity='true')">
					<!-- class DnnOAuthServiceRequestHandler-->
					<typeDeclaration name="DnnOAuthServiceRequestHandler">
						<attributes public="true"/>
						<baseTypes>
							<typeReference type="ServiceRequestHandler"/>
						</baseTypes>
						<members>
							<!-- HandleRequest(DataControllerService, JObject)-->
							<memberMethod returnType="System.Object" name="HandleRequest">
								<attributes override="true" public="true"/>
								<parameters>
									<parameter type="DataControllerService" name="service"/>
									<parameter type="JObject" name="args"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="DnnOAuthHandler" name="handler">
										<init>
											<objectCreateExpression type="DnnOAuthHandler"/>
										</init>
									</variableDeclarationStatement>
									<methodInvokeExpression methodName="ProcessRequest">
										<target>
											<variableReferenceExpression name="handler"/>
										</target>
										<parameters>
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</parameters>
									</methodInvokeExpression>
									<methodReturnStatement>
										<primitiveExpression value="null"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- AllowedMethods-->
							<memberProperty type="System.String[]" name="AllowedMethods">
								<attributes public="true" override="true"/>
								<getStatements>
									<methodReturnStatement>
										<arrayCreateExpression>
											<createType type="System.String"/>
											<initializers>
												<primitiveExpression value="GET"/>
												<primitiveExpression value="POST"/>
											</initializers>
										</arrayCreateExpression>
									</methodReturnStatement>
								</getStatements>
							</memberProperty>
							<!-- HandleException(JObject, Exception)-->
							<memberMethod returnType="System.Object" name="HandleException">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="JObject" name="args"/>
									<parameter type="Exception" name="ex"/>
								</parameters>
								<statements>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="IsTypeOf">
												<variableReferenceExpression name="ex"/>
												<typeReferenceExpression type="ThreadAbortException"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<throwExceptionStatement>
												<variableReferenceExpression name="ex"/>
											</throwExceptionStatement>
										</trueStatements>
									</conditionStatement>
									<methodReturnStatement>
										<methodInvokeExpression methodName="HandleException">
											<target>
												<baseReferenceExpression/>
											</target>
											<parameters>
												<variableReferenceExpression name="args"/>
												<variableReferenceExpression name="ex"/>
											</parameters>
										</methodInvokeExpression>
									</methodReturnStatement>
								</statements>
							</memberMethod>
						</members>
					</typeDeclaration>
				</xsl:if>
				<xsl:if test="$MobileAppSupported">
					<!-- class GetIdentityServiceRequestHandler-->
					<typeDeclaration name="GetIdentityServiceRequestHandler">
						<attributes public="true"/>
						<baseTypes>
							<typeReference type="ServiceRequestHandler"/>
						</baseTypes>
						<members>
							<!-- string[] AllowedMethods-->
							<memberProperty type="System.String[]" name="AllowedMethods">
								<attributes public="true" override="true"/>
								<getStatements>
									<methodReturnStatement>
										<arrayCreateExpression>
											<createType type="System.String"/>
											<initializers>
												<primitiveExpression value="GET"/>
												<primitiveExpression value="POST"/>
											</initializers>
										</arrayCreateExpression>
									</methodReturnStatement>
								</getStatements>
							</memberProperty>
							<!-- method HandleRequest(DataControllerService, JObject)-->
							<memberMethod returnType="System.Object" name="HandleRequest">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="DataControllerService" name="service"/>
									<parameter type="JObject" name="args"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="MembershipUser" name="user">
										<init>
											<methodInvokeExpression methodName="GetUser">
												<target>
													<typeReferenceExpression type="Membership"/>
												</target>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="HttpResponse" name="res">
										<init>
											<propertyReferenceExpression name="Response">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<unaryOperatorExpression operator="Not">
												<propertyReferenceExpression name="AuthorizationIsSupported">
													<typeReferenceExpression type="ApplicationServicesBase"/>
												</propertyReferenceExpression>
											</unaryOperatorExpression>
										</condition>
										<trueStatements>
											<methodInvokeExpression methodName="Write">
												<target>
													<variableReferenceExpression name="res"/>
												</target>
												<parameters>
													<primitiveExpression>
														<xsl:attribute name="value"><![CDATA[<h1>This app does not have a built-in security system and cannot run in native mode. Add membership support to the app.</h1>]]></xsl:attribute>
													</primitiveExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="End">
												<target>
													<variableReferenceExpression name="res"/>
												</target>
											</methodInvokeExpression>
										</trueStatements>
									</conditionStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="BooleanOr">
												<binaryOperatorExpression operator="IdentityEquality">
													<variableReferenceExpression name="user"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
												<binaryOperatorExpression operator="ValueInequality">
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="QueryString">
																<propertyReferenceExpression name="Request">
																	<propertyReferenceExpression name="Current">
																		<typeReferenceExpression type="HttpContext"/>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</target>
														<indices>
															<primitiveExpression value="force"/>
														</indices>
													</arrayIndexerExpression>
													<primitiveExpression value="false" convertTo="String"/>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<methodInvokeExpression methodName="SignOut">
												<target>
													<typeReferenceExpression type="FormsAuthentication"/>
												</target>
											</methodInvokeExpression>
											<variableDeclarationStatement type="System.String" name="returnUrl">
												<init>
													<binaryOperatorExpression operator="Add">
														<methodInvokeExpression methodName="TrimEnd">
															<target>
																<propertyReferenceExpression name="ApplicationPath">
																	<propertyReferenceExpression name="Request">
																		<propertyReferenceExpression name="Current">
																			<typeReferenceExpression type="HttpContext"/>
																		</propertyReferenceExpression>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<primitiveExpression value="/" convertTo="Char"/>
															</parameters>
														</methodInvokeExpression>
														<primitiveExpression value="/_invoke/getidentity?force=false"/>
													</binaryOperatorExpression>
												</init>
											</variableDeclarationStatement>
											<methodInvokeExpression methodName="Redirect">
												<target>
													<variableReferenceExpression name="res"/>
												</target>
												<parameters>
													<stringFormatExpression>
														<xsl:attribute name="format"><![CDATA[{0}?ReturnUrl={1}&_accMan=login]]></xsl:attribute>
														<propertyReferenceExpression name="LoginUrl">
															<typeReferenceExpression type="FormsAuthentication"/>
														</propertyReferenceExpression>
														<methodInvokeExpression methodName="UrlEncode">
															<target>
																<typeReferenceExpression type="HttpUtility"/>
															</target>
															<parameters>
																<variableReferenceExpression name="returnUrl"/>
															</parameters>
														</methodInvokeExpression>
													</stringFormatExpression>
													<primitiveExpression value="true"/>
												</parameters>
											</methodInvokeExpression>
										</trueStatements>
										<falseStatements>
											<variableDeclarationStatement type="UserTicket" name="ticket">
												<init>
													<methodInvokeExpression methodName="CreateTicket">
														<target>
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="ApplicationServices"/>
															</propertyReferenceExpression>
														</target>
														<parameters>
															<variableReferenceExpression name="user"/>
															<primitiveExpression value="null"/>
														</parameters>
													</methodInvokeExpression>
												</init>
											</variableDeclarationStatement>
											<methodInvokeExpression methodName="Add">
												<target>
													<propertyReferenceExpression name="Claims">
														<variableReferenceExpression name="ticket"/>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<primitiveExpression value="deviceId"/>
													<methodInvokeExpression methodName="Replace">
														<target>
															<methodInvokeExpression methodName="ToString">
																<target>
																	<methodInvokeExpression methodName="NewGuid">
																		<target>
																			<typeReferenceExpression type="Guid"/>
																		</target>
																	</methodInvokeExpression>
																</target>
															</methodInvokeExpression>
														</target>
														<parameters>
															<primitiveExpression value="-"/>
															<stringEmptyExpression/>
														</parameters>
													</methodInvokeExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="Add">
												<target>
													<propertyReferenceExpression name="Claims">
														<variableReferenceExpression name="ticket"/>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<primitiveExpression value="culture"/>
													<propertyReferenceExpression name="Name">
														<propertyReferenceExpression name="CurrentUICulture">
															<typeReferenceExpression type="CultureInfo"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="Clear">
												<target>
													<variableReferenceExpression name="res"/>
												</target>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="Write">
												<target>
													<variableReferenceExpression name="res"/>
												</target>
												<parameters>
													<primitiveExpression>
														<xsl:attribute name="value"><![CDATA[<html><body><script>]]></xsl:attribute>
													</primitiveExpression>
												</parameters>
											</methodInvokeExpression>
											<variableDeclarationStatement type="System.String" name="token">
												<init>
													<methodInvokeExpression methodName="SerializeObject">
														<target>
															<typeReferenceExpression type="JsonConvert"/>
														</target>
														<parameters>
															<variableReferenceExpression name="ticket"/>
															<propertyReferenceExpression name="None">
																<typeReferenceExpression type="Formatting"/>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
												</init>
											</variableDeclarationStatement>
											<variableDeclarationStatement type="System.String" name="userAgent">
												<init>
													<propertyReferenceExpression name="UserAgent">
														<propertyReferenceExpression name="Request">
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="HttpContext"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</init>
											</variableDeclarationStatement>
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="BooleanOr">
														<methodInvokeExpression methodName="Contains">
															<target>
																<variableReferenceExpression name="userAgent"/>
															</target>
															<parameters>
																<primitiveExpression value="UMA-iOS"/>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="Contains">
															<target>
																<variableReferenceExpression name="userAgent"/>
															</target>
															<parameters>
																<primitiveExpression value="UMA-OSX"/>
															</parameters>
														</methodInvokeExpression>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<methodInvokeExpression methodName="Write">
														<target>
															<variableReferenceExpression name="res"/>
														</target>
														<parameters>
															<primitiveExpression>
																<xsl:attribute name="value"><![CDATA[window.webkit.messageHandlers.invoke.postMessage({ method: 'addidentity', args: ]]></xsl:attribute>
															</primitiveExpression>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="Write">
														<target>
															<variableReferenceExpression name="res"/>
														</target>
														<parameters>
															<variableReferenceExpression name="token"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="Write">
														<target>
															<variableReferenceExpression name="res"/>
														</target>
														<parameters>
															<primitiveExpression>
																<xsl:attribute name="value"><![CDATA[});]]></xsl:attribute>
															</primitiveExpression>
														</parameters>
													</methodInvokeExpression>
												</trueStatements>
												<falseStatements>
													<conditionStatement>
														<condition>
															<methodInvokeExpression methodName="Contains">
																<target>
																	<variableReferenceExpression name="userAgent"/>
																</target>
																<parameters>
																	<primitiveExpression value="UMA-W7"/>
																</parameters>
															</methodInvokeExpression>
														</condition>
														<trueStatements>
															<methodInvokeExpression methodName="Write">
																<target>
																	<variableReferenceExpression name="res"/>
																</target>
																<parameters>
																	<primitiveExpression>
																		<xsl:attribute name="value"><![CDATA[CefSharp.BindObjectAsync('CloudOnTime').then(function(){window.CloudOnTime.invoke('addidentity', ']]></xsl:attribute>
																	</primitiveExpression>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="Write">
																<target>
																	<variableReferenceExpression name="res"/>
																</target>
																<parameters>
																	<methodInvokeExpression methodName="UrlPathEncode">
																		<target>
																			<typeReferenceExpression type="HttpUtility"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="token"/>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="Write">
																<target>
																	<variableReferenceExpression name="res"/>
																</target>
																<parameters>
																	<primitiveExpression>
																		<xsl:attribute name="value"><![CDATA[')});]]></xsl:attribute>
																	</primitiveExpression>
																</parameters>
															</methodInvokeExpression>
														</trueStatements>
														<falseStatements>
															<methodInvokeExpression methodName="Write">
																<target>
																	<variableReferenceExpression name="res"/>
																</target>
																<parameters>
																	<primitiveExpression>
																		<xsl:attribute name="value"><![CDATA[function add() {window.CloudOnTime.invoke('addidentity', ']]></xsl:attribute>
																	</primitiveExpression>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="Write">
																<target>
																	<variableReferenceExpression name="res"/>
																</target>
																<parameters>
																	<methodInvokeExpression methodName="UrlPathEncode">
																		<target>
																			<typeReferenceExpression type="HttpUtility"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="token"/>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="Write">
																<target>
																	<variableReferenceExpression name="res"/>
																</target>
																<parameters>
																	<primitiveExpression>
																		<xsl:attribute name="value"><![CDATA[');}if(typeof(CefSharp)!='undefined')CefSharp.BindObjectAsync('CloudOnTime').then(add);else add();]]></xsl:attribute>
																	</primitiveExpression>
																</parameters>
															</methodInvokeExpression>
														</falseStatements>
													</conditionStatement>
												</falseStatements>
											</conditionStatement>
											<methodInvokeExpression methodName="Write">
												<target>
													<variableReferenceExpression name="res"/>
												</target>
												<parameters>
													<primitiveExpression>
														<xsl:attribute name="value"><![CDATA[</script></body></html>]]></xsl:attribute>
													</primitiveExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="End">
												<target>
													<variableReferenceExpression name="res"/>
												</target>
											</methodInvokeExpression>
										</falseStatements>
									</conditionStatement>
									<methodReturnStatement>
										<primitiveExpression value="null"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method HandleException(JObject, Exception)-->
							<memberMethod returnType="System.Object" name="HandleException">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="JObject" name="args"/>
									<parameter type="Exception" name="ex"/>
								</parameters>
								<statements>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="ValueEquality">
												<methodInvokeExpression methodName="GetType">
													<target>
														<variableReferenceExpression name="ex"/>
													</target>
												</methodInvokeExpression>
												<typeofExpression type="ThreadAbortException"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<methodReturnStatement>
												<methodInvokeExpression methodName="HandleException">
													<target>
														<baseReferenceExpression/>
													</target>
													<parameters>
														<variableReferenceExpression name="args"/>
														<variableReferenceExpression name="ex"/>
													</parameters>
												</methodInvokeExpression>
											</methodReturnStatement>
										</trueStatements>
									</conditionStatement>
									<throwExceptionStatement>
										<variableReferenceExpression name="ex"/>
									</throwExceptionStatement>
								</statements>
							</memberMethod>
						</members>
					</typeDeclaration>
					<!-- class GetManifestServiceRequestHandler-->
					<typeDeclaration name="GetManifestServiceRequestHandler">
						<attributes public="true"/>
						<baseTypes>
							<typeReference type="ServiceRequestHandler"/>
						</baseTypes>
						<members>
							<!-- method HandleRequest(DataControllerService, JObject)-->
							<memberMethod returnType="System.Object" name="HandleRequest">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="DataControllerService" name="service"/>
									<parameter type="JObject" name="args"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="ApplicationServices" name="services">
										<init>
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="ApplicationServicesBase"/>
											</propertyReferenceExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="JObject" name="response">
										<init>
											<objectCreateExpression type="JObject"/>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="JObject" name="settings">
										<init>
											<propertyReferenceExpression name="DefaultSettings">
												<variableReferenceExpression name="services"/>
											</propertyReferenceExpression>
										</init>
									</variableDeclarationStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="name"/>
											</indices>
										</arrayIndexerExpression>
										<methodInvokeExpression methodName="TryGetJsonProperty">
											<target>
												<typeReferenceExpression type="ApplicationServicesBase"/>
											</target>
											<parameters>
												<variableReferenceExpression name="settings"/>
												<primitiveExpression value="appName"/>
											</parameters>
										</methodInvokeExpression>
									</assignStatement>
									<conditionStatement>
										<condition>
											<unaryOperatorExpression operator="IsNullOrEmpty">
												<castExpression targetType="System.String">
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="response"/>
														</target>
														<indices>
															<primitiveExpression value="name"/>
														</indices>
													</arrayIndexerExpression>
												</castExpression>
											</unaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="response"/>
													</target>
													<indices>
														<primitiveExpression value="name"/>
													</indices>
												</arrayIndexerExpression>
												<propertyReferenceExpression name="DisplayName">
													<variableReferenceExpression name="services"/>
												</propertyReferenceExpression>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="appVersion"/>
											</indices>
										</arrayIndexerExpression>
										<propertyReferenceExpression name="Version">
											<typeReferenceExpression type="ApplicationServices"/>
										</propertyReferenceExpression>
									</assignStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="hostVersion"/>
											</indices>
										</arrayIndexerExpression>
										<propertyReferenceExpression name="HostVersion">
											<typeReferenceExpression type="ApplicationServices"/>
										</propertyReferenceExpression>
									</assignStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="copyright"/>
											</indices>
										</arrayIndexerExpression>
										<propertyReferenceExpression name="Copyright">
											<typeReferenceExpression type="SiteBase"/>
										</propertyReferenceExpression>
									</assignStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="home"/>
											</indices>
										</arrayIndexerExpression>
										<methodInvokeExpression methodName="UserHomePageUrl">
											<target>
												<variableReferenceExpression name="services"/>
											</target>
										</methodInvokeExpression>
									</assignStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="icon"/>
											</indices>
										</arrayIndexerExpression>
										<methodInvokeExpression methodName="TryGetJsonProperty">
											<target>
												<typeReferenceExpression type="ApplicationServicesBase"/>
											</target>
											<parameters>
												<variableReferenceExpression name="settings"/>
												<primitiveExpression value="host.icon"/>
											</parameters>
										</methodInvokeExpression>
									</assignStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="color"/>
											</indices>
										</arrayIndexerExpression>
										<methodInvokeExpression methodName="TryGetJsonProperty">
											<target>
												<typeReferenceExpression type="ApplicationServicesBase"/>
											</target>
											<parameters>
												<variableReferenceExpression name="settings"/>
												<primitiveExpression value="host.color"/>
											</parameters>
										</methodInvokeExpression>
									</assignStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="image"/>
											</indices>
										</arrayIndexerExpression>
										<methodInvokeExpression methodName="TryGetJsonProperty">
											<target>
												<typeReferenceExpression type="ApplicationServicesBase"/>
											</target>
											<parameters>
												<variableReferenceExpression name="settings"/>
												<primitiveExpression value="host.image"/>
											</parameters>
										</methodInvokeExpression>
									</assignStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="description"/>
											</indices>
										</arrayIndexerExpression>
										<methodInvokeExpression methodName="TryGetJsonProperty">
											<target>
												<typeReferenceExpression type="ApplicationServicesBase"/>
											</target>
											<parameters>
												<variableReferenceExpression name="settings"/>
												<primitiveExpression value="host.description"/>
											</parameters>
										</methodInvokeExpression>
									</assignStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="defaultTheme"/>
											</indices>
										</arrayIndexerExpression>
										<methodInvokeExpression methodName="TryGetJsonProperty">
											<target>
												<typeReferenceExpression type="ApplicationServicesBase"/>
											</target>
											<parameters>
												<variableReferenceExpression name="settings"/>
												<primitiveExpression value="ui.theme.name"/>
											</parameters>
										</methodInvokeExpression>
									</assignStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="defaultAccent"/>
											</indices>
										</arrayIndexerExpression>
										<methodInvokeExpression methodName="TryGetJsonProperty">
											<target>
												<typeReferenceExpression type="ApplicationServicesBase"/>
											</target>
											<parameters>
												<variableReferenceExpression name="settings"/>
												<primitiveExpression value="ui.theme.accent"/>
											</parameters>
										</methodInvokeExpression>
									</assignStatement>
									<variableDeclarationStatement type="JObject" name="themeInfo">
										<init>
											<methodInvokeExpression methodName="UserThemes">
												<target>
													<variableReferenceExpression name="services"/>
												</target>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="themes"/>
											</indices>
										</arrayIndexerExpression>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="themeInfo"/>
											</target>
											<indices>
												<primitiveExpression value="themes"/>
											</indices>
										</arrayIndexerExpression>
									</assignStatement>
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<indices>
												<primitiveExpression value="accents"/>
											</indices>
										</arrayIndexerExpression>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="themeInfo"/>
											</target>
											<indices>
												<primitiveExpression value="accents"/>
											</indices>
										</arrayIndexerExpression>
									</assignStatement>
									<conditionStatement>
										<condition>
											<propertyReferenceExpression name="IsAuthenticated">
												<propertyReferenceExpression name="Request">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</condition>
										<trueStatements>
											<variableDeclarationStatement type="List" name="files">
												<typeArguments>
													<typeReference type="ManifestFile"/>
												</typeArguments>
												<init>
													<objectCreateExpression type="List">
														<typeArguments>
															<typeReference type="ManifestFile"/>
														</typeArguments>
													</objectCreateExpression>
												</init>
											</variableDeclarationStatement>
											<variableDeclarationStatement type="List" name="reqFiles">
												<typeArguments>
													<typeReference type="ManifestFile"/>
												</typeArguments>
												<init>
													<objectCreateExpression type="List">
														<typeArguments>
															<typeReference type="ManifestFile"/>
														</typeArguments>
													</objectCreateExpression>
												</init>
											</variableDeclarationStatement>
											<comment>enumerate files to download</comment>
											<methodInvokeExpression methodName="AddSiteFiles">
												<parameters>
													<variableReferenceExpression name="files"/>
													<primitiveExpression value="css"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddSiteFiles">
												<parameters>
													<variableReferenceExpression name="files"/>
													<primitiveExpression value="js"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddSiteFiles">
												<parameters>
													<variableReferenceExpression name="files"/>
													<primitiveExpression value="fonts"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddSiteFiles">
												<parameters>
													<variableReferenceExpression name="files"/>
													<primitiveExpression value="images"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddSiteFiles">
												<parameters>
													<variableReferenceExpression name="files"/>
													<primitiveExpression value="pages"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="Add">
												<target>
													<variableReferenceExpression name="files"/>
												</target>
												<parameters>
													<methodInvokeExpression methodName="FromPath">
														<target>
															<typeReferenceExpression type="ManifestFile"/>
														</target>
														<parameters>
															<primitiveExpression value="js/daf/add.min.js"/>
														</parameters>
													</methodInvokeExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="Add">
												<target>
													<variableReferenceExpression name="files"/>
												</target>
												<parameters>
													<methodInvokeExpression methodName="FromPath">
														<target>
															<typeReferenceExpression type="ManifestFile"/>
														</target>
														<parameters>
															<primitiveExpression value="css/daf/add.min.css"/>
														</parameters>
													</methodInvokeExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="Add">
												<target>
													<variableReferenceExpression name="files"/>
												</target>
												<parameters>
													<methodInvokeExpression methodName="FromPath">
														<target>
															<typeReferenceExpression type="ManifestFile"/>
														</target>
														<parameters>
															<primitiveExpression value="touch-settings.json"/>
														</parameters>
													</methodInvokeExpression>
												</parameters>
											</methodInvokeExpression>
											<comment>add config.js</comment>
											<variableDeclarationStatement type="System.String" name="pageContent">
												<init>
													<methodInvokeExpression methodName="GetConfigJS"/>
												</init>
											</variableDeclarationStatement>
											<assignStatement>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="response"/>
													</target>
													<indices>
														<primitiveExpression value="config"/>
													</indices>
												</arrayIndexerExpression>
												<methodInvokeExpression methodName="FromObject">
													<target>
														<typeReferenceExpression type="JObject"/>
													</target>
													<parameters>
														<methodInvokeExpression methodName="GetConfig">
															<target>
																<typeReferenceExpression type="ManifestFile"/>
															</target>
															<parameters>
																<variableReferenceExpression name="pageContent"/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</assignStatement>
											<comment>build required js</comment>
											<variableDeclarationStatement type="System.Boolean" name="combinedScript">
												<init>
													<propertyReferenceExpression name="EnableCombinedScript">
														<typeReferenceExpression type="AquariumExtenderBase"/>
													</propertyReferenceExpression>
												</init>
											</variableDeclarationStatement>
											<assignStatement>
												<propertyReferenceExpression name="EnableCombinedScript">
													<typeReferenceExpression type="AquariumExtenderBase"/>
												</propertyReferenceExpression>
												<primitiveExpression value="true"/>
											</assignStatement>
											<foreachStatement>
												<variable type="ScriptReference" name="s"/>
												<target>
													<methodInvokeExpression methodName="StandardScripts">
														<target>
															<typeReferenceExpression type="AquariumExtenderBase"/>
														</target>
														<parameters>
															<primitiveExpression value="true"/>
														</parameters>
													</methodInvokeExpression>
												</target>
												<statements>
													<conditionStatement>
														<condition>
															<unaryOperatorExpression operator="IsNotNullOrEmpty">
																<propertyReferenceExpression name="Path">
																	<variableReferenceExpression name="s"/>
																</propertyReferenceExpression>
															</unaryOperatorExpression>
														</condition>
														<trueStatements>
															<methodInvokeExpression methodName="Add">
																<target>
																	<variableReferenceExpression name="reqFiles"/>
																</target>
																<parameters>
																	<methodInvokeExpression methodName="FromPath">
																		<target>
																			<typeReferenceExpression type="ManifestFile"/>
																		</target>
																		<parameters>
																			<propertyReferenceExpression name="Path">
																				<variableReferenceExpression name="s"/>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
														</trueStatements>
														<falseStatements>
															<variableDeclarationStatement type="ManifestFile" name="f">
																<init>
																	<methodInvokeExpression methodName="FromResource">
																		<target>
																			<typeReferenceExpression type="ManifestFile"/>
																		</target>
																		<parameters>
																			<propertyReferenceExpression name="Name">
																				<variableReferenceExpression name="s"/>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</init>
															</variableDeclarationStatement>
															<methodInvokeExpression methodName="Add">
																<target>
																	<variableReferenceExpression name="files"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="f"/>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="Add">
																<target>
																	<variableReferenceExpression name="reqFiles"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="f"/>
																</parameters>
															</methodInvokeExpression>
														</falseStatements>
													</conditionStatement>
												</statements>
											</foreachStatement>
											<assignStatement>
												<propertyReferenceExpression name="EnableCombinedScript">
													<typeReferenceExpression type="AquariumExtenderBase"/>
												</propertyReferenceExpression>
												<variableReferenceExpression name="combinedScript"/>
											</assignStatement>
											<variableDeclarationStatement type="JObject" name="require">
												<init>
													<objectCreateExpression type="JObject"/>
												</init>
											</variableDeclarationStatement>
											<assignStatement>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="response"/>
													</target>
													<indices>
														<primitiveExpression value="require"/>
													</indices>
												</arrayIndexerExpression>
												<variableReferenceExpression name="require"/>
											</assignStatement>
											<assignStatement>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="require"/>
													</target>
													<indices>
														<primitiveExpression value="js"/>
													</indices>
												</arrayIndexerExpression>
												<methodInvokeExpression methodName="FromObject">
													<target>
														<typeReferenceExpression type="JArray"/>
													</target>
													<parameters>
														<variableReferenceExpression name="reqFiles"/>
													</parameters>
												</methodInvokeExpression>
											</assignStatement>
											<methodInvokeExpression methodName="Clear">
												<target>
													<variableReferenceExpression name="reqFiles"/>
												</target>
											</methodInvokeExpression>
											<comment>build required css</comment>
											<foreachStatement>
												<variable type="System.String" name="css"/>
												<target>
													<methodInvokeExpression methodName="EnumerateTouchUIStylesheets">
														<target>
															<variableReferenceExpression name="services"/>
														</target>
													</methodInvokeExpression>
												</target>
												<statements>
													<conditionStatement>
														<condition>
															<unaryOperatorExpression operator="Not">
																<methodInvokeExpression methodName="StartsWith">
																	<target>
																		<methodInvokeExpression methodName="GetFileName">
																			<target>
																				<typeReferenceExpression type="Path"/>
																			</target>
																			<parameters>
																				<variableReferenceExpression name="css"/>
																			</parameters>
																		</methodInvokeExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="touch-theme"/>
																	</parameters>
																</methodInvokeExpression>
															</unaryOperatorExpression>
														</condition>
														<trueStatements>
															<methodInvokeExpression methodName="Add">
																<target>
																	<variableReferenceExpression name="reqFiles"/>
																</target>
																<parameters>
																	<methodInvokeExpression methodName="FromPath">
																		<target>
																			<typeReferenceExpression type="ManifestFile"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="css"/>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
														</trueStatements>
													</conditionStatement>
												</statements>
											</foreachStatement>
											<assignStatement>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="require"/>
													</target>
													<indices>
														<primitiveExpression value="css"/>
													</indices>
												</arrayIndexerExpression>
												<methodInvokeExpression methodName="FromObject">
													<target>
														<typeReferenceExpression type="JArray"/>
													</target>
													<parameters>
														<variableReferenceExpression name="reqFiles"/>
													</parameters>
												</methodInvokeExpression>
											</assignStatement>
											<comment>complete files</comment>
											<assignStatement>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="response"/>
													</target>
													<indices>
														<primitiveExpression value="files"/>
													</indices>
												</arrayIndexerExpression>
												<methodInvokeExpression methodName="FromObject">
													<target>
														<typeReferenceExpression type="JArray"/>
													</target>
													<parameters>
														<variableReferenceExpression name="files"/>
													</parameters>
												</methodInvokeExpression>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<methodReturnStatement>
										<variableReferenceExpression name="response"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- string[] AllowedMethods-->
							<memberProperty type="System.String[]" name="AllowedMethods">
								<attributes public="true" override="true"/>
								<getStatements>
									<methodReturnStatement>
										<arrayCreateExpression>
											<createType type="System.String"/>
											<initializers>
												<primitiveExpression value="GET"/>
												<primitiveExpression value="POST"/>
											</initializers>
										</arrayCreateExpression>
									</methodReturnStatement>
								</getStatements>
							</memberProperty>
							<!-- method HandleException(JObject, Exception)-->
							<memberMethod returnType="System.Object" name="HandleException">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="JObject" name="args"/>
									<parameter type="Exception" name="ex"/>
								</parameters>
								<statements>
									<throwExceptionStatement>
										<variableReferenceExpression name="ex"/>
									</throwExceptionStatement>
								</statements>
							</memberMethod>
							<!-- method AddSiteFiles(List<ManifestFile>, string)-->
							<memberMethod name="AddSiteFiles">
								<attributes/>
								<parameters>
									<parameter type="List" name="files">
										<typeArguments>
											<typeReference type="ManifestFile"/>
										</typeArguments>
									</parameter>
									<parameter type="System.String" name="siteFolder"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="System.String" name="rootPath">
										<init>
											<methodInvokeExpression methodName="MapPath">
												<target>
													<propertyReferenceExpression name="Server">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<primitiveExpression value="~\"/>
												</parameters>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<foreachStatement>
										<variable type="System.String" name="file"/>
										<target>
											<methodInvokeExpression methodName="EnumerateFiles">
												<target>
													<typeReferenceExpression type="Directory"/>
												</target>
												<parameters>
													<methodInvokeExpression methodName="Combine">
														<target>
															<typeReferenceExpression type="Path"/>
														</target>
														<parameters>
															<variableReferenceExpression name="rootPath"/>
															<variableReferenceExpression name="siteFolder"/>
														</parameters>
													</methodInvokeExpression>
													<primitiveExpression value="*.*"/>
													<propertyReferenceExpression name="AllDirectories">
														<typeReferenceExpression type="SearchOption"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</target>
										<statements>
											<variableDeclarationStatement type="Match" name="m">
												<init>
													<methodInvokeExpression methodName="Match">
														<target>
															<typeReferenceExpression type="Regex"/>
														</target>
														<parameters>
															<variableReferenceExpression name="file"/>
															<primitiveExpression>
																<xsl:attribute name="value"><![CDATA[\.(?'Culture'\w\w(-\w\w)?)\.(\w+)$]]></xsl:attribute>
															</primitiveExpression>
														</parameters>
													</methodInvokeExpression>
												</init>
											</variableDeclarationStatement>
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="BooleanOr">
														<unaryOperatorExpression operator="Not">
															<propertyReferenceExpression name="Success">
																<variableReferenceExpression name="m"/>
															</propertyReferenceExpression>
														</unaryOperatorExpression>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="Value">
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="Groups">
																			<variableReferenceExpression name="m"/>
																		</propertyReferenceExpression>
																	</target>
																	<indices>
																		<primitiveExpression value="Culture"/>
																	</indices>
																</arrayIndexerExpression>
															</propertyReferenceExpression>
															<propertyReferenceExpression name="Name">
																<propertyReferenceExpression name="CurrentUICulture">
																	<propertyReferenceExpression name="CurrentThread">
																		<typeReferenceExpression type="Thread"/>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</binaryOperatorExpression>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<variableDeclarationStatement name="relativePath">
														<init>
															<methodInvokeExpression methodName="Substring">
																<target>
																	<variableReferenceExpression name="file"/>
																</target>
																<parameters>
																	<propertyReferenceExpression name="Length">
																		<variableReferenceExpression name="rootPath"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
														</init>
													</variableDeclarationStatement>
													<conditionStatement>
														<condition>
															<methodInvokeExpression methodName="Equals">
																<target>
																	<methodInvokeExpression methodName="ToLower">
																		<target>
																			<methodInvokeExpression methodName="GetExtension">
																				<target>
																					<typeReferenceExpression type="Path"/>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="file"/>
																				</parameters>
																			</methodInvokeExpression>
																		</target>
																	</methodInvokeExpression>
																</target>
																<parameters>
																	<primitiveExpression value=".html"/>
																</parameters>
															</methodInvokeExpression>
															<binaryOperatorExpression operator="ValueEquality">
																<variableReferenceExpression name="siteFolder"/>
																<primitiveExpression value="pages"/>
															</binaryOperatorExpression>
														</condition>
														<trueStatements>
															<methodInvokeExpression methodName="Add">
																<target>
																	<variableReferenceExpression name="files"/>
																</target>
																<parameters>
																	<methodInvokeExpression methodName="FromUrl">
																		<target>
																			<typeReferenceExpression type="ManifestFile"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="relativePath"/>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
														</trueStatements>
														<falseStatements>
															<methodInvokeExpression methodName="Add">
																<target>
																	<variableReferenceExpression name="files"/>
																</target>
																<parameters>
																	<methodInvokeExpression methodName="FromPath">
																		<target>
																			<typeReferenceExpression type="ManifestFile"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="relativePath"/>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
														</falseStatements>
													</conditionStatement>
												</trueStatements>
											</conditionStatement>
										</statements>
									</foreachStatement>
								</statements>
							</memberMethod>
							<!-- method GetConfigJS()-->
							<memberMethod returnType="System.String" name="GetConfigJS">
								<attributes public="true" static="true"/>
								<statements>
									<variableDeclarationStatement type="Match" name="m">
										<init>
											<methodInvokeExpression methodName="Match">
												<target>
													<typeReferenceExpression type="Regex"/>
												</target>
												<parameters>
													<methodInvokeExpression methodName="GetContent">
														<target>
															<typeReferenceExpression type="ManifestFile"/>
														</target>
														<parameters>
															<propertyReferenceExpression name="HomePageUrl">
																<typeReferenceExpression type="ApplicationServices"/>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
													<primitiveExpression>
														<xsl:attribute name="value"><![CDATA[<\/footer><script >\s*(?'Config'[\S\s]+?)<\/script>]]></xsl:attribute>
													</primitiveExpression>
												</parameters>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<unaryOperatorExpression operator="Not">
												<propertyReferenceExpression name="Success">
													<variableReferenceExpression name="m"/>
												</propertyReferenceExpression>
											</unaryOperatorExpression>
										</condition>
										<trueStatements>
											<throwExceptionStatement>
												<objectCreateExpression type="Exception">
													<parameters>
														<primitiveExpression value="Home Page failed to process."/>
													</parameters>
												</objectCreateExpression>
											</throwExceptionStatement>
										</trueStatements>
									</conditionStatement>
									<methodReturnStatement>
										<propertyReferenceExpression name="Value">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Groups">
														<variableReferenceExpression name="m"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="Config"/>
												</indices>
											</arrayIndexerExpression>
										</propertyReferenceExpression>
									</methodReturnStatement>
								</statements>
							</memberMethod>
						</members>
					</typeDeclaration>
					<!-- class GetManifestFileServiceRequestHandler-->
					<typeDeclaration name="GetManifestFileServiceRequestHandler">
						<attributes public="true"/>
						<baseTypes>
							<typeReference type="ServiceRequestHandler"/>
						</baseTypes>
						<members>
							<!-- method HandleRequest(DataControllerService, JObject)-->
							<memberMethod returnType="System.Object" name="HandleRequest">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="DataControllerService" name="service"/>
									<parameter type="JObject" name="args"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="HttpContext" name="context">
										<init>
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="System.String" name="requestedFile">
										<init>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="args"/>
													</target>
													<indices>
														<primitiveExpression value="file"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<unaryOperatorExpression operator="IsNullOrEmpty">
												<variableReferenceExpression name="requestedFile"/>
											</unaryOperatorExpression>
										</condition>
										<trueStatements>
											<throwExceptionStatement>
												<objectCreateExpression type="HttpException">
													<parameters>
														<primitiveExpression value="400"/>
														<primitiveExpression value="File argument is required."/>
													</parameters>
												</objectCreateExpression>
											</throwExceptionStatement>
										</trueStatements>
									</conditionStatement>
									<assignStatement>
										<variableReferenceExpression name="requestedFile"/>
										<methodInvokeExpression methodName="Replace">
											<target>
												<variableReferenceExpression name="requestedFile"/>
											</target>
											<parameters>
												<primitiveExpression value="/" convertTo="Char"/>
												<primitiveExpression value="\" convertTo="Char"/>
											</parameters>
										</methodInvokeExpression>
									</assignStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="ValueEquality">
												<variableReferenceExpression name="requestedFile"/>
												<primitiveExpression value="js\host\config.js"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<methodInvokeExpression methodName="Write">
												<target>
													<propertyReferenceExpression name="Response">
														<variableReferenceExpression name="context"/>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<methodInvokeExpression methodName="GetConfigJS">
														<target>
															<typeReferenceExpression type="GetManifestServiceRequestHandler"/>
														</target>
													</methodInvokeExpression>
												</parameters>
											</methodInvokeExpression>
										</trueStatements>
										<falseStatements>
											<conditionStatement>
												<condition>
													<methodInvokeExpression methodName="StartsWith">
														<target>
															<variableReferenceExpression name="requestedFile"/>
														</target>
														<parameters>
															<primitiveExpression value="_resources\"/>
														</parameters>
													</methodInvokeExpression>
												</condition>
												<trueStatements>
													<variableDeclarationStatement type="System.String" name="resourceName">
														<init>
															<methodInvokeExpression methodName="Substring">
																<target>
																	<variableReferenceExpression name="requestedFile"/>
																</target>
																<parameters>
																	<primitiveExpression value="11"/>
																</parameters>
															</methodInvokeExpression>
														</init>
													</variableDeclarationStatement>
													<usingStatement>
														<variable type="Stream" name="s">
															<init>
																<methodInvokeExpression methodName="GetResourceStream">
																	<target>
																		<typeReferenceExpression type="ControllerConfigurationUtility"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="resourceName"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variable>
														<statements>
															<conditionStatement>
																<condition>
																	<binaryOperatorExpression operator="IdentityInequality">
																		<variableReferenceExpression name="s"/>
																		<primitiveExpression value="null"/>
																	</binaryOperatorExpression>
																</condition>
																<trueStatements>
																	<methodInvokeExpression methodName="CopyTo">
																		<target>
																			<variableReferenceExpression name="s"/>
																		</target>
																		<parameters>
																			<propertyReferenceExpression name="OutputStream">
																				<propertyReferenceExpression name="Response">
																					<variableReferenceExpression name="context"/>
																				</propertyReferenceExpression>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</trueStatements>
																<falseStatements>
																	<throwExceptionStatement>
																		<objectCreateExpression type="HttpException">
																			<parameters>
																				<primitiveExpression value="404"/>
																				<primitiveExpression value="File does not exist."/>
																			</parameters>
																		</objectCreateExpression>
																	</throwExceptionStatement>
																</falseStatements>
															</conditionStatement>
														</statements>
													</usingStatement>
												</trueStatements>
												<falseStatements>
													<conditionStatement>
														<condition>
															<binaryOperatorExpression operator="ValueEquality">
																<variableReferenceExpression name="requestedFile"/>
																<primitiveExpression value="js\daf\add.min.js"/>
															</binaryOperatorExpression>
														</condition>
														<trueStatements>
															<methodInvokeExpression methodName="Write">
																<target>
																	<propertyReferenceExpression name="Response">
																		<variableReferenceExpression name="context"/>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<methodInvokeExpression methodName="AddScripts">
																		<target>
																			<propertyReferenceExpression name="Current">
																				<typeReferenceExpression type="ApplicationServices"/>
																			</propertyReferenceExpression>
																		</target>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
														</trueStatements>
														<falseStatements>
															<conditionStatement>
																<condition>
																	<binaryOperatorExpression operator="ValueEquality">
																		<variableReferenceExpression name="requestedFile"/>
																		<primitiveExpression value="css\daf\add.min.css"/>
																	</binaryOperatorExpression>
																</condition>
																<trueStatements>
																	<methodInvokeExpression methodName="Write">
																		<target>
																			<propertyReferenceExpression name="Response">
																				<variableReferenceExpression name="context"/>
																			</propertyReferenceExpression>
																		</target>
																		<parameters>
																			<methodInvokeExpression methodName="AddStyleSheets">
																				<target>
																					<propertyReferenceExpression name="Current">
																						<typeReferenceExpression type="ApplicationServices"/>
																					</propertyReferenceExpression>
																				</target>
																			</methodInvokeExpression>
																		</parameters>
																	</methodInvokeExpression>
																</trueStatements>
																<falseStatements>
																	<conditionStatement>
																		<condition>
																			<!--<binaryOperatorExpression operator="BooleanAnd">-->
																			<methodInvokeExpression methodName="StartsWith">
																				<target>
																					<methodInvokeExpression methodName="GetExtension">
																						<target>
																							<typeReferenceExpression type="Path"/>
																						</target>
																						<parameters>
																							<variableReferenceExpression name="requestedFile"/>
																						</parameters>
																					</methodInvokeExpression>
																				</target>
																				<parameters>
																					<primitiveExpression value=".htm"/>
																				</parameters>
																			</methodInvokeExpression>
																			<!--<primitiveExpression value="false"/>
                                      </binaryOperatorExpression>-->
																		</condition>
																		<trueStatements>
																			<methodInvokeExpression methodName="Write">
																				<target>
																					<propertyReferenceExpression name="Response">
																						<variableReferenceExpression name="context"/>
																					</propertyReferenceExpression>
																				</target>
																				<parameters>
																					<methodInvokeExpression methodName="GetContent">
																						<target>
																							<typeReferenceExpression type="ManifestFile"/>
																						</target>
																						<parameters>
																							<binaryOperatorExpression operator="Add">
																								<primitiveExpression value="~/"/>
																								<methodInvokeExpression methodName="Replace">
																									<target>
																										<methodInvokeExpression methodName="Substring">
																											<target>
																												<variableReferenceExpression name="requestedFile"/>
																											</target>
																											<parameters>
																												<primitiveExpression value="0"/>
																												<methodInvokeExpression methodName="IndexOf">
																													<target>
																														<variableReferenceExpression name="requestedFile"/>
																													</target>
																													<parameters>
																														<primitiveExpression value="." convertTo="Char"/>
																													</parameters>
																												</methodInvokeExpression>
																											</parameters>
																										</methodInvokeExpression>
																									</target>
																									<parameters>
																										<primitiveExpression value="\" convertTo="Char"/>
																										<primitiveExpression value="/" convertTo="Char"/>
																									</parameters>
																								</methodInvokeExpression>
																							</binaryOperatorExpression>
																						</parameters>
																					</methodInvokeExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</trueStatements>
																		<falseStatements>
																			<variableDeclarationStatement type="System.String" name="p">
																				<init>
																					<methodInvokeExpression methodName="MapPath">
																						<target>
																							<propertyReferenceExpression name="Server">
																								<variableReferenceExpression name="context"/>
																							</propertyReferenceExpression>
																						</target>
																						<parameters>
																							<binaryOperatorExpression operator="Add">
																								<primitiveExpression value="~\"/>
																								<variableReferenceExpression name="requestedFile"/>
																							</binaryOperatorExpression>
																						</parameters>
																					</methodInvokeExpression>
																				</init>
																			</variableDeclarationStatement>
																			<conditionStatement>
																				<condition>
																					<methodInvokeExpression methodName="Exists">
																						<target>
																							<typeReferenceExpression type="File"/>
																						</target>
																						<parameters>
																							<variableReferenceExpression name="p"/>
																						</parameters>
																					</methodInvokeExpression>
																				</condition>
																				<trueStatements>
																					<conditionStatement>
																						<condition>
																							<methodInvokeExpression methodName="Contains">
																								<target>
																									<variableReferenceExpression name="requestedFile"/>
																								</target>
																								<parameters>
																									<primitiveExpression value="touch-theme.css"/>
																								</parameters>
																							</methodInvokeExpression>
																						</condition>
																						<trueStatements>
																							<variableDeclarationStatement name="theme">
																								<init>
																									<methodInvokeExpression methodName="ReadAllText">
																										<target>
																											<typeReferenceExpression type="File"/>
																										</target>
																										<parameters>
																											<variableReferenceExpression name="p"/>
																										</parameters>
																									</methodInvokeExpression>
																								</init>
																							</variableDeclarationStatement>
																							<assignStatement>
																								<variableReferenceExpression name="theme"/>
																								<methodInvokeExpression methodName="Replace">
																									<target>
																										<typeReferenceExpression type="Regex"/>
																									</target>
																									<parameters>
																										<variableReferenceExpression name="theme"/>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA['../../fonts/]]></xsl:attribute>
																										</primitiveExpression>
																										<primitiveExpression>
																											<xsl:attribute name="value"><![CDATA['../fonts/]]></xsl:attribute>
																										</primitiveExpression>
																									</parameters>
																								</methodInvokeExpression>
																							</assignStatement>
																							<assignStatement>
																								<variableReferenceExpression name="theme"/>
																								<methodInvokeExpression methodName="ConfigureMaterialIconFont">
																									<target>
																										<typeReferenceExpression type="StylesheetGenerator"/>
																									</target>
																									<parameters>
																										<variableReferenceExpression name="theme"/>
																									</parameters>
																								</methodInvokeExpression>
																							</assignStatement>
																							<methodInvokeExpression methodName="Write">
																								<target>
																									<propertyReferenceExpression name="Response">
																										<variableReferenceExpression name="context"/>
																									</propertyReferenceExpression>
																								</target>
																								<parameters>
																									<variableReferenceExpression name="theme"/>
																								</parameters>
																							</methodInvokeExpression>
																						</trueStatements>
																						<falseStatements>
																							<usingStatement>
																								<variable type="FileStream" name="f">
																									<init>
																										<methodInvokeExpression methodName="OpenRead">
																											<target>
																												<typeReferenceExpression type="File"/>
																											</target>
																											<parameters>
																												<variableReferenceExpression name="p"/>
																											</parameters>
																										</methodInvokeExpression>
																									</init>
																								</variable>
																								<statements>
																									<methodInvokeExpression methodName="CopyTo">
																										<target>
																											<variableReferenceExpression name="f"/>
																										</target>
																										<parameters>
																											<propertyReferenceExpression name="OutputStream">
																												<propertyReferenceExpression name="Response">
																													<variableReferenceExpression name="context"/>
																												</propertyReferenceExpression>
																											</propertyReferenceExpression>
																										</parameters>
																									</methodInvokeExpression>
																								</statements>
																							</usingStatement>
																						</falseStatements>
																					</conditionStatement>
																				</trueStatements>
																				<falseStatements>
																					<throwExceptionStatement>
																						<objectCreateExpression type="HttpException">
																							<parameters>
																								<primitiveExpression value="404"/>
																								<stringFormatExpression format="File {{0}} does not exist.">
																									<variableReferenceExpression name="p"/>
																								</stringFormatExpression>
																							</parameters>
																						</objectCreateExpression>
																					</throwExceptionStatement>
																				</falseStatements>
																			</conditionStatement>
																		</falseStatements>

																	</conditionStatement>
																</falseStatements>
															</conditionStatement>
														</falseStatements>
													</conditionStatement>
												</falseStatements>
											</conditionStatement>
										</falseStatements>
									</conditionStatement>
									<methodInvokeExpression methodName="End">
										<target>
											<propertyReferenceExpression name="Response">
												<variableReferenceExpression name="context"/>
											</propertyReferenceExpression>
										</target>
									</methodInvokeExpression>
									<methodReturnStatement>
										<primitiveExpression value="null"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- bool RequiresAuthentication-->
							<memberProperty type="System.Boolean" name="RequiresAuthentication">
								<attributes public="true" override="true"/>
								<getStatements>
									<methodReturnStatement>
										<primitiveExpression value="true"/>
									</methodReturnStatement>
								</getStatements>
							</memberProperty>
							<!-- method HandleException(JObject, Exception)-->
							<memberMethod returnType="System.Object" name="HandleException">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="JObject" name="args"/>
									<parameter type="Exception" name="ex"/>
								</parameters>
								<statements>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="ValueEquality">
												<methodInvokeExpression methodName="GetType">
													<target>
														<variableReferenceExpression name="ex"/>
													</target>
												</methodInvokeExpression>
												<typeofExpression type="ThreadAbortException"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<methodReturnStatement>
												<primitiveExpression value="null"/>
											</methodReturnStatement>
										</trueStatements>
									</conditionStatement>
									<throwExceptionStatement>
										<variableReferenceExpression name="ex"/>
									</throwExceptionStatement>
								</statements>
							</memberMethod>
						</members>
					</typeDeclaration>
				</xsl:if>
				<!-- class ServiceRequestError -->
				<typeDeclaration name="ServiceRequestError">
					<attributes public="true"/>
					<members>
						<!-- property ExceptionType -->
						<memberProperty type="System.String" name="ExceptionType">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property Message -->
						<memberProperty type="System.String" name="Message">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property StackTrace -->
						<memberProperty type="System.String" name="StackTrace">
							<attributes public="true" final="true"/>
						</memberProperty>
					</members>
				</typeDeclaration>
				<!-- class ServiceRequestRedirectException-->
				<typeDeclaration name="ServiceRequestRedirectException">
					<baseTypes>
						<typeReference type="Exception"/>
					</baseTypes>
					<members>
						<memberProperty type="System.String" name="RedirectUrl">
							<attributes public="true"/>
						</memberProperty>
						<constructor>
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="redirectUrl"/>
							</parameters>
							<statements>
								<assignStatement>
									<propertyReferenceExpression name="RedirectUrl">
										<thisReferenceExpression/>
									</propertyReferenceExpression>
									<variableReferenceExpression name="redirectUrl"/>
								</assignStatement>
							</statements>
						</constructor>
					</members>
				</typeDeclaration>
				<!-- class RequestValidationService-->
				<typeDeclaration name="RequestValidationService" isPartial="true">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="RequestValidationServiceBase"/>
					</baseTypes>
				</typeDeclaration>
				<!-- class RequestValidationServiceBase-->
				<typeDeclaration name="RequestValidationServiceBase">
					<attributes public="true"/>
					<members>
						<!-- Regex ValidRequestRegex-->
						<memberField type="Regex" name="ValidRequestRegex">
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[<[^\w<>]*(?:[^<>"'\s]*:)?[^\w<>]*(?:\W*s\W*c\W*r\W*i\W*p\W*t|\W*f\W*o\W*r\W*m|\W*s\W*t\W*y\W*l\W*e|\W*s\W*v\W*g|\W*m\W*a\W*r\W*q\W*u\W*e\W*e|(?:\W*l\W*i\W*n\W*k|\W*o\W*b\W*j\W*e\W*c\W*t|\W*e\W*m\W*b\W*e\W*d|\W*a\W*p\W*p\W*l\W*e\W*t|\W*p\W*a\W*r\W*a\W*m|\W*i?\W*f\W*r\W*a\W*m\W*e|\W*b\W*a\W*s\W*e|\W*b\W*o\W*d\W*y|\W*m\W*e\W*t\W*a|\W*i\W*m\W*a?\W*g\W*e?|\W*v\W*i\W*d\W*e\W*o|\W*a\W*u\W*d\W*i\W*o|\W*b\W*i\W*n\W*d\W*i\W*n\W*g\W*s|\W*s\W*e\W*t|\W*i\W*s\W*i\W*n\W*d\W*e\W*x|\W*a\W*n\W*i\W*m\W*a\W*t\W*e)[^>\w])|(?:<\w[\s\S]*[\s\0\/]|['"])(?:formaction|style|background|src|lowsrc|ping|on(?:d(?:e(?:vice(?:(?:orienta|mo)tion|proximity|found|light)|livery(?:success|error)|activate)|r(?:ag(?:e(?:n(?:ter|d)|xit)|(?:gestur|leav)e|start|drop|over)?|op)|i(?:s(?:c(?:hargingtimechange|onnect(?:ing|ed))|abled)|aling)|ata(?:setc(?:omplete|hanged)|(?:availabl|chang)e|error)|urationchange|ownloading|blclick)|Moz(?:M(?:agnifyGesture(?:Update|Start)?|ouse(?:PixelScroll|Hittest))|S(?:wipeGesture(?:Update|Start|End)?|crolledAreaChanged)|(?:(?:Press)?TapGestur|BeforeResiz)e|EdgeUI(?:C(?:omplet|ancel)|Start)ed|RotateGesture(?:Update|Start)?|A(?:udioAvailable|fterPaint))|c(?:o(?:m(?:p(?:osition(?:update|start|end)|lete)|mand(?:update)?)|n(?:t(?:rolselect|extmenu)|nect(?:ing|ed))|py)|a(?:(?:llschang|ch)ed|nplay(?:through)?|rdstatechange)|h(?:(?:arging(?:time)?ch)?ange|ecking)|(?:fstate|ell)change|u(?:echange|t)|l(?:ick|ose))|m(?:o(?:z(?:pointerlock(?:change|error)|(?:orientation|time)change|fullscreen(?:change|error)|network(?:down|up)load)|use(?:(?:lea|mo)ve|o(?:ver|ut)|enter|wheel|down|up)|ve(?:start|end)?)|essage|ark)|s(?:t(?:a(?:t(?:uschanged|echange)|lled|rt)|k(?:sessione|comma)nd|op)|e(?:ek(?:complete|ing|ed)|(?:lec(?:tstar)?)?t|n(?:ding|t))|u(?:ccess|spend|bmit)|peech(?:start|end)|ound(?:start|end)|croll|how)|b(?:e(?:for(?:e(?:(?:scriptexecu|activa)te|u(?:nload|pdate)|p(?:aste|rint)|c(?:opy|ut)|editfocus)|deactivate)|gin(?:Event)?)|oun(?:dary|ce)|l(?:ocked|ur)|roadcast|usy)|a(?:n(?:imation(?:iteration|start|end)|tennastatechange)|fter(?:(?:scriptexecu|upda)te|print)|udio(?:process|start|end)|d(?:apteradded|dtrack)|ctivate|lerting|bort)|DOM(?:Node(?:Inserted(?:IntoDocument)?|Removed(?:FromDocument)?)|(?:CharacterData|Subtree)Modified|A(?:ttrModified|ctivate)|Focus(?:Out|In)|MouseScroll)|r(?:e(?:s(?:u(?:m(?:ing|e)|lt)|ize|et)|adystatechange|pea(?:tEven)?t|movetrack|trieving|ceived)|ow(?:s(?:inserted|delete)|e(?:nter|xit))|atechange)|p(?:op(?:up(?:hid(?:den|ing)|show(?:ing|n))|state)|a(?:ge(?:hide|show)|(?:st|us)e|int)|ro(?:pertychange|gress)|lay(?:ing)?)|t(?:ouch(?:(?:lea|mo)ve|en(?:ter|d)|cancel|start)|ime(?:update|out)|ransitionend|ext)|u(?:s(?:erproximity|sdreceived)|p(?:gradeneeded|dateready)|n(?:derflow|load))|f(?:o(?:rm(?:change|input)|cus(?:out|in)?)|i(?:lterchange|nish)|ailed)|l(?:o(?:ad(?:e(?:d(?:meta)?data|nd)|start)?|secapture)|evelchange|y)|g(?:amepad(?:(?:dis)?connected|button(?:down|up)|axismove)|et)|e(?:n(?:d(?:Event|ed)?|abled|ter)|rror(?:update)?|mptied|xit)|i(?:cc(?:cardlockerror|infochange)|n(?:coming|valid|put))|o(?:(?:(?:ff|n)lin|bsolet)e|verflow(?:changed)?|pen)|SVG(?:(?:Unl|L)oad|Resize|Scroll|Abort|Error|Zoom)|h(?:e(?:adphoneschange|l[dp])|ashchange|olding)|v(?:o(?:lum|ic)e|ersion)change|w(?:a(?:it|rn)ing|heel)|key(?:press|down|up)|(?:AppComman|Loa)d|no(?:update|match)|Request|zoom))[\s\0]*=]]></xsl:attribute>
										</primitiveExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- method ToJson(HttpContext, handler)-->
						<memberMethod returnType="JObject" name="ToJson">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="HttpContext" name="context"/>
								<parameter type="ServiceRequestHandler" name="handler"/>
							</parameters>
							<statements>
								<tryStatement>
									<statements>
										<variableDeclarationStatement type="RequestValidationService" name="service">
											<init>
												<objectCreateExpression type="RequestValidationService"/>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.Byte[]" name="data">
											<init>
												<arrayCreateExpression>
													<createType type="System.Byte"/>
													<sizeExpression>
														<propertyReferenceExpression name="Length">
															<propertyReferenceExpression name="InputStream">
																<propertyReferenceExpression name="Request">
																	<variableReferenceExpression name="context"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</sizeExpression>
												</arrayCreateExpression>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="Read">
											<target>
												<propertyReferenceExpression name="InputStream">
													<propertyReferenceExpression name="Request">
														<variableReferenceExpression name="context"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<variableReferenceExpression name="data"/>
												<primitiveExpression value="0"/>
												<propertyReferenceExpression name="Length">
													<variableReferenceExpression name="data"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement type="System.String" name="args">
											<init>
												<methodInvokeExpression methodName="ValidateJson">
													<target>
														<variableReferenceExpression name="service"/>
													</target>
													<parameters>
														<methodInvokeExpression methodName="GetString">
															<target>
																<propertyReferenceExpression name="UTF8">
																	<typeReferenceExpression type="Encoding"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<variableReferenceExpression name="data"/>
															</parameters>
														</methodInvokeExpression>
														<variableReferenceExpression name="context"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="JObject" name="json">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNullOrEmpty">
													<variableReferenceExpression name="args"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="args"/>
													<primitiveExpression value="{{}}"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<variableReferenceExpression name="json"/>
											<methodInvokeExpression methodName="ValidateJson">
												<target>
													<variableReferenceExpression name="service"/>
												</target>
												<parameters>
													<methodInvokeExpression methodName="Parse">
														<target>
															<argumentReferenceExpression name="handler"/>
														</target>
														<parameters>
															<variableReferenceExpression name="args"/>
														</parameters>
													</methodInvokeExpression>
													<variableReferenceExpression name="context"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Items">
														<argumentReferenceExpression name="context"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="ServiceRequestHandler_args"/>
												</indices>
											</arrayIndexerExpression>
											<variableReferenceExpression name="json"/>
										</assignStatement>
										<methodReturnStatement>
											<variableReferenceExpression name="json"/>
										</methodReturnStatement>
									</statements>
									<catch exceptionType="RESTfulResourceException" localName="ex">
										<methodReturnStatement>
											<methodInvokeExpression methodName="JsonError">
												<target>
													<methodInvokeExpression methodName="Create">
														<target>
															<typeReferenceExpression type="ApplicationServicesBase"/>
														</target>
													</methodInvokeExpression>
												</target>
												<parameters>
													<propertyReferenceExpression name="Error">
														<variableReferenceExpression name="ex"/>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="Message">
														<variableReferenceExpression name="ex"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</methodReturnStatement>
									</catch>
									<catch exceptionType="Exception" localName="ex">
										<methodReturnStatement>
											<methodInvokeExpression methodName="JsonError">
												<target>
													<methodInvokeExpression methodName="Create">
														<target>
															<typeReferenceExpression type="ApplicationServicesBase"/>
														</target>
													</methodInvokeExpression>
												</target>
												<parameters>
													<primitiveExpression value="parsing_error"/>
													<propertyReferenceExpression name="Message">
														<variableReferenceExpression name="ex"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</methodReturnStatement>
									</catch>
								</tryStatement>
							</statements>
						</memberMethod>
						<!-- method ValidateJson(string, HttpContext)-->
						<memberMethod returnType="System.String" name="ValidateJson">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="json"/>
								<parameter type="HttpContext" name="context"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="IsMatch">
											<target>
												<propertyReferenceExpression name="ValidRequestRegex"/>
											</target>
											<parameters>
												<variableReferenceExpression name="json"/>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<throwExceptionStatement>
											<objectCreateExpression type="HttpException">
												<parameters>
													<primitiveExpression value="400"/>
													<primitiveExpression value="Bad Request"/>
												</parameters>
											</objectCreateExpression>
										</throwExceptionStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="contentType">
									<init>
										<propertyReferenceExpression name="ContentType">
											<propertyReferenceExpression name="Request">
												<argumentReferenceExpression name="context"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="ValueEquality">
												<variableReferenceExpression name="contentType"/>
												<primitiveExpression value="application/xml"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="ValueEquality">
												<variableReferenceExpression name="contentType"/>
												<primitiveExpression value="text/xml"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<argumentReferenceExpression name="json"/>
											<methodInvokeExpression methodName="XmlToJson">
												<target>
													<typeReferenceExpression type="TextUtility"/>
												</target>
												<parameters>
													<argumentReferenceExpression name="json"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="HtmlDecode">
										<target>
											<typeReferenceExpression type="HttpUtility"/>
										</target>
										<parameters>
											<variableReferenceExpression name="json"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ValidateJson(JObject, HttpContext)-->
						<memberMethod returnType="JObject" name="ValidateJson">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="json"/>
								<parameter type="HttpContext" name="context"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.Boolean" name="isBad">
									<init>
										<primitiveExpression value="false"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="json"/>
												</target>
												<indices>
													<primitiveExpression value="IgnoreBusinessRules"/>
												</indices>
											</arrayIndexerExpression>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="isBad"/>
											<primitiveExpression value="true"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="json"/>
												</target>
												<indices>
													<primitiveExpression value="requests"/>
												</indices>
											</arrayIndexerExpression>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="JArray" name="list">
											<init>
												<castExpression targetType="JArray">
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="json"/>
														</target>
														<indices>
															<primitiveExpression value="requests"/>
														</indices>
													</arrayIndexerExpression>
												</castExpression>
											</init>
										</variableDeclarationStatement>
										<foreachStatement>
											<variable type="JObject" name="args"/>
											<target>
												<methodInvokeExpression methodName="Values">
													<typeArguments>
														<typeReference type="JObject"/>
													</typeArguments>
													<target>
														<variableReferenceExpression name="list"/>
													</target>
												</methodInvokeExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="args"/>
																</target>
																<indices>
																	<primitiveExpression value="IgnoreBusinessRules"/>
																</indices>
															</arrayIndexerExpression>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="isBad"/>
															<primitiveExpression value="true"/>
														</assignStatement>
														<breakStatement/>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<variableReferenceExpression name="isBad"/>
									</condition>
									<trueStatements>
										<throwExceptionStatement>
											<objectCreateExpression type="HttpException">
												<parameters>
													<primitiveExpression value="400"/>
													<primitiveExpression value="Bad Request"/>
												</parameters>
											</objectCreateExpression>
										</throwExceptionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="json"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class WorkflowResources -->
				<typeDeclaration name="WorkflowResources">
					<attributes public="true"/>
					<members>
						<!-- property StaticResources -->
						<memberProperty type="SortedDictionary" name="StaticResources">
							<typeArguments>
								<typeReference type="System.String"/>
								<typeReference type="System.String"/>
							</typeArguments>
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property DynamicResources -->
						<memberProperty type="List" name="DynamicResources">
							<typeArguments>
								<typeReference type="Regex"/>
							</typeArguments>
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- constructor() -->
						<constructor>
							<attributes public="true"/>
							<statements>
								<assignStatement>
									<fieldReferenceExpression name="staticResources"/>
									<objectCreateExpression type="SortedDictionary">
										<typeArguments>
											<typeReference type="System.String"/>
											<typeReference type="System.String"/>
										</typeArguments>
									</objectCreateExpression>
								</assignStatement>
								<assignStatement>
									<fieldReferenceExpression name="dynamicResources"/>
									<objectCreateExpression type="List">
										<typeArguments>
											<typeReference type="Regex"/>
										</typeArguments>
									</objectCreateExpression>
								</assignStatement>
							</statements>
						</constructor>
					</members>
				</typeDeclaration>
				<!-- class WorkflowRegister  -->
				<typeDeclaration name="WorkflowRegister" isPartial="true">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="WorkflowRegisterBase"/>
					</baseTypes>
				</typeDeclaration>
				<!-- class WorkflowRegisterBase -->
				<typeDeclaration name="WorkflowRegisterBase" >
					<attributes public="true"/>
					<members>
						<!-- property Resources-->
						<memberProperty type="SortedDictionary" name="Resources">
							<typeArguments>
								<typeReference type="System.String"/>
								<typeReference type="WorkflowResources"/>
							</typeArguments>
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property RoleRegister -->
						<memberProperty type="SortedDictionary" name="RoleRegister">
							<typeArguments>
								<typeReference type="System.String"/>
								<typeReference type="List">
									<typeArguments>
										<typeReference type="System.String"/>
									</typeArguments>
								</typeReference>
							</typeArguments>
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property UserWorkflows -->
						<memberProperty type="List" name="UserWorkflows">
							<typeArguments>
								<typeReference type="System.String"/>
							</typeArguments>
							<attributes public="true" final="true"/>
							<getStatements>
								<variableDeclarationStatement type="List" name="workflows">
									<typeArguments>
										<typeReference type="System.String"/>
									</typeArguments>
									<init>
										<castExpression targetType="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Items">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="WorkflowRegister_UserWorkflows"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="workflows"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="workflows"/>
											<objectCreateExpression type="List">
												<typeArguments>
													<typeReference type="System.String"/>
												</typeArguments>
											</objectCreateExpression>
										</assignStatement>
										<variableDeclarationStatement type="IIdentity" name="identity">
											<init>
												<propertyReferenceExpression name="Identity">
													<propertyReferenceExpression name="User">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="IsAuthenticated">
													<variableReferenceExpression name="identity"/>
												</propertyReferenceExpression>
											</condition>
											<trueStatements>
												<foreachStatement>
													<variable type="SiteContentFile" name="urf"/>
													<target>
														<methodInvokeExpression methodName="ReadSiteContent">
															<target>
																<propertyReferenceExpression name="Current">
																	<typeReferenceExpression type="ApplicationServices"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<primitiveExpression value="sys/register/users%"/>
																<propertyReferenceExpression name="Name">
																	<variableReferenceExpression name="identity"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</target>
													<statements>
														<variableDeclarationStatement type="System.String" name="text">
															<init>
																<propertyReferenceExpression name="Text">
																	<variableReferenceExpression name="urf"/>
																</propertyReferenceExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="text"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<foreachStatement>
																	<variable type="System.String" name="s"/>
																	<target>
																		<methodInvokeExpression methodName="Split">
																			<target>
																				<variableReferenceExpression name="text"/>
																			</target>
																			<parameters>
																				<arrayCreateExpression>
																					<createType type="System.Char"/>
																					<initializers>
																						<primitiveExpression value="&#10;" convertTo="Char"/>
																						<primitiveExpression value="," convertTo="Char"/>
																					</initializers>
																				</arrayCreateExpression>
																				<propertyReferenceExpression name="RemoveEmptyEntries">
																					<typeReferenceExpression type="StringSplitOptions"/>
																				</propertyReferenceExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</target>
																	<statements>
																		<variableDeclarationStatement type="System.String" name="name">
																			<init>
																				<methodInvokeExpression methodName="Trim">
																					<target>
																						<variableReferenceExpression name="s"/>
																					</target>
																				</methodInvokeExpression>
																			</init>
																		</variableDeclarationStatement>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="BooleanAnd">
																					<unaryOperatorExpression operator="IsNotNullOrEmpty">
																						<variableReferenceExpression name="name"/>
																					</unaryOperatorExpression>
																					<unaryOperatorExpression operator="Not">
																						<methodInvokeExpression methodName="Contains">
																							<target>
																								<variableReferenceExpression name="workflows"/>
																							</target>
																							<parameters>
																								<variableReferenceExpression name="name"/>
																							</parameters>
																						</methodInvokeExpression>
																					</unaryOperatorExpression>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<methodInvokeExpression methodName="Add">
																					<target>
																						<variableReferenceExpression name="workflows"/>
																					</target>
																					<parameters>
																						<variableReferenceExpression name="name"/>
																					</parameters>
																				</methodInvokeExpression>
																			</trueStatements>
																		</conditionStatement>
																	</statements>
																</foreachStatement>
															</trueStatements>
														</conditionStatement>
													</statements>
												</foreachStatement>
											</trueStatements>
										</conditionStatement>
										<comment>enumerate role workflows</comment>
										<variableDeclarationStatement type="System.Boolean" name="isAuthenticated">
											<init>
												<propertyReferenceExpression name="IsAuthenticated">
													<propertyReferenceExpression name="Identity">
														<propertyReferenceExpression name="User">
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="HttpContext"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<foreachStatement>
											<variable type="System.String" name="role"/>
											<target>
												<propertyReferenceExpression name="Keys">
													<propertyReferenceExpression name="RoleRegister"/>
												</propertyReferenceExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanOr">
															<binaryOperatorExpression operator="BooleanOr">
																<binaryOperatorExpression operator="BooleanAnd">
																	<binaryOperatorExpression operator="ValueEquality">
																		<variableReferenceExpression name="role"/>
																		<primitiveExpression value="?"/>
																	</binaryOperatorExpression>
																	<unaryOperatorExpression operator="Not">
																		<variableReferenceExpression name="isAuthenticated"/>
																	</unaryOperatorExpression>
																</binaryOperatorExpression>
																<binaryOperatorExpression operator="BooleanAnd">
																	<binaryOperatorExpression operator="ValueEquality">
																		<variableReferenceExpression name="role"/>
																		<primitiveExpression value="*"/>
																	</binaryOperatorExpression>
																	<variableReferenceExpression name="isAuthenticated"/>
																</binaryOperatorExpression>
															</binaryOperatorExpression>
															<methodInvokeExpression methodName="UserIsInRole">
																<target>
																	<typeReferenceExpression type="DataControllerBase"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="role"/>
																</parameters>
															</methodInvokeExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<foreachStatement>
															<variable type="System.String" name="name"/>
															<target>
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="RoleRegister"/>
																	</target>
																	<indices>
																		<variableReferenceExpression name="role"/>
																	</indices>
																</arrayIndexerExpression>
															</target>
															<statements>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="Contains">
																				<target>
																					<variableReferenceExpression name="workflows"/>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="name"/>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="workflows"/>
																			</target>
																			<parameters>
																				<variableReferenceExpression name="name"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</statements>
														</foreachStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Items">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="WorkflowRegister_UserWorkflows"/>
												</indices>
											</arrayIndexerExpression>
											<variableReferenceExpression name="workflows"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="workflows"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property Enabled -->
						<memberProperty type="System.Boolean" name="Enabled">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<binaryOperatorExpression operator="GreaterThan">
										<propertyReferenceExpression name="Count">
											<fieldReferenceExpression name="Resources"/>
										</propertyReferenceExpression>
										<primitiveExpression value="0"/>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- constructor()-->
						<constructor>
							<attributes public="true"/>
							<statements>
								<comment>initialize system workflows</comment>
								<assignStatement>
									<fieldReferenceExpression name="resources"/>
									<objectCreateExpression type="SortedDictionary">
										<typeArguments>
											<typeReference type="System.String"/>
											<typeReference type="WorkflowResources"/>
										</typeArguments>
									</objectCreateExpression>
								</assignStatement>
								<methodInvokeExpression methodName="RegisterBuiltinWorkflowResources"/>
								<foreachStatement>
									<variable type="SiteContentFile" name="w"/>
									<target>
										<methodInvokeExpression methodName="ReadSiteContent">
											<target>
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="ApplicationServices"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="sys/workflows%"/>
												<primitiveExpression value="%"/>
											</parameters>
										</methodInvokeExpression>
									</target>
									<statements>
										<variableDeclarationStatement type="System.String" name="text">
											<init>
												<propertyReferenceExpression name="Text">
													<variableReferenceExpression name="w"/>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<variableReferenceExpression name="text"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="WorkflowResources" name="wr">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="Not">
															<methodInvokeExpression methodName="TryGetValue">
																<target>
																	<propertyReferenceExpression name="Resources"/>
																</target>
																<parameters>
																	<propertyReferenceExpression name="PhysicalName">
																		<variableReferenceExpression name="w"/>
																	</propertyReferenceExpression>
																	<directionExpression direction="Out">
																		<variableReferenceExpression name="wr"/>
																	</directionExpression>
																</parameters>
															</methodInvokeExpression>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="wr"/>
															<objectCreateExpression type="WorkflowResources"/>
														</assignStatement>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<propertyReferenceExpression name="Resources"/>
																</target>
																<indices>
																	<propertyReferenceExpression name="PhysicalName">
																		<variableReferenceExpression name="w"/>
																	</propertyReferenceExpression>
																</indices>
															</arrayIndexerExpression>
															<variableReferenceExpression name="wr"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<foreachStatement>
													<variable type="System.String" name="s"/>
													<target>
														<methodInvokeExpression methodName="Split">
															<target>
																<variableReferenceExpression name="text"/>
															</target>
															<parameters>
																<arrayCreateExpression>
																	<createType type="System.Char"/>
																	<initializers>
																		<primitiveExpression value="&#10;" convertTo="Char"/>
																	</initializers>
																</arrayCreateExpression>
																<propertyReferenceExpression name="RemoveEmptyEntries">
																	<typeReferenceExpression type="StringSplitOptions"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</target>
													<statements>
														<variableDeclarationStatement type="System.String" name="query">
															<init>
																<methodInvokeExpression methodName="Trim">
																	<target>
																		<variableReferenceExpression name="s"/>
																	</target>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="query"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<methodInvokeExpression methodName="StartsWith">
																			<target>
																				<variableReferenceExpression name="s"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="regex "/>
																			</parameters>
																		</methodInvokeExpression>
																	</condition>
																	<trueStatements>
																		<variableDeclarationStatement type="System.String" name="regexQuery">
																			<init>
																				<methodInvokeExpression methodName="Trim">
																					<target>
																						<methodInvokeExpression methodName="Substring">
																							<target>
																								<variableReferenceExpression name="s"/>
																							</target>
																							<parameters>
																								<primitiveExpression value="6"/>
																							</parameters>
																						</methodInvokeExpression>
																					</target>
																				</methodInvokeExpression>
																			</init>
																		</variableDeclarationStatement>
																		<conditionStatement>
																			<condition>
																				<unaryOperatorExpression operator="IsNotNullOrEmpty">
																					<variableReferenceExpression name="regexQuery"/>
																				</unaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<tryStatement>
																					<statements>
																						<methodInvokeExpression methodName="Add">
																							<target>
																								<propertyReferenceExpression name="DynamicResources">
																									<variableReferenceExpression name="wr"/>
																								</propertyReferenceExpression>
																							</target>
																							<parameters>
																								<objectCreateExpression type="Regex">
																									<parameters>
																										<variableReferenceExpression name="regexQuery"/>
																										<propertyReferenceExpression name="IgnoreCase">
																											<typeReferenceExpression type="RegexOptions"/>
																										</propertyReferenceExpression>
																									</parameters>
																								</objectCreateExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</statements>
																					<catch exceptionType="Exception"></catch>
																				</tryStatement>
																			</trueStatements>
																		</conditionStatement>
																	</trueStatements>
																	<falseStatements>
																		<assignStatement>
																			<arrayIndexerExpression>
																				<target>
																					<propertyReferenceExpression name="StaticResources">
																						<variableReferenceExpression name="wr"/>
																					</propertyReferenceExpression>
																				</target>
																				<indices>
																					<methodInvokeExpression methodName="ToLower">
																						<target>
																							<variableReferenceExpression name="query"/>
																						</target>
																					</methodInvokeExpression>
																				</indices>
																			</arrayIndexerExpression>
																			<variableReferenceExpression name="query"/>
																		</assignStatement>
																	</falseStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
													</statements>
												</foreachStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<comment>read "role" workflows from the register</comment>
								<assignStatement>
									<fieldReferenceExpression name="roleRegister"/>
									<objectCreateExpression type="SortedDictionary">
										<typeArguments>
											<typeReference type="System.String"/>
											<typeReference type="List">
												<typeArguments>
													<typeReference type="System.String"/>
												</typeArguments>
											</typeReference>
										</typeArguments>
									</objectCreateExpression>
								</assignStatement>
								<foreachStatement>
									<variable type="SiteContentFile" name="rr"/>
									<target>
										<methodInvokeExpression methodName="ReadSiteContent">
											<target>
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="ApplicationServices"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="sys/register/roles%"/>
												<primitiveExpression value="%"/>
											</parameters>
										</methodInvokeExpression>
									</target>
									<statements>
										<variableDeclarationStatement type="System.String" name="text">
											<init>
												<propertyReferenceExpression name="Text">
													<variableReferenceExpression name="rr"/>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<variableReferenceExpression name="text"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="List" name="workflows">
													<typeArguments>
														<typeReference type="System.String"/>
													</typeArguments>
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="Not">
															<methodInvokeExpression methodName="TryGetValue">
																<target>
																	<propertyReferenceExpression name="RoleRegister"/>
																</target>
																<parameters>
																	<propertyReferenceExpression name="PhysicalName">
																		<variableReferenceExpression name="rr"/>
																	</propertyReferenceExpression>
																	<directionExpression direction="Out">
																		<variableReferenceExpression name="workflows"/>
																	</directionExpression>
																</parameters>
															</methodInvokeExpression>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="workflows"/>
															<objectCreateExpression type="List">
																<typeArguments>
																	<typeReference type="System.String"/>
																</typeArguments>
															</objectCreateExpression>
														</assignStatement>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<propertyReferenceExpression name="RoleRegister"/>
																</target>
																<indices>
																	<propertyReferenceExpression name="PhysicalName">
																		<variableReferenceExpression name="rr"/>
																	</propertyReferenceExpression>
																</indices>
															</arrayIndexerExpression>
															<variableReferenceExpression name="workflows"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<foreachStatement>
													<variable type="System.String" name="s"/>
													<target>
														<methodInvokeExpression methodName="Split">
															<target>
																<variableReferenceExpression name="text"/>
															</target>
															<parameters>
																<arrayCreateExpression>
																	<createType type="System.Char"/>
																	<initializers>
																		<primitiveExpression value="&#10;" convertTo="Char"/>
																		<primitiveExpression value="," convertTo="Char"/>
																	</initializers>
																</arrayCreateExpression>
																<propertyReferenceExpression name="RemoveEmptyEntries">
																	<typeReferenceExpression type="StringSplitOptions"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</target>
													<statements>
														<variableDeclarationStatement type="System.String" name="name">
															<init>
																<methodInvokeExpression methodName="Trim">
																	<target>
																		<variableReferenceExpression name="s"/>
																	</target>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="name"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="workflows"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="name"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</statements>
												</foreachStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
							</statements>
						</constructor>
						<!-- method RegisterBuiltinWorkflowResources() -->
						<memberMethod name="RegisterBuiltinWorkflowResources">
							<attributes family="true"/>
						</memberMethod>
						<!-- property IsEnabled -->
						<memberProperty type="System.Boolean" name="IsEnabled">
							<attributes public="true" static="true"/>
							<getStatements>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<propertyReferenceExpression name="IsSiteContentEnabled">
												<typeReferenceExpression type="ApplicationServices"/>
											</propertyReferenceExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="false"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="WorkflowRegister" name="wr">
									<init>
										<methodInvokeExpression methodName="GetCurrent">
											<target>
												<typeReferenceExpression type="WorkflowRegister"/>
											</target>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<methodReturnStatement>
									<binaryOperatorExpression operator="BooleanAnd">
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="wr"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
										<propertyReferenceExpression name="Enabled">
											<variableReferenceExpression name="wr"/>
										</propertyReferenceExpression>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method Allows(string) -->
						<memberMethod returnType="System.Boolean" name="Allows">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="fileName"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<propertyReferenceExpression name="IsSiteContentEnabled">
												<typeReferenceExpression type="ApplicationServices"/>
											</propertyReferenceExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="false"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="WorkflowRegister" name="wr">
									<init>
										<methodInvokeExpression methodName="GetCurrent">
											<target>
												<typeReferenceExpression type="WorkflowRegister"/>
											</target>
											<parameters>
												<argumentReferenceExpression name="fileName"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="IdentityEquality">
												<variableReferenceExpression name="wr"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<unaryOperatorExpression operator="Not">
												<propertyReferenceExpression name="Enabled">
													<variableReferenceExpression name="wr"/>
												</propertyReferenceExpression>
											</unaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="false"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="IsMatch">
										<target>
											<variableReferenceExpression name="wr"/>
										</target>
										<parameters>
											<argumentReferenceExpression name="fileName"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method IsMatch(string) -->
						<memberMethod returnType="System.Boolean" name="IsMatch">
							<attributes public="true" final="true"/>
							<parameters>
								<parameter type="System.String" name="physicalPath"/>
								<parameter type="System.String" name="physicalName"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="fileName">
									<init>
										<argumentReferenceExpression name="physicalPath"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<variableReferenceExpression name="fileName"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="fileName"/>
											<argumentReferenceExpression name="physicalName"/>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<assignStatement>
											<variableReferenceExpression name="fileName"/>
											<binaryOperatorExpression operator="Add">
												<binaryOperatorExpression operator="Add">
													<variableReferenceExpression name="fileName"/>
													<primitiveExpression value="/"/>
												</binaryOperatorExpression>
												<argumentReferenceExpression name="physicalName"/>
											</binaryOperatorExpression>
										</assignStatement>
									</falseStatements>
								</conditionStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="IsMatch">
										<parameters>
											<variableReferenceExpression name="fileName"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method IsMatch(string, string) -->
						<memberMethod returnType="System.Boolean" name="IsMatch">
							<attributes public="true" final="true"/>
							<parameters>
								<parameter type="System.String" name="fileName"/>
							</parameters>
							<statements>
								<assignStatement>
									<variableReferenceExpression name="fileName"/>
									<methodInvokeExpression methodName="ToLower">
										<target>
											<variableReferenceExpression name="fileName"/>
										</target>
									</methodInvokeExpression>
								</assignStatement>
								<variableDeclarationStatement type="List" name="activeWorkflows">
									<typeArguments>
										<typeReference type="System.String"/>
									</typeArguments>
									<init>
										<propertyReferenceExpression name="UserWorkflows"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="System.String" name="wf"/>
									<target>
										<variableReferenceExpression name="activeWorkflows"/>
									</target>
									<statements>
										<variableDeclarationStatement type="WorkflowResources" name="resourceList">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="TryGetValue">
													<target>
														<propertyReferenceExpression name="Resources"/>
													</target>
													<parameters>
														<variableReferenceExpression name="wf"/>
														<directionExpression direction="Out">
															<variableReferenceExpression name="resourceList"/>
														</directionExpression>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="ContainsKey">
															<target>
																<propertyReferenceExpression name="StaticResources">
																	<variableReferenceExpression name="resourceList"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<variableReferenceExpression name="fileName"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<methodReturnStatement>
															<primitiveExpression value="true"/>
														</methodReturnStatement>
													</trueStatements>
												</conditionStatement>
												<foreachStatement>
													<variable type="Regex" name="re"/>
													<target>
														<propertyReferenceExpression name="DynamicResources">
															<variableReferenceExpression name="resourceList"/>
														</propertyReferenceExpression>
													</target>
													<statements>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="IsMatch">
																	<target>
																		<variableReferenceExpression name="re"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="fileName"/>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<methodReturnStatement>
																	<primitiveExpression value="true"/>
																</methodReturnStatement>
															</trueStatements>
														</conditionStatement>
													</statements>
												</foreachStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<primitiveExpression value="false"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method GetCurrent(string) -->
						<memberMethod returnType="WorkflowRegister" name="GetCurrent">
							<attributes public="true" static="true"/>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetCurrent">
										<parameters>
											<primitiveExpression value="null"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method GetCurrent(string) -->
						<memberMethod returnType="WorkflowRegister" name="GetCurrent">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<methodInvokeExpression methodName="Supports">
												<target>
													<methodInvokeExpression methodName="Create">
														<target>
															<typeReferenceExpression type="ApplicationServicesBase"/>
														</target>
													</methodInvokeExpression>
												</target>
												<parameters>
													<propertyReferenceExpression name="WorkflowRegister">
														<typeReferenceExpression type="ApplicationFeature"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="null"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityInequality">
												<argumentReferenceExpression name="relativePath"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="BooleanOr">
												<methodInvokeExpression methodName="StartsWith">
													<target>
														<argumentReferenceExpression name="relativePath"/>
													</target>
													<parameters>
														<primitiveExpression value="sys/workflows"/>
													</parameters>
												</methodInvokeExpression>
												<methodInvokeExpression methodName="StartsWith">
													<target>
														<argumentReferenceExpression name="relativePath"/>
													</target>
													<parameters>
														<primitiveExpression value="sys/register"/>
													</parameters>
												</methodInvokeExpression>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="null"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="System.String" name="key">
									<init>
										<primitiveExpression value="WorkflowRegister_Current"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="HttpContext" name="context">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="HttpContext"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="WorkflowRegister" name="instance">
									<init>
										<castExpression targetType="WorkflowRegister">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Items">
														<variableReferenceExpression name="context"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<variableReferenceExpression name="key"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="instance"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="instance"/>
											<castExpression targetType="WorkflowRegister">
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Cache">
															<variableReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</target>
													<indices>
														<variableReferenceExpression name="key"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<variableReferenceExpression name="instance"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="instance"/>
													<objectCreateExpression type="WorkflowRegister"/>
												</assignStatement>
												<methodInvokeExpression methodName="Add">
													<target>
														<propertyReferenceExpression name="Cache">
															<variableReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<variableReferenceExpression name="key"/>
														<variableReferenceExpression name="instance"/>
														<primitiveExpression value="null"/>
														<methodInvokeExpression methodName="AddSeconds">
															<target>
																<propertyReferenceExpression name="Now">
																	<typeReferenceExpression type="DateTime"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<propertyReferenceExpression name="CacheDuration">
																	<variableReferenceExpression name="instance"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
														<propertyReferenceExpression name="NoSlidingExpiration">
															<typeReferenceExpression type="Cache"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="AboveNormal">
															<typeReferenceExpression type="CacheItemPriority"/>
														</propertyReferenceExpression>
														<primitiveExpression value="null"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Items">
														<variableReferenceExpression name="context"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<variableReferenceExpression name="key"/>
												</indices>
											</arrayIndexerExpression>
											<variableReferenceExpression name="instance"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="instance"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property CacheDuration -->
						<memberProperty type="System.Int32" name="CacheDuration">
							<attributes public="true"/>
							<getStatements>
								<methodReturnStatement>
									<primitiveExpression value="30"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
					</members>
				</typeDeclaration>
				<!-- enum SiteContentFields -->
				<typeDeclaration name="SiteContentFields" isEnum="true">
					<members>
						<memberField name="SiteContentId">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="DataFileName">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="DataContentType">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="Length">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="Path">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="Data">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="Roles">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="Users">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="Text">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="CacheProfile">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="RoleExceptions">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="UserExceptions">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="Schedule">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="ScheduleExceptions">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="CreatedDate">
							<attributes public="true" final="true"/>
						</memberField>
						<memberField name="ModifiedDate">
							<attributes public="true" final="true"/>
						</memberField>
					</members>
				</typeDeclaration>
				<!-- class SiteContentFile -->
				<typeDeclaration name="SiteContentFile">
					<members>
						<!-- constructor () -->
						<constructor>
							<attributes public="true"/>
							<statements>
								<assignStatement>
									<propertyReferenceExpression name="CacheLocation">
										<thisReferenceExpression/>
									</propertyReferenceExpression>
									<propertyReferenceExpression name="NoCache">
										<typeReferenceExpression type="HttpCacheability"/>
									</propertyReferenceExpression>
								</assignStatement>
							</statements>
						</constructor>
						<!-- property Id -->
						<memberField type="System.Object" name="id"/>
						<memberProperty type="System.Object" name="Id">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="id"/>
								</methodReturnStatement>
							</getStatements>
							<setStatements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityInequality">
												<propertySetValueReferenceExpression/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="IdentityEquality">
												<methodInvokeExpression methodName="GetType">
													<target>
														<propertySetValueReferenceExpression/>
													</target>
												</methodInvokeExpression>
												<typeofExpression type="System.Byte[]"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertySetValueReferenceExpression/>
											<objectCreateExpression type="Guid">
												<parameters>
													<castExpression targetType="System.Byte[]">
														<propertySetValueReferenceExpression/>
													</castExpression>
												</parameters>
											</objectCreateExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<fieldReferenceExpression name="id"/>
									<propertySetValueReferenceExpression/>
								</assignStatement>
							</setStatements>
						</memberProperty>
						<!-- property Name -->
						<memberProperty type="System.String" name="Name">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property Path -->
						<memberProperty type="System.String" name="Path">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property ContentType -->
						<memberProperty type="System.String" name="ContentType">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property ContentType -->
						<memberProperty type="System.Int32" name="Length">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property Data -->
						<memberProperty type="System.Byte[]" name="Data">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property PhysicalName  -->
						<memberProperty type="System.String" name="PhysicalName">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property FullName -->
						<memberProperty type="System.String" name="FullName">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<binaryOperatorExpression operator="Add">
										<propertyReferenceExpression name="Path"/>
										<binaryOperatorExpression operator="Add">
											<primitiveExpression value="/"/>
											<propertyReferenceExpression name="PhysicalName"/>
										</binaryOperatorExpression>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property Error -->
						<memberProperty type="System.String" name="Error">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property Schedule -->
						<memberProperty type="System.String" name="Schedule">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property ScheduleExceptions -->
						<memberProperty type="System.String" name="ScheduleExceptions">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property CreatedDate -->
						<memberProperty type="DateTime" name="CreatedDate">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property ModifiedDate -->
						<memberProperty type="DateTime" name="ModifiedDate">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property CacheProfile -->
						<memberProperty type="System.String" name="CacheProfile">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property CacheDuration -->
						<memberProperty type="System.Int32" name="CacheDuration">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property CacheLocation -->
						<memberProperty type="HttpCacheability" name="CacheLocation">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property CacheVaryByParam -->
						<memberProperty type="System.String[]" name="CacheVaryByParams">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property CacheVaryByHeader -->
						<memberProperty type="System.String[]" name="CacheVaryByHeaders">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property CacheNoStore -->
						<memberProperty type="System.Boolean" name="CacheNoStore">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- property Text -->
						<memberProperty type="System.String" name="Text">
							<attributes public="true" final="true"/>
							<getStatements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityInequality">
												<propertyReferenceExpression name="Data">
													<thisReferenceExpression/>
												</propertyReferenceExpression>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<propertyReferenceExpression name="IsText"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<methodInvokeExpression methodName="GetString">
												<target>
													<propertyReferenceExpression name="UTF8">
														<typeReferenceExpression type="Encoding"/>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<propertyReferenceExpression name="Data">
														<thisReferenceExpression/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<primitiveExpression value="null"/>
								</methodReturnStatement>
							</getStatements>
							<setStatements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<propertySetValueReferenceExpression/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<fieldReferenceExpression name="data"/>
											<primitiveExpression value="null"/>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<assignStatement>
											<fieldReferenceExpression name="data"/>
											<methodInvokeExpression methodName="GetBytes">
												<target>
													<propertyReferenceExpression name="UTF8">
														<typeReferenceExpression type="Encoding"/>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<propertySetValueReferenceExpression/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<fieldReferenceExpression name="contentType"/>
											<primitiveExpression value="text/plain"/>
										</assignStatement>
									</falseStatements>
								</conditionStatement>
							</setStatements>
						</memberProperty>
						<!-- property IsText-->
						<memberProperty type="System.Boolean" name="IsText">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<binaryOperatorExpression operator="BooleanAnd">
										<binaryOperatorExpression operator="IdentityInequality">
											<fieldReferenceExpression name="contentType"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
										<methodInvokeExpression methodName="IsMatch">
											<target>
												<typeReferenceExpression type="Regex"/>
											</target>
											<parameters>
												<fieldReferenceExpression name="contentType"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[^((text/\w+)|(application/(javascript|json)))$]]></xsl:attribute>
												</primitiveExpression>
											</parameters>
										</methodInvokeExpression>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method ReadAllBytes(string)-->
						<memberMethod returnType="System.Byte[]" name="ReadAllBytes">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ReadSiteContentBytes">
										<target>
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="ApplicationServices"/>
											</propertyReferenceExpression>
										</target>
										<parameters>
											<variableReferenceExpression name="relativePath"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method WriteAllBytes(string, byte[])-->
						<memberMethod returnType="System.Int32" name="WriteAllBytes">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
								<parameter type="System.Byte[]" name="data"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="WriteAllBytes">
										<parameters>
											<variableReferenceExpression name="relativePath"/>
											<xsl:choose>
												<xsl:when test="$TargetFramework='3.5' or $TargetFramework='4.0'">
													<primitiveExpression value="application/octet-stream"/>
												</xsl:when>
												<xsl:otherwise>
													<methodInvokeExpression methodName="GetMimeMapping">
														<target>
															<typeReferenceExpression type="MimeMapping"/>
														</target>
														<parameters>
															<methodInvokeExpression methodName="GetFileName">
																<target>
																	<typeReferenceExpression type="System.IO.Path"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="relativePath"/>
																</parameters>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
												</xsl:otherwise>
											</xsl:choose>
											<variableReferenceExpression name="data"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method WriteAllBytes(string, string, byte[])-->
						<memberMethod returnType="System.Int32" name="WriteAllBytes">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
								<parameter type="System.String" name="contentType"/>
								<parameter type="System.Byte[]" name="data"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="services" type="ApplicationServices">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="ApplicationServices"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="List" name="values">
									<typeArguments>
										<typeReference type="FieldValue"/>
									</typeArguments>
									<init>
										<methodInvokeExpression methodName="ToValues">
											<parameters>
												<variableReferenceExpression name="relativePath"/>
												<variableReferenceExpression name="contentType"/>
												<primitiveExpression value="true"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="values"/>
									</target>
									<parameters>
										<objectCreateExpression type="FieldValue">
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<target>
														<variableReferenceExpression name="services"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="Data">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<variableReferenceExpression name="data"/>
											</parameters>
										</objectCreateExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="values"/>
									</target>
									<parameters>
										<objectCreateExpression type="FieldValue">
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<target>
														<variableReferenceExpression name="services"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="Length">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<primitiveExpression value="null"/>
											</parameters>
										</objectCreateExpression>
									</parameters>
								</methodInvokeExpression>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="data"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertyReferenceExpression name="NewValue">
												<methodInvokeExpression methodName="Last">
													<target>
														<variableReferenceExpression name="values"/>
													</target>
												</methodInvokeExpression>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="Length">
												<variableReferenceExpression name="data"/>
											</propertyReferenceExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="Modified">
												<methodInvokeExpression methodName="Last">
													<target>
														<variableReferenceExpression name="values"/>
													</target>
												</methodInvokeExpression>
											</propertyReferenceExpression>
											<primitiveExpression value="true"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<propertyReferenceExpression name="RowsAffected">
										<methodInvokeExpression methodName="Write">
											<parameters>
												<variableReferenceExpression name="values"/>
											</parameters>
										</methodInvokeExpression>
									</propertyReferenceExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ReadAllText(string)-->
						<memberMethod returnType="System.String" name="ReadAllText">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ReadSiteContentString">
										<target>
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="ApplicationServices"/>
											</propertyReferenceExpression>
										</target>
										<parameters>
											<variableReferenceExpression name="relativePath"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ReadJson(string)-->
						<memberMethod returnType="JObject" name="ReadJson">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="result">
									<init>
										<methodInvokeExpression methodName="ReadAllText">
											<parameters>
												<variableReferenceExpression name="relativePath"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<variableReferenceExpression name="result"/>
											</unaryOperatorExpression>
											<binaryOperatorExpression operator="ValueEquality">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="result"/>
													</target>
													<indices>
														<primitiveExpression value="0"/>
													</indices>
												</arrayIndexerExpression>
												<primitiveExpression value="{{" convertTo="Char"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<methodInvokeExpression methodName="Parse">
												<target>
													<typeReferenceExpression type="JObject"/>
												</target>
												<parameters>
													<variableReferenceExpression name="result"/>
												</parameters>
											</methodInvokeExpression>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<objectCreateExpression type="JObject"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method WriteAllText(string, string)-->
						<memberMethod returnType="System.Int32" name="WriteAllText">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
								<parameter type="System.String" name="text"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="WriteAllText">
										<parameters>
											<variableReferenceExpression name="relativePath"/>
											<primitiveExpression value="text/plain"/>
											<variableReferenceExpression name="text"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method WriteAllText(string, string, string)-->
						<memberMethod returnType="System.Int32" name="WriteAllText">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
								<parameter type="System.String" name="contentType"/>
								<parameter type="System.String" name="text"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="List" name="values">
									<typeArguments>
										<typeReference type="FieldValue"/>
									</typeArguments>
									<init>
										<methodInvokeExpression methodName="ToValues">
											<parameters>
												<variableReferenceExpression name="relativePath"/>
												<variableReferenceExpression name="contentType"/>
												<primitiveExpression value="true"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="values"/>
									</target>
									<parameters>
										<objectCreateExpression type="FieldValue">
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<target>
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="ApplicationServices"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<propertyReferenceExpression name="Text">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<variableReferenceExpression name="text"/>
											</parameters>
										</objectCreateExpression>
									</parameters>
								</methodInvokeExpression>
								<methodReturnStatement>
									<propertyReferenceExpression name="RowsAffected">
										<methodInvokeExpression methodName="Write">
											<parameters>
												<variableReferenceExpression name="values"/>
											</parameters>
										</methodInvokeExpression>
									</propertyReferenceExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method WriteJson(JObject)-->
						<memberMethod returnType="System.Int32" name="WriteJson">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
								<parameter  type="JObject" name="json"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="WriteAllText">
										<parameters>
											<variableReferenceExpression name="relativePath"/>
											<primitiveExpression value="application/json"/>
											<methodInvokeExpression methodName="ToString">
												<target>
													<variableReferenceExpression name="json"/>
												</target>
											</methodInvokeExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method Write(List<FieldValue>)-->
						<memberMethod returnType="ActionResult" name="Write">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="List" name="values">
									<typeArguments>
										<typeReference type="FieldValue"/>
									</typeArguments>
								</parameter>
							</parameters>
							<statements>
								<comment>find Data, FileName, and ContentType field values</comment>
								<variableDeclarationStatement type="System.String" name="dataFieldName">
									<init>
										<methodInvokeExpression methodName="SiteContentFieldName">
											<target>
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="ApplicationServices"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<propertyReferenceExpression name="Data">
													<typeReferenceExpression type="SiteContentFields"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="fileNameFieldName">
									<init>
										<methodInvokeExpression methodName="SiteContentFieldName">
											<target>
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="ApplicationServices"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<propertyReferenceExpression name="DataFileName">
													<typeReferenceExpression type="SiteContentFields"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="contentTypeFieldName">
									<init>
										<methodInvokeExpression methodName="SiteContentFieldName">
											<target>
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="ApplicationServices"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<propertyReferenceExpression name="DataContentType">
													<typeReferenceExpression type="SiteContentFields"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="FieldValue" name="dataFieldValue">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="FieldValue" name="fileNameFieldValue">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="FieldValue" name="contentTypeFieldValue">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="FieldValue" name="fvo"/>
									<target>
										<argumentReferenceExpression name="values"/>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="Name">
														<variableReferenceExpression name="fvo"/>
													</propertyReferenceExpression>
													<variableReferenceExpression name="dataFieldName"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="dataFieldValue"/>
													<variableReferenceExpression name="fvo"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="Name">
														<variableReferenceExpression name="fvo"/>
													</propertyReferenceExpression>
													<variableReferenceExpression name="fileNameFieldName"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="fileNameFieldValue"/>
													<variableReferenceExpression name="fvo"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="Name">
														<variableReferenceExpression name="fvo"/>
													</propertyReferenceExpression>
													<variableReferenceExpression name="contentTypeFieldName"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="contentTypeFieldValue"/>
													<variableReferenceExpression name="fvo"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<comment>remove "Data" field from the values. We will use Blob.Write to persist the data</comment>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="dataFieldValue"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="Remove">
											<target>
												<argumentReferenceExpression name="values"/>
											</target>
											<parameters>
												<variableReferenceExpression name="dataFieldValue"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<comment> Insert or Update the record</comment>
								<variableDeclarationStatement type="ActionArgs" name="args">
									<init>
										<objectCreateExpression type="ActionArgs"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="Controller">
										<variableReferenceExpression name="args"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="GetSiteContentControllerName">
										<target>
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="ApplicationServices"/>
											</propertyReferenceExpression>
										</target>
									</methodInvokeExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="View">
										<variableReferenceExpression name="args"/>
									</propertyReferenceExpression>
									<primitiveExpression value="createForm1"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Values">
										<variableReferenceExpression name="args"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="ToArray">
										<target>
											<variableReferenceExpression name="values"/>
										</target>
									</methodInvokeExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="LastCommandName">
										<variableReferenceExpression name="args"/>
									</propertyReferenceExpression>
									<primitiveExpression value="New"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="CommandName">
										<variableReferenceExpression name="args"/>
									</propertyReferenceExpression>
									<primitiveExpression value="Insert"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="IgnoreBusinessRules">
										<variableReferenceExpression name="args"/>
									</propertyReferenceExpression>
									<primitiveExpression value="true"/>
								</assignStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<propertyReferenceExpression name="OldValue">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="values"/>
													</target>
													<indices>
														<primitiveExpression value="0"/>
													</indices>
												</arrayIndexerExpression>
											</propertyReferenceExpression>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertyReferenceExpression name="View">
												<variableReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<primitiveExpression value="editForm1"/>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="LastCommandName">
												<variableReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<primitiveExpression value="null"/>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="CommandName">
												<variableReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<primitiveExpression value="Update"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="ActionResult" name="result">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String[]" name="access">
									<init>
										<methodInvokeExpression methodName="GrantFullAccess">
											<target>
												<typeReferenceExpression type="Controller"/>
											</target>
											<parameters>
												<primitiveExpression value="{$SiteContentTableName}"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<tryStatement>
									<statements>
										<variableDeclarationStatement type="IDataController" name="c">
											<init>
												<methodInvokeExpression methodName="CreateDataController">
													<target>
														<typeReferenceExpression type="ControllerFactory"/>
													</target>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<variableReferenceExpression name="result"/>
											<methodInvokeExpression methodName="Execute">
												<target>
													<variableReferenceExpression name="c"/>
												</target>
												<parameters>
													<propertyReferenceExpression name="Controller">
														<variableReferenceExpression name="args"/>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="View">
														<variableReferenceExpression name="args"/>
													</propertyReferenceExpression>
													<variableReferenceExpression name="args"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<methodInvokeExpression methodName="RaiseExceptionIfErrors">
											<target>
												<variableReferenceExpression name="result"/>
											</target>
										</methodInvokeExpression>
										<comment> If there is Data field, then write it with Blob.Write instead. This will ensure that adapters are correctly engaged.</comment>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="dataFieldValue"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="DataField" name="dataField">
													<init>
														<methodInvokeExpression methodName="FindField">
															<target>
																<methodInvokeExpression methodName="CreateViewPage">
																	<target>
																		<castExpression targetType="DataControllerBase">
																			<variableReferenceExpression name="c"/>
																		</castExpression>
																	</target>
																</methodInvokeExpression>
															</target>
															<parameters>
																<variableReferenceExpression name="dataFieldName"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="System.String" name="blobHandler">
													<init>
														<propertyReferenceExpression name="OnDemandHandler">
															<variableReferenceExpression name="dataField"/>
														</propertyReferenceExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="System.Object" name="blobKey">
													<init>
														<propertyReferenceExpression name="Value">
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="values"/>
																</target>
																<indices>
																	<primitiveExpression value="0"/>
																</indices>
															</arrayIndexerExpression>
														</propertyReferenceExpression>
													</init>
												</variableDeclarationStatement>
												<methodInvokeExpression methodName="Write">
													<target>
														<typeReferenceExpression type="Blob"/>
													</target>
													<parameters>
														<variableReferenceExpression name="blobHandler"/>
														<variableReferenceExpression name="blobKey"/>
														<methodInvokeExpression methodName="ToString">
															<target>
																<propertyReferenceExpression name="Value">
																	<variableReferenceExpression name="fileNameFieldValue"/>
																</propertyReferenceExpression>
															</target>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="ToString">
															<target>
																<propertyReferenceExpression name="Value">
																	<variableReferenceExpression name="contentTypeFieldValue"/>
																</propertyReferenceExpression>
															</target>
														</methodInvokeExpression>
														<castExpression targetType="System.Byte[]">
															<propertyReferenceExpression name="Value">
																<variableReferenceExpression name="dataFieldValue"/>
															</propertyReferenceExpression>
														</castExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</statements>
									<finally>
										<methodInvokeExpression methodName="RevokeFullAccess">
											<target>
												<typeReferenceExpression type="Controller"/>
											</target>
											<parameters>
												<variableReferenceExpression name="access"/>
											</parameters>
										</methodInvokeExpression>
									</finally>
								</tryStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method Delete(string)-->
						<memberMethod returnType="System.Int32" name="Delete">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="ApplicationServices" name="services">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="ApplicationServices"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="List" name="values">
									<typeArguments>
										<typeReference type="FieldValue"/>
									</typeArguments>
									<init>
										<methodInvokeExpression methodName="ToValues">
											<parameters>
												<variableReferenceExpression name="relativePath"/>
												<primitiveExpression value="null"/>
												<primitiveExpression value="false"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="List" name="keys">
									<typeArguments>
										<typeReference type="System.String"/>
									</typeArguments>
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="SiteContentFile" name="file"/>
									<target>
										<methodInvokeExpression methodName="ReadSiteContent">
											<target>
												<variableReferenceExpression name="services"/>
											</target>
											<parameters>
												<castExpression targetType="System.String">
													<propertyReferenceExpression name="Value">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="values"/>
															</target>
															<indices>
																<primitiveExpression value="2"/>
															</indices>
														</arrayIndexerExpression>
													</propertyReferenceExpression>
												</castExpression>
												<castExpression targetType="System.String">
													<propertyReferenceExpression name="Value">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="values"/>
															</target>
															<indices>
																<primitiveExpression value="1"/>
															</indices>
														</arrayIndexerExpression>
													</propertyReferenceExpression>
												</castExpression>
											</parameters>
										</methodInvokeExpression>
									</target>
									<statements>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="keys"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="ToString">
													<target>
														<propertyReferenceExpression name="Id">
															<variableReferenceExpression name="file"/>
														</propertyReferenceExpression>
													</target>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</foreachStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="GreaterThan">
											<propertyReferenceExpression name="Count">
												<variableReferenceExpression name="keys"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="ActionArgs" name="args">
											<init>
												<objectCreateExpression type="ActionArgs"/>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<propertyReferenceExpression name="Controller">
												<variableReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<methodInvokeExpression methodName="GetSiteContentControllerName">
												<target>
													<variableReferenceExpression name="services"/>
												</target>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="View">
												<variableReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<primitiveExpression value="grid1"/>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="Values">
												<variableReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<arrayCreateExpression>
												<createType type="FieldValue"/>
												<initializers>
													<objectCreateExpression type="FieldValue">
														<parameters>
															<propertyReferenceExpression name="Name">
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="values"/>
																	</target>
																	<indices>
																		<primitiveExpression value="0"/>
																	</indices>
																</arrayIndexerExpression>
															</propertyReferenceExpression>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="keys"/>
																</target>
																<indices>
																	<primitiveExpression value="0"/>
																</indices>
															</arrayIndexerExpression>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="keys"/>
																</target>
																<indices>
																	<primitiveExpression value="0"/>
																</indices>
															</arrayIndexerExpression>
														</parameters>
													</objectCreateExpression>
												</initializers>
											</arrayCreateExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="SelectedValues">
												<variableReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<methodInvokeExpression methodName="ToArray">
												<target>
													<variableReferenceExpression name="keys"/>
												</target>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="CommandName">
												<variableReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<primitiveExpression value="Delete"/>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="IgnoreBusinessRules">
												<variableReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<primitiveExpression value="true"/>
										</assignStatement>
										<variableDeclarationStatement type="System.String[]" name="access">
											<init>
												<methodInvokeExpression methodName="GrantFullAccess">
													<target>
														<typeReferenceExpression type="Controller"/>
													</target>
													<parameters>
														<primitiveExpression value="{$SiteContentTableName}"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<tryStatement>
											<statements>
												<variableDeclarationStatement type="IDataController" name="c">
													<init>
														<methodInvokeExpression methodName="CreateDataController">
															<target>
																<typeReferenceExpression type="ControllerFactory"/>
															</target>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<!--<assignStatement>
                      <propertyReferenceExpression name="AllowPublicAccess">
                        <castExpression targetType="Controller">
                          <variableReferenceExpression name="c"/>
                        </castExpression>
                      </propertyReferenceExpression>
                      <primitiveExpression value="true"/>
                    </assignStatement>-->
												<variableDeclarationStatement type="ActionResult" name="result">
													<init>
														<methodInvokeExpression methodName="Execute">
															<target>
																<variableReferenceExpression name="c"/>
															</target>
															<parameters>
																<propertyReferenceExpression name="Controller">
																	<variableReferenceExpression name="args"/>
																</propertyReferenceExpression>
																<propertyReferenceExpression name="View">
																	<variableReferenceExpression name="args"/>
																</propertyReferenceExpression>
																<variableReferenceExpression name="args"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<methodInvokeExpression methodName="RaiseExceptionIfErrors">
													<target>
														<variableReferenceExpression name="result"/>
													</target>
												</methodInvokeExpression>
												<methodReturnStatement>
													<propertyReferenceExpression name="RowsAffected">
														<variableReferenceExpression name="result"/>
													</propertyReferenceExpression>
												</methodReturnStatement>
											</statements>
											<finally>
												<methodInvokeExpression methodName="RevokeFullAccess">
													<target>
														<typeReferenceExpression type="Controller"/>
													</target>
													<parameters>
														<variableReferenceExpression name="access"/>
													</parameters>
												</methodInvokeExpression>
											</finally>
										</tryStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<primitiveExpression value="0"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method Exists(string)-->
						<memberMethod returnType="System.Boolean" name="Exists">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<binaryOperatorExpression operator="GreaterThan">
										<propertyReferenceExpression name="Length">
											<methodInvokeExpression methodName="ReadSiteContent">
												<target>
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="ApplicationServices"/>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<variableReferenceExpression name="relativePath"/>
												</parameters>
											</methodInvokeExpression>
										</propertyReferenceExpression>
										<primitiveExpression value="0"/>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ToValues(string, string)-->
						<memberMethod returnType="List" name="ToValues">
							<typeArguments>
								<typeReference type="FieldValue"/>
							</typeArguments>
							<attributes private="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
								<parameter type="System.String" name="contentType"/>
								<parameter type="System.Boolean" name="checkForExisting"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="ApplicationServices" name="services">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="ApplicationServices"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="name">
									<init>
										<variableReferenceExpression name="relativePath"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="path">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Int32" name="index">
									<init>
										<methodInvokeExpression methodName="LastIndexOf">
											<target>
												<variableReferenceExpression name="relativePath"/>
											</target>
											<parameters>
												<primitiveExpression value="/"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="GreaterThanOrEqual">
											<variableReferenceExpression name="index"/>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="name"/>
											<methodInvokeExpression methodName="Substring">
												<target>
													<variableReferenceExpression name="relativePath"/>
												</target>
												<parameters>
													<binaryOperatorExpression operator="Add">
														<variableReferenceExpression name="index"/>
														<primitiveExpression value="1"/>
													</binaryOperatorExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<variableReferenceExpression name="path"/>
											<methodInvokeExpression methodName="Substring">
												<target>
													<variableReferenceExpression name="relativePath"/>
												</target>
												<parameters>
													<primitiveExpression value="0"/>
													<variableReferenceExpression name="index"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="List" name="list">
									<typeArguments>
										<typeReference type="FieldValue"/>
									</typeArguments>
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="FieldValue"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="list"/>
									</target>
									<parameters>
										<objectCreateExpression type="FieldValue">
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<target>
														<variableReferenceExpression name="services"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="SiteContentId">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</objectCreateExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="list"/>
									</target>
									<parameters>
										<objectCreateExpression type="FieldValue">
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<target>
														<variableReferenceExpression name="services"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="DataFileName">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<variableReferenceExpression name="name"/>
											</parameters>
										</objectCreateExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="list"/>
									</target>
									<parameters>
										<objectCreateExpression type="FieldValue">
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<target>
														<variableReferenceExpression name="services"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="Path">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<variableReferenceExpression name="path"/>
											</parameters>
										</objectCreateExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="list"/>
									</target>
									<parameters>
										<objectCreateExpression type="FieldValue">
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<target>
														<variableReferenceExpression name="services"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="DataContentType">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</objectCreateExpression>
									</parameters>
								</methodInvokeExpression>
								<conditionStatement>
									<condition>
										<variableReferenceExpression name="checkForExisting"/>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="SiteContentFile" name="file">
											<init>
												<methodInvokeExpression methodName="ReadSiteContent">
													<target>
														<variableReferenceExpression name="services"/>
													</target>
													<parameters>
														<variableReferenceExpression name="relativePath"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="file"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<propertyReferenceExpression name="OldValue">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="list"/>
															</target>
															<indices>
																<primitiveExpression value="0"/>
															</indices>
														</arrayIndexerExpression>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="Id">
														<variableReferenceExpression name="file"/>
													</propertyReferenceExpression>
												</assignStatement>
												<assignStatement>
													<propertyReferenceExpression name="Modified">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="list"/>
															</target>
															<indices>
																<primitiveExpression value="0"/>
															</indices>
														</arrayIndexerExpression>
													</propertyReferenceExpression>
													<primitiveExpression value="false"/>
												</assignStatement>
												<assignStatement>
													<propertyReferenceExpression name="OldValue">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="list"/>
															</target>
															<indices>
																<primitiveExpression value="1"/>
															</indices>
														</arrayIndexerExpression>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="Name">
														<variableReferenceExpression name="file"/>
													</propertyReferenceExpression>
												</assignStatement>
												<assignStatement>
													<propertyReferenceExpression name="OldValue">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="list"/>
															</target>
															<indices>
																<primitiveExpression value="2"/>
															</indices>
														</arrayIndexerExpression>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="Path">
														<variableReferenceExpression name="file"/>
													</propertyReferenceExpression>
												</assignStatement>
												<assignStatement>
													<propertyReferenceExpression name="OldValue">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="list"/>
															</target>
															<indices>
																<primitiveExpression value="3"/>
															</indices>
														</arrayIndexerExpression>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="ContentType">
														<variableReferenceExpression name="file"/>
													</propertyReferenceExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<variableReferenceExpression name="contentType"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertyReferenceExpression name="NewValue">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="list"/>
													</target>
													<indices>
														<primitiveExpression value="3"/>
													</indices>
												</arrayIndexerExpression>
											</propertyReferenceExpression>
											<variableReferenceExpression name="contentType"/>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="Modified">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="list"/>
													</target>
													<indices>
														<primitiveExpression value="3"/>
													</indices>
												</arrayIndexerExpression>
											</propertyReferenceExpression>
											<primitiveExpression value="true"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="list"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ToString() -->
						<memberMethod returnType="System.String" name="ToString">
							<attributes override="true" public="true"/>
							<statements>
								<methodReturnStatement>
									<stringFormatExpression format="{{0}}/{{1}}">
										<propertyReferenceExpression name="Path"/>
										<propertyReferenceExpression name="Name"/>
									</stringFormatExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class SiteContentFileList -->
				<typeDeclaration name="SiteContentFileList">
					<baseTypes>
						<typeReference type="List">
							<typeArguments>
								<typeReference type="SiteContentFile"/>
							</typeArguments>
						</typeReference>
					</baseTypes>
				</typeDeclaration>
				<!-- class ApplicationServices -->
				<typeDeclaration name="ApplicationServices" isPartial="true">
					<baseTypes>
						<xsl:choose>
							<xsl:when test="$IsUnlimited='true' and $TargetFramework != '3.5'">
								<typeReference type="EnterpriseApplicationServices"/>
							</xsl:when>
							<xsl:otherwise>
								<typeReference type="ApplicationServicesBase"/>
							</xsl:otherwise>
						</xsl:choose>
					</baseTypes>
					<members>
						<!-- member CustomCodeAssemblyName -->
						<memberField type="System.String" name="CustomCodeAssemblyName">
							<attributes public="true" static="true"/>
							<init>
								<primitiveExpression value="null"/>
							</init>
						</memberField>
						<!-- property CombinedResourceType -->
						<memberProperty type="System.String" name="CombinedResourceType">
							<attributes public="true" static="true"/>
							<getStatements>
								<variableDeclarationStatement name="t">
									<init>
										<stringEmptyExpression/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<propertyReferenceExpression name="AuthorizationIsSupported"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="t"/>
											<binaryOperatorExpression operator="Add">
												<variableReferenceExpression name="t"/>
												<primitiveExpression value="_noauth"/>
											</binaryOperatorExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="addonFile">
									<init>
										<methodInvokeExpression methodName="Match">
											<target>
												<typeReferenceExpression type="Regex"/>
											</target>
											<parameters>
												<propertyReferenceExpression name="LocalPath">
													<propertyReferenceExpression name="Url">
														<propertyReferenceExpression name="Request">
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="HttpContext"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[^\/(_\w+)]]></xsl:attribute>
												</primitiveExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="Success">
											<variableReferenceExpression name="addonFile"/>
										</propertyReferenceExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="t"/>
											<binaryOperatorExpression operator="Add">
												<variableReferenceExpression name="t"/>
												<propertyReferenceExpression name="Value">
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Groups">
																<variableReferenceExpression name="addonFile"/>
															</propertyReferenceExpression>
														</target>
														<indices>
															<primitiveExpression value="1"/>
														</indices>
													</arrayIndexerExpression>
												</propertyReferenceExpression>
											</binaryOperatorExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="t"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method StringToType(string) -->
						<memberMethod returnType="System.Type" name="StringToType">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="typeName"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="qualifiedTypeName">
									<init>
										<argumentReferenceExpression name="typeName"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<propertyReferenceExpression name="CustomCodeAssemblyName"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="qualifiedTypeName"/>
											<binaryOperatorExpression operator="Add">
												<variableReferenceExpression name="qualifiedTypeName"/>
												<binaryOperatorExpression operator="Add">
													<primitiveExpression value=","/>
													<propertyReferenceExpression name="CustomCodeAssemblyName"/>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="Type" name="t">
									<init>
										<methodInvokeExpression methodName="GetType">
											<target>
												<typeReferenceExpression type="Type"/>
											</target>
											<parameters>
												<variableReferenceExpression name="qualifiedTypeName"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="t"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="t"/>
											<methodInvokeExpression methodName="GetType">
												<target>
													<typeReferenceExpression type="Type"/>
												</target>
												<parameters>
													<variableReferenceExpression name="typeName"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="t"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method CreateInstance(string) -->
						<memberMethod returnType="System.Object" name="CreateInstance">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="typeName"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="CreateInstance">
										<target>
											<typeReferenceExpression type="Activator"/>
										</target>
										<parameters>
											<methodInvokeExpression methodName="StringToType">
												<parameters>
													<argumentReferenceExpression name="typeName"/>
												</parameters>
											</methodInvokeExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method Initialize-->
						<memberMethod name="Initialize">
							<attributes static="true" public="true"/>
							<statements>
								<variableDeclarationStatement type="System.String" name="appFrameworkConfigTypeName">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<comment>figure the name of the custom code assembly</comment>
								<variableDeclarationStatement type="Assembly" name="customCodeAssembly">
									<init>
										<propertyReferenceExpression name="Assembly">
											<typeofExpression type="ApplicationServices"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="Name">
												<methodInvokeExpression methodName="GetName">
													<target>
														<variableReferenceExpression name="customCodeAssembly"/>
													</target>
												</methodInvokeExpression>
											</propertyReferenceExpression>
											<primitiveExpression value="FreeTrial"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<foreachStatement>
											<variable type="Assembly" name="a"/>
											<target>
												<methodInvokeExpression methodName="GetAssemblies">
													<target>
														<propertyReferenceExpression name="CurrentDomain">
															<typeReferenceExpression type="AppDomain"/>
														</propertyReferenceExpression>
													</target>
												</methodInvokeExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="StartsWith">
															<target>
																<propertyReferenceExpression name="FullName">
																	<variableReferenceExpression name="a"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<primitiveExpression value="App_Code"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="customCodeAssembly"/>
															<variableReferenceExpression name="a"/>
														</assignStatement>
														<breakStatement/>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<propertyReferenceExpression name="CustomCodeAssemblyName"/>
									<propertyReferenceExpression name="FullName">
										<variableReferenceExpression name="customCodeAssembly"/>
									</propertyReferenceExpression>
								</assignStatement>
								<comment>find the full name of AppFrameworkConfig class</comment>
								<foreachStatement>
									<variable type="Type" name="t"/>
									<target>
										<methodInvokeExpression methodName="GetTypes">
											<target>
												<variableReferenceExpression name="customCodeAssembly"/>
											</target>
										</methodInvokeExpression>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="Name">
														<variableReferenceExpression name="t"/>
													</propertyReferenceExpression>
													<primitiveExpression value="AppFrameworkConfig"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="appFrameworkConfigTypeName"/>
													<propertyReferenceExpression name="FullName">
														<variableReferenceExpression name="t"/>
													</propertyReferenceExpression>
												</assignStatement>
												<breakStatement/>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<comment>initialize external components of the framework</comment>
								<variableDeclarationStatement type="System.Object" name="frameworkConfig">
									<init>
										<methodInvokeExpression methodName="CreateInstance">
											<parameters>
												<variableReferenceExpression name="appFrameworkConfigTypeName"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="frameworkConfig"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="InvokeMember">
											<target>
												<methodInvokeExpression methodName="GetType">
													<target>
														<variableReferenceExpression name="frameworkConfig"/>
													</target>
												</methodInvokeExpression>
											</target>
											<parameters>
												<primitiveExpression value="Initialize"/>
												<binaryOperatorExpression operator="BitwiseOr">
													<propertyReferenceExpression name="InvokeMethod">
														<typeReferenceExpression type="BindingFlags"/>
													</propertyReferenceExpression>
													<binaryOperatorExpression operator="BitwiseOr">
														<propertyReferenceExpression name="Instance">
															<typeReferenceExpression type="BindingFlags"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="Public">
															<typeReferenceExpression type="BindingFlags"/>
														</propertyReferenceExpression>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
												<primitiveExpression value="null"/>
												<variableReferenceExpression name="frameworkConfig"/>
												<primitiveExpression value="null"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<foreachStatement>
									<variable type="System.String" name="className"/>
									<target>
										<arrayCreateExpression>
											<createType type="System.String"/>
											<initializers>
												<primitiveExpression value="AppBuilder"/>
												<primitiveExpression value="AssistantUI"/>
												<primitiveExpression value="ContentMaker"/>
												<primitiveExpression value="OfflineSync"/>
												<primitiveExpression value="Survey"/>
											</initializers>
										</arrayCreateExpression>
									</target>
									<statements>
										<tryStatement>
											<statements>
												<variableDeclarationStatement type="Type" name="addonType">
													<init>
														<methodInvokeExpression methodName="GetType">
															<target>
																<typeReferenceExpression type="Type"/>
															</target>
															<parameters>
																<stringFormatExpression format="CodeOnTime.Addons.{{0}},addon.{{0}}">
																	<variableReferenceExpression name="className"/>
																</stringFormatExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<variableReferenceExpression name="addonType"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="Add">
															<target>
																<propertyReferenceExpression name="Addons"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="CreateInstance">
																	<target>
																		<typeReferenceExpression type="Activator"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="addonType"/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</statements>
											<catch exceptionType="Exception">
											</catch>
										</tryStatement>
									</statements>
								</foreachStatement>
								<comment>register service routes and map handlers</comment>
								<methodInvokeExpression methodName="RegisterServices">
									<target>
										<methodInvokeExpression  methodName="Create"/>
									</target>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method Login(username, password, createPersistentCookie)-->
						<memberMethod returnType="System.Object" name="Login">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="username"/>
								<parameter type="System.String" name="password"/>
								<parameter type="System.Boolean" name="createPersistentCookie"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="AuthenticateUser">
										<target>
											<methodInvokeExpression methodName="Create"/>
										</target>
										<parameters>
											<argumentReferenceExpression name="username"/>
											<argumentReferenceExpression name="password"/>
											<argumentReferenceExpression name="createPersistentCookie"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property HomePageUrl -->
						<memberProperty type="System.String" name="HomePageUrl">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="UserHomePageUrl">
										<target>
											<methodInvokeExpression methodName="Create"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method Logout()-->
						<memberMethod name="Logout">
							<attributes public="true" static="true"/>
							<statements>
								<methodInvokeExpression methodName="UserLogout">
									<target>
										<methodInvokeExpression methodName="Create"/>
									</target>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method AllowUI(string) -->
						<memberMethod returnType="System.Boolean" name="AllowUI">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="userName"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="restfulTouchRoles">
									<init>
										<convertExpression to="String">
											<methodInvokeExpression methodName="SettingsProperty">
												<target>
													<typeReferenceExpression type="ApplicationServicesBase"/>
												</target>
												<parameters>
													<primitiveExpression value="ui.roles"/>
												</parameters>
											</methodInvokeExpression>
										</convertExpression>
									</init>
								</variableDeclarationStatement>
								<methodReturnStatement>
									<binaryOperatorExpression operator="BooleanOr">
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<variableReferenceExpression name="restfulTouchRoles"/>
										</unaryOperatorExpression>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="IdentityInequality">
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Cookies">
															<propertyReferenceExpression name="Request">
																<propertyReferenceExpression name="Current">
																	<propertyReferenceExpression name="HttpContext"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value=".oauth2"/>
													</indices>
												</arrayIndexerExpression>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="GreaterThan">
												<methodInvokeExpression methodName="Count">
													<target>
														<methodInvokeExpression methodName="Intersect">
															<target>
																<methodInvokeExpression methodName="GetRolesForUser">
																	<target>
																		<typeReferenceExpression type="System.Web.Security.Roles"/>
																	</target>
																	<parameters>
																		<argumentReferenceExpression name="userName"/>
																	</parameters>
																</methodInvokeExpression>
															</target>
															<parameters>
																<methodInvokeExpression methodName="Split">
																	<target>
																		<typeReferenceExpression type="Regex"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="restfulTouchRoles"/>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[\s*,\s*]]></xsl:attribute>
																		</primitiveExpression>
																	</parameters>
																</methodInvokeExpression>
																<propertyReferenceExpression name="CurrentCultureIgnoreCase">
																	<typeReferenceExpression type="StringComparer"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</target>
												</methodInvokeExpression>
												<primitiveExpression value="0"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method Roles()-->
						<memberMethod returnType="System.String[]" name="Roles">
							<attributes public="true" static="true"/>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="UserRoles">
										<target>
											<methodInvokeExpression methodName="Create"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method Themes() -->
						<memberMethod returnType="JObject" name="Themes">
							<attributes public="true" static="true"/>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="UserThemes">
										<target>
											<methodInvokeExpression methodName="Create"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method OAuthGetAuthorizationUrl(string) -->
						<memberMethod returnType="System.String" name="OAuthGetAuthorizationUrl">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="provider"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="OAuthGetAuthorizationUrl">
										<parameters>
											<argumentReferenceExpression name="provider"/>
											<primitiveExpression value="null"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method OAuthGetAuthorizationUrl(string, string) -->
						<memberMethod returnType="System.String" name="OAuthGetAuthorizationUrl">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="provider"/>
								<parameter type="System.String" name="state"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="authorizationUrl">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<xsl:if test="$MembershipEnabled='true' or $CustomSecurity='true'">
									<xsl:if test="$IsUnlimited='true'">
										<variableDeclarationStatement type="Type" name="oauthHandlerType">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="TryGetValue">
													<target>
														<propertyReferenceExpression name="Handlers">
															<typeReferenceExpression type="OAuthHandlerFactory"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<methodInvokeExpression methodName="ToLower">
															<target>
																<argumentReferenceExpression name="provider"/>
															</target>
														</methodInvokeExpression>
														<directionExpression direction="Out">
															<variableReferenceExpression name="oauthHandlerType"/>
														</directionExpression>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="OAuthHandler" name="handler">
													<init>
														<castExpression targetType="OAuthHandler">
															<methodInvokeExpression methodName="CreateInstance">
																<target>
																	<typeReferenceExpression type="Activator"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="oauthHandlerType"/>
																</parameters>
															</methodInvokeExpression>
														</castExpression>
													</init>
												</variableDeclarationStatement>
												<assignStatement>
													<propertyReferenceExpression name="StartPage">
														<variableReferenceExpression name="handler"/>
													</propertyReferenceExpression>
													<methodInvokeExpression methodName="UserHomePageUrl">
														<target>
															<methodInvokeExpression methodName="Create"/>
														</target>
													</methodInvokeExpression>
												</assignStatement>
												<assignStatement>
													<propertyReferenceExpression name="AppState">
														<variableReferenceExpression name="handler"/>
													</propertyReferenceExpression>
													<argumentReferenceExpression name="state"/>
												</assignStatement>
												<assignStatement>
													<variableReferenceExpression name="authorizationUrl"/>
													<methodInvokeExpression methodName="GetAuthorizationUrl">
														<target>
															<variableReferenceExpression name="handler"/>
														</target>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
								</xsl:if>
								<methodReturnStatement>
									<variableReferenceExpression name="authorizationUrl"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method SetCookie(HttpCookie)  -->
						<memberMethod name="SetCookie">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="HttpCookie" name="cookie"/>
							</parameters>
							<statements>
								<methodInvokeExpression methodName="SendCookie">
									<target>
										<methodInvokeExpression methodName="Create"/>
									</target>
									<parameters>
										<argumentReferenceExpression name="cookie"/>
										<primitiveExpression value="false"/>
									</parameters>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method AppendCookie(HttpCookie)  -->
						<memberMethod name="AppendCookie">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="HttpCookie" name="cookie"/>
							</parameters>
							<statements>
								<methodInvokeExpression methodName="SendCookie">
									<target>
										<methodInvokeExpression methodName="Create"/>
									</target>
									<parameters>
										<argumentReferenceExpression name="cookie"/>
										<primitiveExpression value="true"/>
									</parameters>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method IsSystemController(string) -->
						<memberField type="Regex" name="systemControllerRegex">
							<attributes private="true" static="true"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[^(aspnet_\w+|MyProfile)$]]></xsl:attribute>
										</primitiveExpression>
										<propertyReferenceExpression name="IgnoreCase">
											<typeReferenceExpression type="RegexOptions"/>
										</propertyReferenceExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<memberMethod returnType="System.Boolean" name="IsSystemController">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="controller"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<binaryOperatorExpression operator="BooleanAnd">
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<argumentReferenceExpression name="controller"/>
										</unaryOperatorExpression>
										<binaryOperatorExpression operator="BooleanOr">
											<methodInvokeExpression methodName="Equals">
												<target>
													<argumentReferenceExpression name="controller"/>
												</target>
												<parameters>
													<methodInvokeExpression methodName="GetSiteContentControllerName"/>
													<propertyReferenceExpression name="OrdinalIgnoreCase">
														<typeReferenceExpression type="StringComparison"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="IsMatch">
												<target>
													<fieldReferenceExpression name="systemControllerRegex"/>
												</target>
												<parameters>
													<argumentReferenceExpression name="controller"/>
												</parameters>
											</methodInvokeExpression>
										</binaryOperatorExpression>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property ValidationKey -->
						<memberProperty type="System.String" name="ValidationKey">
							<attributes public="true" static="true"/>
							<getStatements>
								<variableDeclarationStatement name="key">
									<init>
										<arrayIndexerExpression>
											<target>
												<propertyReferenceExpression name="AppSettings">
													<typeReferenceExpression type="ConfigurationManager"/>
												</propertyReferenceExpression>
											</target>
											<indices>
												<primitiveExpression value="MembershipProviderValidationKey"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<unaryOperatorExpression operator="IsNullOrEmpty">
												<variableReferenceExpression name="key"/>
											</unaryOperatorExpression>
											<methodInvokeExpression methodName="Contains">
												<target>
													<variableReferenceExpression name="key"/>
												</target>
												<parameters>
													<primitiveExpression value="AutoGenerate"/>
												</parameters>
											</methodInvokeExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="key"/>
											<primitiveExpression value="{a:project/a:membership/@validationKey}"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="key"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
					</members>
				</typeDeclaration>
				<!-- class AddonRouteIgnoreConstraint -->
				<typeDeclaration name="AddonRouteIgnoreConstraint">
					<attributes public="true"/>
					<members>
						<memberProperty type="System.String" name="PathInfo">
							<attributes public="true" final="true"/>
							<getStatements>
								<methodReturnStatement>
									<primitiveExpression>
										<xsl:attribute name="value"><![CDATA[^(?!daf\/add\.min\.(js|css)$).+]]></xsl:attribute>
									</primitiveExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
					</members>
				</typeDeclaration>
				<!-- public enum ApplicationFeature-->
				<typeDeclaration isEnum="true" name="ApplicationFeature">
					<members>
						<memberField name="DynamicAccessControlList">
							<attributes public="true"/>
						</memberField>
						<memberField name="DynamicControllerCustomization">
							<attributes public="true"/>
						</memberField>
						<memberField name="WorkflowRegister">
							<attributes public="true"/>
						</memberField>
					</members>
				</typeDeclaration>
				<!-- class ApplicationServicesBase -->
				<typeDeclaration name="ApplicationServicesBase" isPartial="true">
					<attributes public="true"/>
					<members>
						<!-- method Supports -->
						<memberMethod returnType="System.Boolean" name="Supports">
							<attributes public="true"/>
							<parameters>
								<parameter type="ApplicationFeature" name="feature"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<primitiveExpression value="false"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property Addons -->
						<memberField type="List" name="Addons">
							<typeArguments>
								<typeReference type="SYstem.Object"/>
							</typeArguments>
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="List">
									<typeArguments>
										<typeReference type="System.Object"/>
									</typeArguments>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- property EnableMobileClient-->
						<memberField type="System.Boolean" name="EnableMobileClient">
							<attributes public="true" static="true"/>
							<init>
								<primitiveExpression value="true"/>
							</init>
						</memberField>
						<!-- property DefaultSettings-->
						<memberField type="JObject" name="defaultSettings">
							<attributes private ="true"/>
						</memberField>
						<!-- 
                if (_defaultSettings == null)
                {
                    _defaultSettings = (JObject)HttpContext.Current.Items["touch-settings.json"];
            -->
						<memberProperty type="JObject" name="DefaultSettings">
							<attributes public="true"/>
							<getStatements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<fieldReferenceExpression name="defaultSettings"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<fieldReferenceExpression name="defaultSettings"/>
											<castExpression targetType="JObject">
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Items">
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="HttpContext"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="touch-settings.json"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<fieldReferenceExpression name="defaultSettings"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<fieldReferenceExpression name="defaultSettings"/>
													<castExpression targetType="JObject">
														<arrayIndexerExpression>
															<target>
																<propertyReferenceExpression name="Cache">
																	<propertyReferenceExpression name="Current">
																		<typeReferenceExpression type="HttpContext"/>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</target>
															<indices>
																<primitiveExpression value="touch-settings.json"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityEquality">
															<fieldReferenceExpression name="defaultSettings"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement type="System.String" name="json">
															<init>
																<primitiveExpression value="{{}}"/>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement type="System.String" name="filePath">
															<init>
																<methodInvokeExpression methodName="MapPath">
																	<target>
																		<propertyReferenceExpression name="Server">
																			<propertyReferenceExpression name="Current">
																				<typeReferenceExpression type="HttpContext"/>
																			</propertyReferenceExpression>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="~/touch-settings.json"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="Exists">
																	<target>
																		<typeReferenceExpression type="File"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="filePath"/>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="json"/>
																	<methodInvokeExpression methodName="ReadAllText">
																		<target>
																			<typeReferenceExpression type="File"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="filePath"/>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<tryStatement>
															<statements>
																<assignStatement>
																	<fieldReferenceExpression name="defaultSettings"/>
																	<methodInvokeExpression methodName="Parse">
																		<target>
																			<typeReferenceExpression type="JObject"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="json"/>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
															</statements>
															<catch exceptionType="Exception" localName="ex">
																<throwExceptionStatement>
																	<objectCreateExpression type="Exception">
																		<parameters>
																			<binaryOperatorExpression operator="Add">
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[Error loading 'touch-setting.json': ]]></xsl:attribute>
																				</primitiveExpression>
																				<propertyReferenceExpression name="Message">
																					<variableReferenceExpression name="ex"/>
																				</propertyReferenceExpression>
																			</binaryOperatorExpression>
																		</parameters>
																	</objectCreateExpression>
																</throwExceptionStatement>
															</catch>
														</tryStatement>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<fieldReferenceExpression name="defaultSettings"/>
																<primitiveExpression value="appName"/>
																<propertyReferenceExpression name="Name">
																	<propertyReferenceExpression name="Current">
																		<typeReferenceExpression type="ApplicationServices"/>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<fieldReferenceExpression name="defaultSettings"/>
																<primitiveExpression value="map.apiKey"/>
																<propertyReferenceExpression name="MapsApiIdentifier"/>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<fieldReferenceExpression name="defaultSettings"/>
																<primitiveExpression value="charts.maxPivotRowCount"/>
																<propertyReferenceExpression name="MaxPivotRowCount"/>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<fieldReferenceExpression name="defaultSettings"/>
																<primitiveExpression value="ui.theme.name"/>
																<primitiveExpression value="Light"/>
															</parameters>
														</methodInvokeExpression>
														<variableDeclarationStatement type="JObject" name="ui">
															<init>
																<castExpression targetType="JObject">
																	<arrayIndexerExpression>
																		<target>
																			<fieldReferenceExpression name="defaultSettings"/>
																		</target>
																		<indices>
																			<primitiveExpression value="ui"/>
																		</indices>
																	</arrayIndexerExpression>
																</castExpression>
															</init>
														</variableDeclarationStatement>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<variableReferenceExpression name="ui"/>
																<primitiveExpression value="theme.accent"/>
																<primitiveExpression value="{a:project/a:theme/@name}"/>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<variableReferenceExpression name="ui"/>
																<primitiveExpression value="displayDensity.mobile"/>
																<primitiveExpression>
																	<xsl:attribute name="value">
																		<xsl:value-of select="a:project/a:features/a:touch/@mobileDisplayDensity"/>
																	</xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<variableReferenceExpression name="ui"/>
																<primitiveExpression value="displayDensity.desktop"/>
																<primitiveExpression>
																	<xsl:attribute name="value">
																		<xsl:value-of select="a:project/a:features/a:touch/@desktopDisplayDensity"/>
																	</xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<variableReferenceExpression name="ui"/>
																<primitiveExpression value="list.labels.display"/>
																<primitiveExpression>
																	<xsl:attribute name="value">
																		<xsl:value-of select="a:project/a:features/a:touch/@labelsInList"/>
																	</xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<variableReferenceExpression name="ui"/>
																<primitiveExpression value="list.initialMode"/>
																<primitiveExpression>
																	<xsl:attribute name="value">
																		<xsl:value-of select="a:project/a:features/a:touch/@initialListMode"/>
																	</xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<variableReferenceExpression name="ui"/>
																<primitiveExpression value="menu.location"/>
																<primitiveExpression>
																	<xsl:attribute name="value">
																		<xsl:value-of select="a:project/a:features/a:touch/@menu"/>
																	</xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<variableReferenceExpression name="ui"/>
																<primitiveExpression value="actions.promote"/>
																<primitiveExpression>
																	<xsl:attribute name="value">
																		<xsl:value-of select="a:project/a:features/a:touch/@promoteActions"/>
																	</xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<variableReferenceExpression name="ui"/>
																<primitiveExpression value="smartDates"/>
																<primitiveExpression>
																	<xsl:attribute name="value">
																		<xsl:value-of select="a:project/a:features/a:touch/@smartDates"/>
																	</xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<variableReferenceExpression name="ui"/>
																<primitiveExpression value="transitions.style"/>
																<primitiveExpression>
																	<xsl:attribute name="value">
																		<xsl:value-of select="a:project/a:features/a:touch/@transitions"/>
																	</xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="EnsureJsonProperty">
															<parameters>
																<variableReferenceExpression name="ui"/>
																<primitiveExpression value="sidebar.when"/>
																<primitiveExpression>
																	<xsl:attribute name="value">
																		<xsl:value-of select="a:project/a:features/a:touch/@sidebar"/>
																	</xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
														<xsl:if test="$PageImplementation='html'">
															<methodInvokeExpression methodName="EnsureJsonProperty">
																<parameters>
																	<fieldReferenceExpression name="defaultSettings"/>
																	<primitiveExpression value="help.enabled"/>
																	<xsl:choose>
																		<xsl:when test="/a:project/a:membership/@displayHelp='true'">
																			<primitiveExpression value="true"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<primitiveExpression value="false"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="Add">
																<target>
																	<propertyReferenceExpression name="Cache">
																		<propertyReferenceExpression name="Current">
																			<typeReferenceExpression type="HttpContext"/>
																		</propertyReferenceExpression>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<primitiveExpression value="touch-settings.json"/>
																	<fieldReferenceExpression name="defaultSettings"/>
																	<objectCreateExpression type="CacheDependency">
																		<parameters>
																			<arrayCreateExpression>
																				<createType type="System.String"/>
																				<initializers>
																					<variableReferenceExpression name="filePath"/>
																					<methodInvokeExpression methodName="MapPath">
																						<target>
																							<propertyReferenceExpression name="Server">
																								<propertyReferenceExpression name="Current">
																									<typeReferenceExpression type="HttpContext"/>
																								</propertyReferenceExpression>
																							</propertyReferenceExpression>
																						</target>
																						<parameters>
																							<primitiveExpression value="~/web.config"/>
																						</parameters>
																					</methodInvokeExpression>
																				</initializers>
																			</arrayCreateExpression>
																		</parameters>
																	</objectCreateExpression>
																	<propertyReferenceExpression name="NoAbsoluteExpiration">
																		<typeReferenceExpression type="Cache"/>
																	</propertyReferenceExpression>
																	<propertyReferenceExpression name="NoSlidingExpiration">
																		<typeReferenceExpression type="Cache"/>
																	</propertyReferenceExpression>
																	<propertyReferenceExpression name="Normal">
																		<typeReferenceExpression type="CacheItemPriority"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="null"/>
																</parameters>
															</methodInvokeExpression>
														</xsl:if>
													</trueStatements>
												</conditionStatement>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Items">
																<propertyReferenceExpression name="Current">
																	<typeReferenceExpression type="HttpContext"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</target>
														<indices>
															<primitiveExpression value="touch-settings.json"/>
														</indices>
													</arrayIndexerExpression>
													<fieldReferenceExpression name="defaultSettings"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<fieldReferenceExpression name="defaultSettings"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method Settings(string) -->
						<memberMethod returnType="JToken" name="Settings">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="selector"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="SelectFrom">
										<parameters>
											<propertyReferenceExpression name="DefaultSettings">
												<propertyReferenceExpression name="Current"/>
											</propertyReferenceExpression>
											<argumentReferenceExpression name="selector"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method SelectFrom(JToken) -->
						<memberMethod returnType="JToken" name="SelectFrom">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="JToken" name="json"/>
								<parameter type="System.String" name="selector"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String[]" name="path">
									<init>
										<methodInvokeExpression methodName="Split">
											<target>
												<typeReferenceExpression type="Regex"/>
											</target>
											<parameters>
												<argumentReferenceExpression name="selector"/>
												<primitiveExpression value="\."/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<forStatement>
									<variable type="System.Int32" name="i">
										<init>
											<primitiveExpression value="0"/>
										</init>
									</variable>
									<test>
										<binaryOperatorExpression operator="LessThan">
											<variableReferenceExpression name="i"/>
											<propertyReferenceExpression name="Length">
												<variableReferenceExpression name="path"/>
											</propertyReferenceExpression>
										</binaryOperatorExpression>
									</test>
									<increment>
										<variableReferenceExpression name="i"/>
									</increment>
									<statements>
										<assignStatement>
											<argumentReferenceExpression name="json"/>
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="json"/>
												</target>
												<indices>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="path"/>
														</target>
														<indices>
															<variableReferenceExpression name="i"/>
														</indices>
													</arrayIndexerExpression>
												</indices>
											</arrayIndexerExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<argumentReferenceExpression name="json"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<breakStatement/>
											</trueStatements>
										</conditionStatement>
									</statements>
								</forStatement>
								<methodReturnStatement>
									<argumentReferenceExpression name="json"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property EnableCombinedCss -->
						<memberField type="System.Boolean" name="enableCombinedCss">
							<attributes static="true" private="true"/>
						</memberField>
						<memberProperty type="System.Boolean" name="EnableCombinedCss">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="enableCombinedCss"/>
								</methodReturnStatement>
							</getStatements>
							<setStatements>
								<assignStatement>
									<fieldReferenceExpression name="enableCombinedCss"/>
									<propertySetValueReferenceExpression/>
								</assignStatement>
							</setStatements>
						</memberProperty>
						<!-- property EnableMinifiedCss -->
						<memberField type="System.Boolean" name="enableMinifiedCss">
							<attributes static="true" private="true"/>
							<init>
								<primitiveExpression value="true"/>
							</init>
						</memberField>
						<memberProperty type="System.Boolean" name="EnableMinifiedCss">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<fieldReferenceExpression name="enableMinifiedCss"/>
								</methodReturnStatement>
							</getStatements>
							<setStatements>
								<assignStatement>
									<fieldReferenceExpression name="enableMinifiedCss"/>
									<propertySetValueReferenceExpression/>
								</assignStatement>
							</setStatements>
						</memberProperty>
						<!-- method GetNavigateUrl()-->
						<memberMethod returnType="System.String" name="GetNavigateUrl">
							<attributes public="true"/>
							<statements>
								<methodReturnStatement>
									<primitiveExpression value="null"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method VerifyUrl() -->
						<memberMethod name="VerifyUrl">
							<attributes static="true" public="true"/>
							<statements>
								<variableDeclarationStatement type="System.String" name="navigateUrl">
									<init>
										<methodInvokeExpression methodName="GetNavigateUrl">
											<target>
												<methodInvokeExpression methodName="Create"/>
											</target>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<variableReferenceExpression name="navigateUrl"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="HttpContext" name="current">
											<init>
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="Not">
													<methodInvokeExpression methodName="Equals">
														<target>
															<methodInvokeExpression methodName="ToAbsolute">
																<target>
																	<typeReferenceExpression type="VirtualPathUtility"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="navigateUrl"/>
																</parameters>
															</methodInvokeExpression>
														</target>
														<parameters>
															<propertyReferenceExpression name="RawUrl">
																<propertyReferenceExpression name="Request">
																	<variableReferenceExpression name="current"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
															<propertyReferenceExpression name="CurrentCultureIgnoreCase">
																<typeReferenceExpression type="StringComparison"/>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Redirect">
													<target>
														<propertyReferenceExpression name="Response">
															<variableReferenceExpression name="current"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<variableReferenceExpression name="navigateUrl"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method RegisterServices() -->
						<memberMethod name="RegisterServices">
							<attributes public="true"/>
							<statements>
								<methodInvokeExpression methodName="CreateStandardMembershipAccounts"/>
								<xsl:if test="$TargetFramework != '3.5'">
									<variableDeclarationStatement type="RouteCollection" name="routes">
										<init>
											<propertyReferenceExpression name="Routes">
												<typeReferenceExpression type="RouteTable"/>
											</propertyReferenceExpression>
										</init>
									</variableDeclarationStatement>
									<methodInvokeExpression methodName="RegisterIgnoredRoutes">
										<parameters>
											<variableReferenceExpression name="routes"/>
										</parameters>
									</methodInvokeExpression>
									<methodInvokeExpression methodName="RegisterContentServices">
										<parameters>
											<variableReferenceExpression name="routes"/>
										</parameters>
									</methodInvokeExpression>
								</xsl:if>
								<comment>Register service request handlers</comment>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="getpage"/>
										<objectCreateExpression type="GetPageServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="getpagelist"/>
										<objectCreateExpression type="GetPageListServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="getlistofvalues"/>
										<objectCreateExpression type="GetListOfValuesServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="execute"/>
										<objectCreateExpression type="ExecuteServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="executeandgetpage"/>
										<objectCreateExpression type="ExecuteAndGetPageServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="executelist"/>
										<objectCreateExpression type="ExecuteListServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="getcompletionlist"/>
										<objectCreateExpression type="GetCompletionListServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="login"/>
										<objectCreateExpression type="LoginServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="logout"/>
										<objectCreateExpression type="LogoutServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="roles"/>
										<objectCreateExpression type="RolesServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="themes"/>
										<objectCreateExpression type="ThemesServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<xsl:if test="$IsPremium='true'">
									<methodInvokeExpression methodName="Add">
										<target>
											<propertyReferenceExpression name="RequestHandlers"/>
										</target>
										<parameters>
											<primitiveExpression value="savepermalink"/>
											<objectCreateExpression type="SavePermalinkServiceRequestHandler"/>
										</parameters>
									</methodInvokeExpression>
									<methodInvokeExpression methodName="Add">
										<target>
											<propertyReferenceExpression name="RequestHandlers"/>
										</target>
										<parameters>
											<primitiveExpression value="encodepermalink"/>
											<objectCreateExpression type="EncodePermalinkServiceRequestHandler"/>
										</parameters>
									</methodInvokeExpression>
									<methodInvokeExpression methodName="Add">
										<target>
											<propertyReferenceExpression name="RequestHandlers"/>
										</target>
										<parameters>
											<primitiveExpression value="listallpermalinks"/>
											<objectCreateExpression type="ListAllPermalinksServiceRequestHandler"/>
										</parameters>
									</methodInvokeExpression>
								</xsl:if>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="getsurvey"/>
										<objectCreateExpression type="GetSurveyServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="addon"/>
										<objectCreateExpression type="AddonServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<xsl:if test="$MembershipEnabled='true' or $CustomSecurity='true'">
									<methodInvokeExpression methodName="Add">
										<target>
											<propertyReferenceExpression name="RequestHandlers"/>
										</target>
										<parameters>
											<primitiveExpression value="v2"/>
											<objectCreateExpression type="V2ServiceRequestHandler"/>
										</parameters>
									</methodInvokeExpression>
									<xsl:if test="$IsUnlimited!='true'">
										<methodInvokeExpression methodName="Add">
											<target>
												<propertyReferenceExpression name="RequestHandlers"/>
											</target>
											<parameters>
												<primitiveExpression value="saas/dnn"/>
												<objectCreateExpression type="DnnOAuthServiceRequestHandler"/>
											</parameters>
										</methodInvokeExpression>
									</xsl:if>
									<methodInvokeExpression methodName="Add">
										<target>
											<propertyReferenceExpression name="Handlers">
												<typeReferenceExpression type="OAuthHandlerFactory"/>
											</propertyReferenceExpression>
										</target>
										<parameters>
											<primitiveExpression value="dnn"/>
											<typeofExpression type="DnnOAuthHandler"/>
										</parameters>
									</methodInvokeExpression>
									<methodInvokeExpression methodName="Add">
										<target>
											<propertyReferenceExpression name="Handlers">
												<typeReferenceExpression type="OAuthHandlerFactory"/>
											</propertyReferenceExpression>
										</target>
										<parameters>
											<primitiveExpression value="cloudidentity"/>
											<typeofExpression type="CloudIdentityOAuthHandler"/>
										</parameters>
									</methodInvokeExpression>
								</xsl:if>
								<xsl:if test="$MobileAppSupported">
									<methodInvokeExpression methodName="Add">
										<target>
											<propertyReferenceExpression name="RequestHandlers"/>
										</target>
										<parameters>
											<primitiveExpression value="getidentity"/>
											<objectCreateExpression type="GetIdentityServiceRequestHandler"/>
										</parameters>
									</methodInvokeExpression>
									<methodInvokeExpression methodName="Add">
										<target>
											<propertyReferenceExpression name="RequestHandlers"/>
										</target>
										<parameters>
											<primitiveExpression value="getmanifest"/>
											<objectCreateExpression type="GetManifestServiceRequestHandler"/>
										</parameters>
									</methodInvokeExpression>
									<methodInvokeExpression methodName="Add">
										<target>
											<propertyReferenceExpression name="RequestHandlers"/>
										</target>
										<parameters>
											<primitiveExpression value="getmanifestfile"/>
											<objectCreateExpression type="GetManifestFileServiceRequestHandler"/>
										</parameters>
									</methodInvokeExpression>
								</xsl:if>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="getcontrollerlist"/>
										<objectCreateExpression type="GetControllerListServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<propertyReferenceExpression name="RequestHandlers"/>
									</target>
									<parameters>
										<primitiveExpression value="commit"/>
										<objectCreateExpression type="CommitServiceRequestHandler"/>
									</parameters>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method Start()-->
						<memberMethod name="Start">
							<attributes public="true" static="true"/>
							<statements>
								<methodInvokeExpression methodName="InstanceStart">
									<target>
										<propertyReferenceExpression name="Current"/>
									</target>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method InstanceStart() -->
						<memberMethod name="InstanceStart">
							<attributes family="true"/>
							<statements>
								<xsl:if test="a:project/a:connectionString/@sessionStateMode='ASPNET'">
									<methodInvokeExpression methodName="Start">
										<target>
											<typeReferenceExpression type="{$Namespace}.Data.SessionStateMonitor"/>
										</target>
									</methodInvokeExpression>
								</xsl:if>
								<methodInvokeExpression methodName="Initialize">
									<target>
										<typeReferenceExpression type="{$Namespace}.Services.ApplicationServices"/>
									</target>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method Stop()-->
						<memberMethod name="Stop">
							<attributes public="true" static="true"/>
							<statements>
								<methodInvokeExpression methodName="InstanceStop">
									<target>
										<propertyReferenceExpression name="Current"/>
									</target>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method InstanceStop() -->
						<memberMethod name="InstanceStop">
							<attributes family="true"/>
							<statements>
								<xsl:if test="a:project/a:connectionString/@sessionStateMode='ASPNET'">
									<methodInvokeExpression methodName="Stop">
										<target>
											<typeReferenceExpression type="{$Namespace}.Data.SessionStateMonitor"/>
										</target>
									</methodInvokeExpression>
								</xsl:if>
							</statements>
						</memberMethod>
						<!-- method SessionStart()-->
						<memberMethod name="SessionStart">
							<attributes public="true" static="true"/>
							<statements>
								<comment>The line below will prevent intermittent error “Session state has created a session id,</comment>
								<comment>but cannot save it because the response was already flushed by the application.”</comment>
								<variableDeclarationStatement type="System.String" name="sessionId">
									<init>
										<propertyReferenceExpression name="SessionID">
											<propertyReferenceExpression name="Session">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<methodInvokeExpression methodName="UserSessionStart">
									<target>
										<propertyReferenceExpression name="Current"/>
									</target>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method UserSessionStart() -->
						<memberMethod name="UserSessionStart">
							<attributes family="true"/>
						</memberMethod>
						<!-- method SessionStop()-->
						<memberMethod name="SessionStop">
							<attributes public="true" static="true"/>
							<statements>
								<methodInvokeExpression methodName="UserSessionStop">
									<target>
										<propertyReferenceExpression name="Current"/>
									</target>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method UserSessionStop() -->
						<memberMethod name="UserSessionStop">
							<attributes family="true"/>
						</memberMethod>
						<!-- method Error()-->
						<memberMethod name="Error">
							<attributes public="true" static="true"/>
							<statements>
								<variableDeclarationStatement type="HttpContext" name="context">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="HttpContext"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="context"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="HandleError">
											<target>
												<propertyReferenceExpression name="Current"/>
											</target>
											<parameters>
												<variableReferenceExpression name="context"/>
												<methodInvokeExpression methodName="GetLastError">
													<target>
														<propertyReferenceExpression name="Server">
															<variableReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</target>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method HandleError() -->
						<memberMethod name="HandleError">
							<attributes family="true"/>
							<parameters>
								<parameter type="HttpContext" name="context"/>
								<parameter type="Exception" name="er"/>
							</parameters>
						</memberMethod>
						<!-- method HandleException(JObject, Exception)-->
						<memberMethod name="HandleException" returnType="System.Object">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="result"/>
								<parameter type="Exception" name="ex"/>
							</parameters>
							<statements>
								<whileStatement>
									<test>
										<binaryOperatorExpression operator="IdentityInequality">
											<propertyReferenceExpression name="InnerException">
												<variableReferenceExpression name="ex"/>
											</propertyReferenceExpression>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</test>
									<statements>
										<assignStatement>
											<variableReferenceExpression name="ex"/>
											<propertyReferenceExpression name="InnerException">
												<variableReferenceExpression name="ex"/>
											</propertyReferenceExpression>
										</assignStatement>
									</statements>
								</whileStatement>
								<variableDeclarationStatement type="ServiceRequestError" name="er">
									<init>
										<objectCreateExpression type="ServiceRequestError"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="Message">
										<variableReferenceExpression name="er"/>
									</propertyReferenceExpression>
									<propertyReferenceExpression name="Message">
										<variableReferenceExpression name="ex"/>
									</propertyReferenceExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="ExceptionType">
										<variableReferenceExpression name="er"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="ToString">
										<target>
											<methodInvokeExpression methodName="GetType">
												<target>
													<variableReferenceExpression name="ex"/>
												</target>
											</methodInvokeExpression>
										</target>
									</methodInvokeExpression>
								</assignStatement>
								<variableDeclarationStatement type="HttpContext" name="current">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="HttpContext"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<methodInvokeExpression methodName="Equals">
												<target>
													<propertyReferenceExpression name="Host">
														<propertyReferenceExpression name="Url">
															<propertyReferenceExpression name="Request">
																<variableReferenceExpression name="current"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<primitiveExpression value="localhost"/>
												</parameters>
											</methodInvokeExpression>
											<unaryOperatorExpression operator="Not">
												<propertyReferenceExpression name="IsCustomErrorEnabled">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</unaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertyReferenceExpression name="StackTrace">
												<variableReferenceExpression name="er"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="StackTrace">
												<variableReferenceExpression name="ex"/>
											</propertyReferenceExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="er"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<xsl:if test="$TargetFramework != '3.5'">
							<!-- method RegisterContentServices(RouteCollection) -->
							<memberMethod name="RegisterContentServices">
								<attributes public="true"/>
								<parameters>
									<parameter type="RouteCollection" name="routes"/>
								</parameters>
								<statements>
									<methodInvokeExpression methodName="Map">
										<target>
											<typeReferenceExpression type="GenericRoute"/>
										</target>
										<parameters>
											<argumentReferenceExpression name="routes"/>
											<objectCreateExpression type="PlaceholderHandler"/>
											<primitiveExpression value="placeholder/{{FileName}}"/>
										</parameters>
									</methodInvokeExpression>
									<xsl:if test="$PageImplementation='html'">
										<methodInvokeExpression methodName="MapPageRoute">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="SiteContent"/>
												<primitiveExpression value="{{*url}}"/>
												<primitiveExpression value="~/Site.aspx"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="MapPageRoute">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="DataControllerService"/>
												<primitiveExpression value="{{*url}}"/>
												<propertyReferenceExpression name="DefaultServicePath">
													<typeReferenceExpression type="AquariumExtenderBase"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</xsl:if>
								</statements>
							</memberMethod>
							<!-- method RegisterIgnoredRoutes(RouteCollection) -->
							<memberMethod name="RegisterIgnoredRoutes">
								<attributes public="true"/>
								<parameters>
									<parameter type="RouteCollection" name="routes"/>
								</parameters>
								<statements>
									<xsl:if test="$PageImplementation='html'">
										<methodInvokeExpression methodName="Ignore">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="{{handler}}.ashx"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Ignore">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="favicon.ico"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Ignore">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="controlhost.aspx"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Ignore">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="charthost.aspx"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Ignore">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="{{resource}}.axd/{{*pathInfo}}"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Ignore">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="daf/{{service}}/{{*methodName}}"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Ignore">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="app_themes/{{themeFolder}}/{{file}}"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Ignore">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="{{id}}/arterySignalR/{{*pathInfo}}"/>
											</parameters>
										</methodInvokeExpression>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="Not">
													<propertyReferenceExpression name="IsSiteContentEnabled"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Ignore">
													<target>
														<argumentReferenceExpression name="routes"/>
													</target>
													<parameters>
														<primitiveExpression value="images/{{*pathInfo}}"/>
													</parameters>
												</methodInvokeExpression>
												<methodInvokeExpression methodName="Ignore">
													<target>
														<argumentReferenceExpression name="routes"/>
													</target>
													<parameters>
														<primitiveExpression value="documents/{{*pathInfo}}"/>
													</parameters>
												</methodInvokeExpression>
												<methodInvokeExpression methodName="Ignore">
													<target>
														<argumentReferenceExpression name="routes"/>
													</target>
													<parameters>
														<primitiveExpression value="download/{{*pathInfo}}"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="Ignore">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="css/{{*pathInfo}}"/>
												<objectCreateExpression type="AddonRouteIgnoreConstraint"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Ignore">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="js/{{*pathInfo}}"/>
												<objectCreateExpression type="AddonRouteIgnoreConstraint"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Ignore">
											<target>
												<argumentReferenceExpression name="routes"/>
											</target>
											<parameters>
												<primitiveExpression value="services/{{*pathInfo}}"/>
											</parameters>
										</methodInvokeExpression>
									</xsl:if>
								</statements>
							</memberMethod>
						</xsl:if>
						<!-- method SortedDictionary<string, string> LoadContent() -->
						<memberMethod returnType="SortedDictionary" name="LoadContent">
							<typeArguments>
								<typeReference type="System.String"/>
								<typeReference type="System.String"/>
							</typeArguments>
							<attributes public="true" static="true"/>
							<statements>
								<variableDeclarationStatement type="SortedDictionary" name="content">
									<typeArguments>
										<typeReference type="System.String"/>
										<typeReference type="System.String"/>
									</typeArguments>
									<init>
										<objectCreateExpression type="SortedDictionary">
											<typeArguments>
												<typeReference type="System.String"/>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<methodInvokeExpression methodName="LoadContent">
									<target>
										<methodInvokeExpression methodName="Create"/>
									</target>
									<parameters>
										<propertyReferenceExpression name="Request">
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
										<propertyReferenceExpression name="Response">
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
										<variableReferenceExpression name="content"/>
									</parameters>
								</methodInvokeExpression>
								<variableDeclarationStatement type="System.String" name="rawContent">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<variableReferenceExpression name="content"/>
											</target>
											<parameters>
												<primitiveExpression value="File"/>
												<directionExpression direction="Out">
													<variableReferenceExpression name="rawContent"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<comment>find the head</comment>
										<variableDeclarationStatement type="Match" name="headMatch">
											<init>
												<methodInvokeExpression methodName="Match">
													<target>
														<typeReferenceExpression type="Regex"/>
													</target>
													<parameters>
														<variableReferenceExpression name="rawContent"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[<head>([\s\S]+?)</head>]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="Success">
													<variableReferenceExpression name="headMatch"/>
												</propertyReferenceExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="System.String" name="head">
													<init>
														<propertyReferenceExpression name="Value">
															<arrayIndexerExpression>
																<target>
																	<propertyReferenceExpression name="Groups">
																		<variableReferenceExpression name="headMatch"/>
																	</propertyReferenceExpression>
																</target>
																<indices>
																	<primitiveExpression value="1"/>
																</indices>
															</arrayIndexerExpression>
														</propertyReferenceExpression>
													</init>
												</variableDeclarationStatement>
												<assignStatement>
													<variableReferenceExpression name="head"/>
													<methodInvokeExpression methodName="Replace">
														<target>
															<typeReferenceExpression type="Regex"/>
														</target>
														<parameters>
															<variableReferenceExpression name="head"/>
															<primitiveExpression>
																<xsl:attribute name="value"><![CDATA[\s*<meta charset=".+"\s*/?>\s*]]></xsl:attribute>
															</primitiveExpression>
															<stringEmptyExpression/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="content"/>
														</target>
														<indices>
															<primitiveExpression value="Head"/>
														</indices>
													</arrayIndexerExpression>
													<methodInvokeExpression methodName="Replace">
														<target>
															<typeReferenceExpression type="Regex"/>
														</target>
														<parameters>
															<variableReferenceExpression name="head"/>
															<primitiveExpression>
																<xsl:attribute name="value"><![CDATA[\s*<title>([\S\s]*?)</title>\s*]]></xsl:attribute>
															</primitiveExpression>
															<stringEmptyExpression/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<comment>find the title</comment>
												<variableDeclarationStatement type="Match" name="titleMatch">
													<init>
														<methodInvokeExpression methodName="Match">
															<target>
																<typeReferenceExpression type="Regex"/>
															</target>
															<parameters>
																<variableReferenceExpression name="head"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[<title>(?'Title'[\S\s]+?)</title>]]></xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<propertyReferenceExpression name="Success">
															<variableReferenceExpression name="titleMatch"/>
														</propertyReferenceExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement type="System.String" name="title">
															<init>
																<propertyReferenceExpression name="Value">
																	<arrayIndexerExpression>
																		<target>
																			<propertyReferenceExpression name="Groups">
																				<variableReferenceExpression name="titleMatch"/>
																			</propertyReferenceExpression>
																		</target>
																		<indices>
																			<primitiveExpression value="Title"/>
																		</indices>
																	</arrayIndexerExpression>
																</propertyReferenceExpression>
															</init>
														</variableDeclarationStatement>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="content"/>
																</target>
																<indices>
																	<primitiveExpression value="PageTitle"/>
																</indices>
															</arrayIndexerExpression>
															<variableReferenceExpression name="title"/>
														</assignStatement>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="content"/>
																</target>
																<indices>
																	<primitiveExpression value="PageTitleContent"/>
																</indices>
															</arrayIndexerExpression>
															<variableReferenceExpression name="title"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<comment>find "about"</comment>
												<variableDeclarationStatement type="Match" name="aboutMatch">
													<init>
														<methodInvokeExpression methodName="Match">
															<target>
																<typeReferenceExpression type="Regex"/>
															</target>
															<parameters>
																<variableReferenceExpression name="head"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[<meta\s+name\s*=\s*"description"\s+content\s*=\s*"([\s\S]+?)"\s*/>]]></xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<propertyReferenceExpression name="Success">
															<variableReferenceExpression name="aboutMatch"/>
														</propertyReferenceExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="content"/>
																</target>
																<indices>
																	<primitiveExpression value="About"/>
																</indices>
															</arrayIndexerExpression>
															<methodInvokeExpression methodName="HtmlDecode">
																<target>
																	<typeReferenceExpression type="HttpUtility"/>
																</target>
																<parameters>
																	<propertyReferenceExpression name="Value">
																		<arrayIndexerExpression>
																			<target>
																				<propertyReferenceExpression name="Groups">
																					<variableReferenceExpression name="aboutMatch"/>
																				</propertyReferenceExpression>
																			</target>
																			<indices>
																				<primitiveExpression value="1"/>
																			</indices>
																		</arrayIndexerExpression>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
										<comment>find the body</comment>
										<variableDeclarationStatement type="Match" name="bodyMatch">
											<init>
												<methodInvokeExpression methodName="Match">
													<target>
														<typeReferenceExpression type="Regex"/>
													</target>
													<parameters>
														<variableReferenceExpression name="rawContent"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[<body(?'Attr'[\s\S]*?)>(?'Body'[\s\S]+?)</body>]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="Success">
													<variableReferenceExpression name="bodyMatch"/>
												</propertyReferenceExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="content"/>
														</target>
														<indices>
															<primitiveExpression value="PageContent"/>
														</indices>
													</arrayIndexerExpression>
													<methodInvokeExpression methodName="EnrichData">
														<parameters>
															<propertyReferenceExpression name="Value">
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="Groups">
																			<variableReferenceExpression name="bodyMatch"/>
																		</propertyReferenceExpression>
																	</target>
																	<indices>
																		<primitiveExpression value="Body"/>
																	</indices>
																</arrayIndexerExpression>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="content"/>
														</target>
														<indices>
															<primitiveExpression value="BodyAttributes"/>
														</indices>
													</arrayIndexerExpression>
													<propertyReferenceExpression name="Value">
														<arrayIndexerExpression>
															<target>
																<propertyReferenceExpression name="Groups">
																	<variableReferenceExpression name="bodyMatch"/>
																</propertyReferenceExpression>
															</target>
															<indices>
																<primitiveExpression value="Attr"/>
															</indices>
														</arrayIndexerExpression>
													</propertyReferenceExpression>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="content"/>
														</target>
														<indices>
															<primitiveExpression value="PageContent"/>
														</indices>
													</arrayIndexerExpression>
													<methodInvokeExpression methodName="EnrichData">
														<parameters>
															<variableReferenceExpression name="rawContent"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="content"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method EnrichData(string) -->
						<memberMethod returnType="System.String" name="EnrichData">
							<attributes static="true" public="true"/>
							<parameters>
								<parameter type="System.String" name="body"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<methodInvokeExpression methodName="IsMatch">
												<target>
													<typeReferenceExpression type="Regex"/>
												</target>
												<parameters>
													<argumentReferenceExpression name="body"/>
													<primitiveExpression>
														<xsl:attribute name="value"><![CDATA[<div[\s\S]+?(data-(app-role|controller|user-control|placeholder))\s*="[\s\S]+?>]]></xsl:attribute>
													</primitiveExpression>
												</parameters>
											</methodInvokeExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<argumentReferenceExpression name="body"/>
											<stringFormatExpression>
												<xsl:attribute name="format"><![CDATA[<div data-app-role="page" data-content-framework="bootstrap">{0}</div>]]></xsl:attribute>
												<variableReferenceExpression name="body"/>
											</stringFormatExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Replace">
										<target>
											<typeReferenceExpression type="Regex"/>
										</target>
										<parameters>
											<variableReferenceExpression name="body"/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[(<script[^>]*(data-)?type="(\$app\.)?execute"[^>]*>(?<Script>(.|\n)*?)<\/script>)]]></xsl:attribute>
											</primitiveExpression>
											<addressOfExpression>
												<methodReferenceExpression methodName="DoEnrichData"/>
											</addressOfExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method DoEnrichData(string)-->
						<memberMethod returnType="System.String" name="DoEnrichData">
							<attributes static="true" private="true"/>
							<parameters>
								<parameter type="Match" name="m"/>
							</parameters>
							<statements>
								<tryStatement>
									<statements>
										<variableDeclarationStatement type="System.String" name="json">
											<init>
												<methodInvokeExpression methodName="Trim">
													<target>
														<methodInvokeExpression methodName="Trim">
															<target>
																<propertyReferenceExpression name="Value">
																	<arrayIndexerExpression>
																		<target>
																			<propertyReferenceExpression name="Groups">
																				<argumentReferenceExpression name="m"/>
																			</propertyReferenceExpression>
																		</target>
																		<indices>
																			<primitiveExpression value="Script"/>
																		</indices>
																	</arrayIndexerExpression>
																</propertyReferenceExpression>
															</target>
														</methodInvokeExpression>
													</target>
													<parameters>
														<primitiveExpression value=")" convertTo="Char"/>
														<primitiveExpression value="(" convertTo="Char"/>
														<primitiveExpression value=";" convertTo="Char"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="JObject" name="obj">
											<init>
												<methodInvokeExpression methodName="Parse">
													<target>
														<typeReferenceExpression type="JObject"/>
													</target>
													<parameters>
														<variableReferenceExpression name="json"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="PageRequest" name="request">
											<init>
												<objectCreateExpression type="PageRequest"/>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<propertyReferenceExpression name="Controller">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="obj"/>
													</target>
													<indices>
														<primitiveExpression value="controller"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="View">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="obj"/>
													</target>
													<indices>
														<primitiveExpression value="view"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="PageIndex">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<convertExpression to="Int32">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="obj"/>
													</target>
													<indices>
														<primitiveExpression value="pageIndex"/>
													</indices>
												</arrayIndexerExpression>
											</convertExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="PageSize">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<convertExpression to="Int32">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="obj"/>
													</target>
													<indices>
														<primitiveExpression value="pageSize"/>
													</indices>
												</arrayIndexerExpression>
											</convertExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="PageSize">
														<variableReferenceExpression name="request"/>
													</propertyReferenceExpression>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<propertyReferenceExpression name="PageSize">
														<variableReferenceExpression name="request"/>
													</propertyReferenceExpression>
													<primitiveExpression value="100"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<propertyReferenceExpression name="SortExpression">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="obj"/>
													</target>
													<indices>
														<primitiveExpression value="sortExpression"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</assignStatement>
										<variableDeclarationStatement type="JArray" name="metadataFilter">
											<init>
												<castExpression targetType="JArray">
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="obj"/>
														</target>
														<indices>
															<primitiveExpression value="metadataFilter"/>
														</indices>
													</arrayIndexerExpression>
												</castExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="metadataFilter"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<propertyReferenceExpression name="MetadataFilter">
														<variableReferenceExpression name="request"/>
													</propertyReferenceExpression>
													<methodInvokeExpression methodName="ToObject">
														<typeArguments>
															<typeReference type="System.String[]"/>
														</typeArguments>
														<target>
															<variableReferenceExpression name="metadataFilter"/>
														</target>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<propertyReferenceExpression name="MetadataFilter">
														<variableReferenceExpression name="request"/>
													</propertyReferenceExpression>
													<arrayCreateExpression>
														<createType type="System.String"/>
														<initializers>
															<primitiveExpression value="fields"/>
														</initializers>
													</arrayCreateExpression>
												</assignStatement>
											</falseStatements>
										</conditionStatement>
										<assignStatement>
											<propertyReferenceExpression name="RequiresMetaData">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
											<primitiveExpression value="true"/>
										</assignStatement>
										<variableDeclarationStatement type="ViewPage" name="page">
											<init>
												<methodInvokeExpression methodName="GetPage">
													<target>
														<methodInvokeExpression methodName="CreateDataController">
															<target>
																<typeReferenceExpression type="ControllerFactory"/>
															</target>
														</methodInvokeExpression>
													</target>
													<parameters>
														<propertyReferenceExpression name="Controller">
															<variableReferenceExpression name="request"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="View">
															<variableReferenceExpression name="request"/>
														</propertyReferenceExpression>
														<variableReferenceExpression name="request"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.String" name="output">
											<init>
												<methodInvokeExpression methodName="CompressViewPageJsonOutput">
													<target>
														<typeReferenceExpression type="ApplicationServices"/>
													</target>
													<parameters>
														<methodInvokeExpression methodName="SerializeObject">
															<target>
																<typeReferenceExpression type="JsonConvert"/>
															</target>
															<parameters>
																<variableReferenceExpression name="page"/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.Object" name="doFormat">
											<init>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="obj"/>
													</target>
													<indices>
														<primitiveExpression value="format"/>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<variableReferenceExpression name="doFormat"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="doFormat"/>
													<primitiveExpression value="true" convertTo="String"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement type="System.Object" name="id">
											<init>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="obj"/>
													</target>
													<indices>
														<primitiveExpression value="id"/>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<variableReferenceExpression name="id"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="id"/>
													<propertyReferenceExpression name="Controller">
														<variableReferenceExpression name="request"/>
													</propertyReferenceExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<methodReturnStatement>
											<stringFormatExpression>
												<xsl:attribute name="format"><![CDATA[<script>$app.data({{"id":"{0}","format":{1},"d":{2}}});</script>]]></xsl:attribute>
												<variableReferenceExpression name="id"/>
												<methodInvokeExpression methodName="ToLower">
													<target>
														<methodInvokeExpression methodName="ToString">
															<target>
																<convertExpression to="Boolean">
																	<variableReferenceExpression name="doFormat"/>
																</convertExpression>
															</target>
														</methodInvokeExpression>
													</target>
												</methodInvokeExpression>
												<variableReferenceExpression name="output"/>
											</stringFormatExpression>
										</methodReturnStatement>
									</statements>
									<catch exceptionType="Exception" localName="ex">
										<methodReturnStatement>
											<binaryOperatorExpression operator="Add">
												<binaryOperatorExpression operator="Add">
													<primitiveExpression>
														<xsl:attribute name="value"><![CDATA[<div class="well text-danger">]]></xsl:attribute>
													</primitiveExpression>
													<propertyReferenceExpression name="Message">
														<variableReferenceExpression name="ex"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[</div>]]></xsl:attribute>
												</primitiveExpression>
											</binaryOperatorExpression>
										</methodReturnStatement>
									</catch>
								</tryStatement>
							</statements>
						</memberMethod>
						<!-- property IsSiteContentEnabled -->
						<memberProperty type="System.Boolean" name="IsSiteContentEnabled">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<unaryOperatorExpression operator="IsNotNullOrEmpty">
										<propertyReferenceExpression name="SiteContentControllerName"/>
									</unaryOperatorExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property SiteContentControllerName -->
						<memberProperty type="System.String" name="SiteContentControllerName">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetSiteContentControllerName">
										<target>
											<methodInvokeExpression methodName="Create"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- member FrameworkSiteContentControllerName -->
						<memberField type="System.String" name="FrameworkSiteContentControllerName">
							<attributes static="true" public="true"/>
							<init>
								<stringEmptyExpression/>
							</init>
						</memberField>
						<!-- method GetSiteContentControllerName() -->
						<memberMethod returnType="System.String" name="GetSiteContentControllerName">
							<attributes public="true" />
							<statements>
								<methodReturnStatement>
									<xsl:choose>
										<xsl:when test="$PageImplementation='html' and $SiteContentTableName!=''">
											<variableReferenceExpression name="FrameworkSiteContentControllerName"/>
										</xsl:when>
										<xsl:otherwise>
											<stringEmptyExpression/>
										</xsl:otherwise>
									</xsl:choose>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method GetSiteContentViewId() -->
						<memberMethod returnType="System.String" name="GetSiteContentViewId">
							<attributes public="true" />
							<statements>
								<methodReturnStatement>
									<primitiveExpression value="editForm1"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property SiteContentEditors -->
						<memberProperty type="System.String[]" name="SiteContentEditors">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetSiteContentEditors">
										<target>
											<methodInvokeExpression methodName="Create"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method GetSiteContentContentEditors() -->
						<memberMethod returnType="System.String[]" name="GetSiteContentEditors">
							<attributes public="true"/>
							<statements>
								<methodReturnStatement>
									<arrayCreateExpression>
										<createType type="System.String"/>
										<initializers>
											<primitiveExpression value="Administrators"/>
											<primitiveExpression value="Content Editors"/>
											<primitiveExpression value="Developers"/>
										</initializers>
									</arrayCreateExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property SiteContentDevelopers -->
						<memberProperty type="System.String[]" name="SiteContentDevelopers">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetSiteContentDevelopers">
										<target>
											<methodInvokeExpression methodName="Create"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method GetSiteContentContentDevelopers() -->
						<memberMethod returnType="System.String[]" name="GetSiteContentDevelopers">
							<attributes public="true"/>
							<statements>
								<methodReturnStatement>
									<arrayCreateExpression>
										<createType type="System.String"/>
										<initializers>
											<primitiveExpression value="Administrators"/>
											<primitiveExpression value="Developers"/>
										</initializers>
									</arrayCreateExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property SuperUsers -->
						<memberProperty type="System.String[]" name="SuperUsers">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetSuperUsers">
										<target>
											<methodInvokeExpression methodName="Create"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method GetSuperUsers() -->
						<memberMethod returnType="System.String[]" name="GetSuperUsers">
							<attributes public="true"/>
							<statements>
								<methodReturnStatement>
									<arrayCreateExpression>
										<createType type="System.String"/>
										<initializers>
											<primitiveExpression value="Administrators"/>
										</initializers>
									</arrayCreateExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property IsContentEditor -->
						<memberProperty type="System.Boolean" name="IsContentEditor">
							<attributes public="true" static="true"/>
							<getStatements>
								<foreachStatement>
									<variable type="System.String" name="r"/>
									<target>
										<methodInvokeExpression methodName="GetSiteContentEditors">
											<target>
												<methodInvokeExpression methodName="Create"/>
											</target>
										</methodInvokeExpression>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="UserIsInRole">
													<target>
														<typeReferenceExpression type="DataControllerBase"/>
													</target>
													<parameters>
														<variableReferenceExpression name="r"/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="true"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<primitiveExpression value="false"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property IsDeveloper -->
						<memberProperty type="System.Boolean" name="IsDeveloper">
							<attributes public="true" static="true"/>
							<getStatements>
								<foreachStatement>
									<variable type="System.String" name="r"/>
									<target>
										<methodInvokeExpression methodName="GetSiteContentDevelopers">
											<target>
												<methodInvokeExpression methodName="Create"/>
											</target>
										</methodInvokeExpression>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="UserIsInRole">
													<target>
														<typeReferenceExpression type="DataControllerBase"/>
													</target>
													<parameters>
														<variableReferenceExpression name="r"/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="true"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<primitiveExpression value="false"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property IsSuperUser -->
						<memberProperty type="System.Boolean" name="IsSuperUser">
							<attributes public="true" static="true"/>
							<getStatements>
								<foreachStatement>
									<variable type="System.String" name="r"/>
									<target>
										<methodInvokeExpression methodName="GetSuperUsers">
											<target>
												<methodInvokeExpression methodName="Create"/>
											</target>
										</methodInvokeExpression>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="UserIsInRole">
													<target>
														<typeReferenceExpression type="DataControllerBase"/>
													</target>
													<parameters>
														<variableReferenceExpression name="r"/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="true"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<primitiveExpression value="false"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method AfterAction(ActionArgs, ActionResult) -->
						<memberMethod name="AfterAction">
							<attributes public="true"/>
							<parameters>
								<parameter type="ActionArgs" name="args"/>
								<parameter type="ActionResult" name="result"/>
							</parameters>
						</memberMethod>
						<!-- method BeforeAction(ActionArgs, ActionResult) -->
						<memberMethod name="BeforeAction">
							<attributes public="true"/>
							<parameters>
								<parameter type="ActionArgs" name="args"/>
								<parameter type="ActionResult" name="result"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="Equals">
											<target>
												<propertyReferenceExpression name="SiteContentControllerName"/>
											</target>
											<parameters>
												<propertyReferenceExpression name="Controller">
													<argumentReferenceExpression name="args"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="OrdinalIgnoreCase">
													<typeReferenceExpression type="StringComparison"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="CommandName">
														<argumentReferenceExpression name="args"/>
													</propertyReferenceExpression>
													<primitiveExpression value="Insert"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="createdDateFieldName">
													<init>
														<methodInvokeExpression methodName="SiteContentFieldName">
															<parameters>
																<propertyReferenceExpression name="CreatedDate">
																	<typeReferenceExpression type="SiteContentFields"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="createdDate">
													<init>
														<methodInvokeExpression methodName="SelectFieldValueObject">
															<target>
																<variableReferenceExpression name="args"/>
															</target>
															<parameters>
																<variableReferenceExpression name="createdDateFieldName"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityEquality">
															<variableReferenceExpression name="createdDate"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="AddValue">
															<target>
																<argumentReferenceExpression name="args"/>
															</target>
															<parameters>
																<objectCreateExpression type="FieldValue">
																	<parameters>
																		<variableReferenceExpression name="createdDateFieldName"/>
																		<propertyReferenceExpression name="UtcNow">
																			<typeReferenceExpression type="DateTime"/>
																		</propertyReferenceExpression>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
													<falseStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityEquality">
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="createdDate"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<propertyReferenceExpression name="NewValue">
																		<variableReferenceExpression name="createdDate"/>
																	</propertyReferenceExpression>
																	<propertyReferenceExpression name="UtcNow">
																		<typeReferenceExpression type="DateTime"/>
																	</propertyReferenceExpression>
																</assignStatement>
																<assignStatement>
																	<propertyReferenceExpression name="Modified">
																		<variableReferenceExpression name="createdDate"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="true"/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanOr">
													<binaryOperatorExpression operator="ValueEquality">
														<propertyReferenceExpression name="CommandName">
															<argumentReferenceExpression name="args"/>
														</propertyReferenceExpression>
														<primitiveExpression value="Insert"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="ValueEquality">
														<propertyReferenceExpression name="CommandName">
															<argumentReferenceExpression name="args"/>
														</propertyReferenceExpression>
														<primitiveExpression value="Update"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="modifiedDateFieldName">
													<init>
														<methodInvokeExpression methodName="SiteContentFieldName">
															<parameters>
																<propertyReferenceExpression name="ModifiedDate">
																	<typeReferenceExpression type="SiteContentFields"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="modifiedDate">
													<init>
														<methodInvokeExpression methodName="SelectFieldValueObject">
															<target>
																<argumentReferenceExpression name="args"/>
															</target>
															<parameters>
																<variableReferenceExpression name="modifiedDateFieldName"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityEquality">
															<variableReferenceExpression name="modifiedDate"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="AddValue">
															<target>
																<argumentReferenceExpression name="args"/>
															</target>
															<parameters>
																<objectCreateExpression type="FieldValue">
																	<parameters>
																		<variableReferenceExpression name="modifiedDateFieldName"/>
																		<propertyReferenceExpression name="UtcNow">
																			<typeReferenceExpression type="DateTime"/>
																		</propertyReferenceExpression>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
													<falseStatements>
														<assignStatement>
															<propertyReferenceExpression name="NewValue">
																<variableReferenceExpression name="modifiedDate"/>
															</propertyReferenceExpression>
															<propertyReferenceExpression name="UtcNow">
																<typeReferenceExpression type="DateTime"/>
															</propertyReferenceExpression>
														</assignStatement>
														<assignStatement>
															<propertyReferenceExpression name="Modified">
																<variableReferenceExpression name="modifiedDate"/>
															</propertyReferenceExpression>
															<primitiveExpression value="true"/>
														</assignStatement>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<unaryOperatorExpression operator="Not">
														<propertyReferenceExpression name="IgnoreBusinessRules">
															<variableReferenceExpression name="args"/>
														</propertyReferenceExpression>
													</unaryOperatorExpression>
													<propertyReferenceExpression name="AuthorizationIsSupported"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="System.Boolean" name="userIsDeveloper">
													<init>
														<propertyReferenceExpression name="IsDeveloper"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanOr">
															<binaryOperatorExpression operator="BooleanOr">
																<unaryOperatorExpression operator="Not">
																	<propertyReferenceExpression name="IsContentEditor"/>
																</unaryOperatorExpression>
																<unaryOperatorExpression operator="Not">
																	<variableReferenceExpression name="userIsDeveloper"/>
																</unaryOperatorExpression>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="IdentityEquality">
																<propertyReferenceExpression name="Values">
																	<argumentReferenceExpression name="args"/>
																</propertyReferenceExpression>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<throwExceptionStatement>
															<objectCreateExpression type="HttpException">
																<parameters>
																	<primitiveExpression value="403"/>
																	<primitiveExpression value="Forbidden"/>
																</parameters>
															</objectCreateExpression>
														</throwExceptionStatement>
													</trueStatements>
												</conditionStatement>
												<variableDeclarationStatement type="FieldValue" name="id">
													<init>
														<methodInvokeExpression methodName="SelectFieldValueObject">
															<target>
																<argumentReferenceExpression name="args"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="SiteContentFieldName">
																	<parameters>
																		<propertyReferenceExpression name="SiteContentId">
																			<typeReferenceExpression type="SiteContentFields"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="FieldValue" name="path">
													<init>
														<methodInvokeExpression methodName="SelectFieldValueObject">
															<target>
																<argumentReferenceExpression name="args"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="SiteContentFieldName">
																	<parameters>
																		<propertyReferenceExpression name="Path">
																			<typeReferenceExpression type="SiteContentFields"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="FieldValue" name="fileName">
													<init>
														<methodInvokeExpression methodName="SelectFieldValueObject">
															<target>
																<argumentReferenceExpression name="args"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="SiteContentFieldName">
																	<parameters>
																		<propertyReferenceExpression name="DataFileName">
																			<typeReferenceExpression type="SiteContentFields"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="FieldValue" name="text">
													<init>
														<methodInvokeExpression methodName="SelectFieldValueObject">
															<target>
																<argumentReferenceExpression name="args"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="SiteContentFieldName">
																	<parameters>
																		<propertyReferenceExpression name="Text">
																			<typeReferenceExpression type="SiteContentFields"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<comment>verify "Path" access</comment>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanOr">
															<binaryOperatorExpression operator="IdentityEquality">
																<variableReferenceExpression name="path"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="IdentityEquality">
																<variableReferenceExpression name="fileName"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<throwExceptionStatement>
															<objectCreateExpression type="HttpException">
																<parameters>
																	<primitiveExpression value="403"/>
																	<primitiveExpression value="Forbidden"/>
																</parameters>
															</objectCreateExpression>
														</throwExceptionStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="BooleanAnd">
																<binaryOperatorExpression operator="IdentityInequality">
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="path"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
																<methodInvokeExpression methodName="StartsWith">
																	<target>
																		<methodInvokeExpression methodName="ToString">
																			<target>
																				<propertyReferenceExpression name="Value">
																					<variableReferenceExpression name="path"/>
																				</propertyReferenceExpression>
																			</target>
																		</methodInvokeExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="sys/"/>
																		<propertyReferenceExpression name="CurrentCultureIgnoreCase">
																			<typeReferenceExpression type="StringComparison"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</binaryOperatorExpression>
															<unaryOperatorExpression operator="Not">
																<variableReferenceExpression name="userIsDeveloper"/>
															</unaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<throwExceptionStatement>
															<objectCreateExpression type="HttpException">
																<parameters>
																	<primitiveExpression value="403"/>
																	<primitiveExpression value="Forbidden"/>
																</parameters>
															</objectCreateExpression>
														</throwExceptionStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="BooleanAnd">
																<binaryOperatorExpression operator="IdentityInequality">
																	<propertyReferenceExpression name="OldValue">
																		<variableReferenceExpression name="path"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
																<methodInvokeExpression methodName="StartsWith">
																	<target>
																		<methodInvokeExpression methodName="ToString">
																			<target>
																				<propertyReferenceExpression name="OldValue">
																					<variableReferenceExpression name="path"/>
																				</propertyReferenceExpression>
																			</target>
																		</methodInvokeExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="sys/"/>
																		<propertyReferenceExpression name="CurrentCultureIgnoreCase">
																			<typeReferenceExpression type="StringComparison"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</binaryOperatorExpression>
															<unaryOperatorExpression operator="Not">
																<variableReferenceExpression name="userIsDeveloper"/>
															</unaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<throwExceptionStatement>
															<objectCreateExpression type="HttpException">
																<parameters>
																	<primitiveExpression value="403"/>
																	<primitiveExpression value="Forbidden"/>
																</parameters>
															</objectCreateExpression>
														</throwExceptionStatement>
													</trueStatements>
												</conditionStatement>
												<comment>convert and parse "Text" as needed</comment>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="IdentityInequality">
																<variableReferenceExpression name="text"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="ValueInequality">
																<propertyReferenceExpression name="CommandName">
																	<argumentReferenceExpression name="args"/>
																</propertyReferenceExpression>
																<primitiveExpression value="Delete"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement type="System.String" name="s">
															<init>
																<convertExpression to="String">
																	<propertyReferenceExpression name="Value">
																		<variableReferenceExpression name="text"/>
																	</propertyReferenceExpression>
																</convertExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<variableReferenceExpression name="s"/>
																	<primitiveExpression value="$Text"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement type="System.String" name="fullPath">
																	<init>
																		<convertExpression to="String">
																			<propertyReferenceExpression name="Value">
																				<variableReferenceExpression name="path"/>
																			</propertyReferenceExpression>
																		</convertExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="IsNotNullOrEmpty">
																			<variableReferenceExpression name="fullPath"/>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="fullPath"/>
																			<binaryOperatorExpression operator="Add">
																				<variableReferenceExpression name="fullPath"/>
																				<primitiveExpression value="/"/>
																			</binaryOperatorExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
																<assignStatement>
																	<variableReferenceExpression name="fullPath"/>
																	<binaryOperatorExpression operator="Add">
																		<variableReferenceExpression name="fullPath"/>
																		<convertExpression to="String">
																			<propertyReferenceExpression name="Value">
																				<variableReferenceExpression name="fileName"/>
																			</propertyReferenceExpression>
																		</convertExpression>
																	</binaryOperatorExpression>
																</assignStatement>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="StartsWith">
																				<target>
																					<variableReferenceExpression name="fullPath"/>
																				</target>
																				<parameters>
																					<primitiveExpression value="/"/>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="fullPath"/>
																			<binaryOperatorExpression operator="Add">
																				<primitiveExpression value="/"/>
																				<variableReferenceExpression name="fullPath"/>
																			</binaryOperatorExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="EndsWith">
																				<target>
																					<variableReferenceExpression name="fullPath"/>
																				</target>
																				<parameters>
																					<primitiveExpression value=".html"/>
																					<propertyReferenceExpression name="CurrentCultureIgnoreCase">
																						<typeReferenceExpression type="StringComparison"/>
																					</propertyReferenceExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="fullPath"/>
																			<binaryOperatorExpression operator="Add">
																				<variableReferenceExpression name="fullPath"/>
																				<primitiveExpression value=".html"/>
																			</binaryOperatorExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
																<variableDeclarationStatement type="System.String" name="physicalPath">
																	<init>
																		<methodInvokeExpression methodName="MapPath">
																			<target>
																				<propertyReferenceExpression name="Server">
																					<propertyReferenceExpression name="Current">
																						<typeReferenceExpression type="HttpContext"/>
																					</propertyReferenceExpression>
																				</propertyReferenceExpression>
																			</target>
																			<parameters>
																				<binaryOperatorExpression operator="Add">
																					<primitiveExpression value="~"/>
																					<variableReferenceExpression name="fullPath"/>
																				</binaryOperatorExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="Exists">
																				<target>
																					<typeReferenceExpression type="File"/>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="physicalPath"/>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="physicalPath"/>
																			<methodInvokeExpression methodName="MapPath">
																				<target>
																					<propertyReferenceExpression name="Server">
																						<propertyReferenceExpression name="Current">
																							<typeReferenceExpression type="HttpContext"/>
																						</propertyReferenceExpression>
																					</propertyReferenceExpression>
																				</target>
																				<parameters>
																					<binaryOperatorExpression operator="Add">
																						<primitiveExpression value="~"/>
																						<methodInvokeExpression methodName="Replace">
																							<target>
																								<variableReferenceExpression name="fullPath"/>
																							</target>
																							<parameters>
																								<primitiveExpression value="-"/>
																								<stringEmptyExpression/>
																							</parameters>
																						</methodInvokeExpression>
																					</binaryOperatorExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																		<conditionStatement>
																			<condition>
																				<unaryOperatorExpression operator="Not">
																					<methodInvokeExpression methodName="Exists">
																						<target>
																							<typeReferenceExpression type="File"/>
																						</target>
																						<parameters>
																							<variableReferenceExpression name="physicalPath"/>
																						</parameters>
																					</methodInvokeExpression>
																				</unaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<variableReferenceExpression name="physicalPath"/>
																					<primitiveExpression value="null"/>
																				</assignStatement>
																			</trueStatements>
																		</conditionStatement>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="IsNotNullOrEmpty">
																			<variableReferenceExpression name="physicalPath"/>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<propertyReferenceExpression name="NewValue">
																				<variableReferenceExpression name="text"/>
																			</propertyReferenceExpression>
																			<methodInvokeExpression methodName="ReadAllText">
																				<target>
																					<typeReferenceExpression type="File"/>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="physicalPath"/>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method SiteContentFieldName(SiteContentFields) -->
						<memberMethod returnType="System.String" name="SiteContentFieldName">
							<attributes public="true"/>
							<parameters>
								<parameter type="SiteContentFields" name="field"/>
							</parameters>
							<statements>
								<xsl:if test="$SiteContentTableName!=''">
									<xsl:if test="$SiteContentSiteContentID!='SiteContentId' and $SiteContentSiteContentID!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="SiteContentId">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentSiteContentID}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentFileName!='DataFileName' and $SiteContentFileName!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="DataFileName">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentFileName}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentContentType!='DataContentType' and $SiteContentContentType!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="DataContentType">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentContentType}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentRoles!='Roles' and $SiteContentRoles!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="Roles">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentRoles}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentUsers!='Users' and $SiteContentUsers!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="Users">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentUsers}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentCacheProfile!='CacheProfile' and $SiteContentCacheProfile!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="CacheProfile">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentCacheProfile}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentCreatedDate!='CreatedDate' and $SiteContentCreatedDate!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="CreatedDate">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentCreatedDate}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentModifiedDate!='ModifiedDate' and $SiteContentModifiedDate!='' and false()">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="ModifiedDate">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<comment>
													<xsl:value-of select="$SiteContentModifiedDate"/>
												</comment>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentModifiedDate}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentRoleExceptions!='RoleExceptions' and $SiteContentRoleExceptions!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="RoleExceptions">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentRoleExceptions}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentUserExceptions!='UserExceptions' and $SiteContentUserExceptions!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="UserExceptions">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentUserExceptions}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentSchedule!='Schedule' and $SiteContentSchedule!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="Schedule">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentSchedule}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentScheduleExceptions!='ScheduleExceptions' and $SiteContentScheduleExceptions!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="ScheduleExceptions">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentScheduleExceptions}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<xsl:if test="$SiteContentLength!='Length' and $SiteContentLength!=''">
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<argumentReferenceExpression name="field"/>
													<propertyReferenceExpression name="Length">
														<typeReferenceExpression type="SiteContentFields"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="{$SiteContentLength}"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
								</xsl:if>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ToString">
										<target>
											<variableReferenceExpression name="field"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method SiteContentFieldName() -->
						<memberMethod returnType="SortedDictionary" name="SiteContentDictionary">
							<typeArguments>
								<typeReference type="System.String"/>
								<typeReference type="System.String"/>
							</typeArguments>
							<attributes public="true"/>
							<statements>
								<!-- 
        public SortedDictionary<string, string> SiteContentDictionary()
        {
            var dictionary = new SortedDictionary<string, string>();
            dictionary["sitecontent"] = ApplicationServices.FrameworkSiteContentTableName;
            foreach (var field in Enum.GetValues(typeof(SiteContentFields))) 
                dictionary[field.ToString().ToLower()] = SiteContentFieldName((SiteContentFields)field);
            return dictionary;
        }
              -->
								<variableDeclarationStatement name="dictionary">
									<init>
										<objectCreateExpression type="SortedDictionary">
											<typeArguments>
												<typeReference type="System.String"/>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<variableReferenceExpression name="dictionary"/>
										</target>
										<indices>
											<primitiveExpression value="sitecontent"/>
										</indices>
									</arrayIndexerExpression>
									<propertyReferenceExpression name="FrameworkSiteContentControllerName">
										<typeReferenceExpression type="ApplicationServices"/>
									</propertyReferenceExpression>
								</assignStatement>
								<foreachStatement>
									<variable name="field"/>
									<target>
										<methodInvokeExpression methodName="GetValues">
											<target>
												<typeReferenceExpression type="Enum"/>
											</target>
											<parameters>
												<typeofExpression type="SiteContentFields"/>
											</parameters>
										</methodInvokeExpression>
									</target>
									<statements>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="dictionary"/>
												</target>
												<indices>
													<methodInvokeExpression methodName="ToLower">
														<target>
															<methodInvokeExpression methodName="ToString">
																<target>
																	<variableReferenceExpression name="field"/>
																</target>
															</methodInvokeExpression>
														</target>
													</methodInvokeExpression>
												</indices>
											</arrayIndexerExpression>
											<methodInvokeExpression methodName="SiteContentFieldName">
												<parameters>
													<castExpression targetType="SiteContentFields">
														<variableReferenceExpression name="field"/>
													</castExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="dictionary"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property IsSafeMode -->
						<memberProperty type="System.Boolean" name="IsSafeMode">
							<attributes public="true" static="true"/>
							<getStatements>
								<variableDeclarationStatement type="HttpRequest" name="request">
									<init>
										<propertyReferenceExpression name="Request">
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="Uri" name="test">
									<init>
										<propertyReferenceExpression name="UrlReferrer">
											<variableReferenceExpression name="request"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="test"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="test"/>
											<propertyReferenceExpression name="Url">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<binaryOperatorExpression operator="BooleanAnd">
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="test"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
										<binaryOperatorExpression operator="BooleanAnd">
											<methodInvokeExpression methodName="Contains">
												<target>
													<methodInvokeExpression methodName="ToString">
														<target>
															<variableReferenceExpression name="test"/>
														</target>
													</methodInvokeExpression>
												</target>
												<parameters>
													<primitiveExpression value="_safemode=true"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="UserIsInRole">
												<target>
													<typeReferenceExpression type="DataControllerBase"/>
												</target>
												<parameters>
													<propertyReferenceExpression name="SiteContentDevelopers"/>
												</parameters>
											</methodInvokeExpression>
										</binaryOperatorExpression>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property ScheduleCacheDuration -->
						<memberProperty type="System.Int32" name="ScheduleCacheDuration">
							<attributes public="true"/>
							<getStatements>
								<methodReturnStatement>
									<primitiveExpression value="20"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method ReadSiteContentString(string) -->
						<memberMethod returnType="System.String" name="ReadSiteContentString">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.Byte[]" name="data">
									<init>
										<methodInvokeExpression methodName="ReadSiteContentBytes">
											<parameters>
												<argumentReferenceExpression name="relativePath"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="data"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="null"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="GetString">
										<target>
											<propertyReferenceExpression name="UTF8">
												<typeReferenceExpression type="Encoding"/>
											</propertyReferenceExpression>
										</target>
										<parameters>
											<variableReferenceExpression name="data"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ReadSiteContentBytes(string) -->
						<memberMethod returnType="System.Byte[]" name="ReadSiteContentBytes">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="SiteContentFile" name="f">
									<init>
										<methodInvokeExpression methodName="ReadSiteContent">
											<parameters>
												<argumentReferenceExpression name="relativePath"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="f"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="null"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<propertyReferenceExpression name="Data">
										<variableReferenceExpression name="f"/>
									</propertyReferenceExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ReadSiteContent(string) -->
						<memberMethod returnType="SiteContentFile" name="ReadSiteContent">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="HttpContext" name="context">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="HttpContext"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="SiteContentFile" name="f">
									<init>
										<castExpression targetType="SiteContentFile">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Items">
														<variableReferenceExpression name="context"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<argumentReferenceExpression name="relativePath"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="f"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="f"/>
											<castExpression targetType="SiteContentFile">
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Cache">
															<variableReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</target>
													<indices>
														<variableReferenceExpression name="relativePath"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="f"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="System.String" name="path">
											<init>
												<argumentReferenceExpression name="relativePath"/>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.String" name="fileName">
											<init>
												<argumentReferenceExpression name="relativePath"/>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.Int32" name="index">
											<init>
												<methodInvokeExpression methodName="LastIndexOf">
													<target>
														<argumentReferenceExpression name="relativePath"/>
													</target>
													<parameters>
														<primitiveExpression value="/"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="GreaterThanOrEqual">
													<variableReferenceExpression name="index"/>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="fileName"/>
													<methodInvokeExpression methodName="Substring">
														<target>
															<argumentReferenceExpression name="path"/>
														</target>
														<parameters>
															<binaryOperatorExpression operator="Add">
																<variableReferenceExpression name="index"/>
																<primitiveExpression value="1"/>
															</binaryOperatorExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<assignStatement>
													<argumentReferenceExpression name="path"/>
													<methodInvokeExpression methodName="Substring">
														<target>
															<argumentReferenceExpression name="relativePath"/>
														</target>
														<parameters>
															<primitiveExpression value="0"/>
															<variableReferenceExpression name="index"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<variableReferenceExpression name="path"/>
													<primitiveExpression value="null"/>
												</assignStatement>
											</falseStatements>
										</conditionStatement>
										<variableDeclarationStatement type="SiteContentFileList" name="files">
											<init>
												<methodInvokeExpression methodName="ReadSiteContent">
													<parameters>
														<argumentReferenceExpression name="path"/>
														<variableReferenceExpression name="fileName"/>
														<primitiveExpression value="1"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="Count">
														<variableReferenceExpression name="files"/>
													</propertyReferenceExpression>
													<primitiveExpression value="1"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="f"/>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="files"/>
														</target>
														<indices>
															<primitiveExpression value="0"/>
														</indices>
													</arrayIndexerExpression>
												</assignStatement>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Items">
																<variableReferenceExpression name="context"/>
															</propertyReferenceExpression>
														</target>
														<indices>
															<argumentReferenceExpression name="relativePath"/>
														</indices>
													</arrayIndexerExpression>
													<variableReferenceExpression name="f"/>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="GreaterThan">
															<propertyReferenceExpression name="CacheDuration">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
															<primitiveExpression value="0"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="Add">
															<target>
																<propertyReferenceExpression name="Cache">
																	<variableReferenceExpression name="context"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<argumentReferenceExpression name="relativePath"/>
																<variableReferenceExpression name="f"/>
																<primitiveExpression value="null"/>
																<methodInvokeExpression methodName="AddSeconds">
																	<target>
																		<propertyReferenceExpression name="Now">
																			<typeReferenceExpression type="DateTime"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<propertyReferenceExpression name="CacheDuration">
																			<variableReferenceExpression name="f"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
																<propertyReferenceExpression name="NoSlidingExpiration">
																	<typeReferenceExpression type="Cache"/>
																</propertyReferenceExpression>
																<propertyReferenceExpression name="Normal">
																	<typeReferenceExpression type="CacheItemPriority"/>
																</propertyReferenceExpression>
																<primitiveExpression value="null"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
											<!--<falseStatements>
                        <assignStatement>
                          <variableReferenceExpression name="f"/>
                          <objectCreateExpression type="SiteContentFile"/>
                        </assignStatement>
                      </falseStatements>-->
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="f"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property NameValueListRegex -->
						<memberField type="Regex" name="NameValueListRegex">
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[^\s*(?'Name'\w+)\s*=\s*(?'Value'[\S\s]+?)\s*$]]></xsl:attribute>
										</primitiveExpression>
										<propertyReferenceExpression name="Multiline">
											<typeReferenceExpression type="RegexOptions"/>
										</propertyReferenceExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- method ReadSiteContent(string, string) -->
						<memberMethod returnType="SiteContentFileList" name="ReadSiteContent">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
								<parameter type="System.String" name="fileName"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ReadSiteContent">
										<parameters>
											<argumentReferenceExpression name="relativePath"/>
											<argumentReferenceExpression name="fileName"/>
											<propertyReferenceExpression name="MaxValue">
												<typeReferenceExpression type="Int32"/>
											</propertyReferenceExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ReadSiteContent(string, string, int) -->
						<memberMethod returnType="SiteContentFileList" name="ReadSiteContent">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
								<parameter type="System.String" name="fileName"/>
								<parameter type="System.Int32" name="maxCount"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ReadSiteContent">
										<parameters>
											<argumentReferenceExpression name="relativePath"/>
											<argumentReferenceExpression name="fileName"/>
											<argumentReferenceExpression name="maxCount"/>
											<primitiveExpression value="null"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ReadSiteContent(string, string, int) -->
						<memberMethod returnType="SiteContentFileList" name="ReadSiteContent">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
								<parameter type="System.String" name="fileName"/>
								<parameter type="System.Int32" name="maxCount"/>
								<parameter type="Nullable" name="modified">
									<typeArguments>
										<typeReference type="DateTime"/>
									</typeArguments>
								</parameter>
							</parameters>
							<statements>
								<variableDeclarationStatement type="SiteContentFileList" name="result">
									<init>
										<objectCreateExpression type="SiteContentFileList"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="IsSafeMode"/>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<variableReferenceExpression name="result"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<comment>prepare a filter</comment>
								<variableDeclarationStatement name="dataFileNameField">
									<init>
										<methodInvokeExpression methodName="SiteContentFieldName">
											<parameters>
												<propertyReferenceExpression name="DataFileName">
													<typeReferenceExpression type="SiteContentFields"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="pathField">
									<init>
										<methodInvokeExpression methodName="SiteContentFieldName">
											<parameters>
												<propertyReferenceExpression name="Path">
													<typeReferenceExpression type="SiteContentFields"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="filter">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="pathFilter">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<argumentReferenceExpression name="relativePath"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="pathFilter"/>
											<primitiveExpression value="{{0}}:={{1}}"/>
										</assignStatement>
										<variableDeclarationStatement type="System.Int32" name="firstWildcardIndex">
											<init>
												<methodInvokeExpression methodName="IndexOf">
													<target>
														<argumentReferenceExpression name="relativePath"/>
													</target>
													<parameters>
														<primitiveExpression value="%"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="GreaterThanOrEqual">
													<variableReferenceExpression name="firstWildcardIndex"/>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="System.Int32" name="lastWildcardIndex">
													<init>
														<methodInvokeExpression methodName="LastIndexOf">
															<target>
																<argumentReferenceExpression name="relativePath"/>
															</target>
															<parameters>
																<primitiveExpression value="%"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<assignStatement>
													<variableReferenceExpression name="pathFilter"/>
													<primitiveExpression value="{{0}}:$contains${{1}}"/>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<variableReferenceExpression name="firstWildcardIndex"/>
															<variableReferenceExpression name="lastWildcardIndex"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<variableReferenceExpression name="firstWildcardIndex"/>
																	<primitiveExpression value="0"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="pathFilter"/>
																	<primitiveExpression value="{{0}}:$endswith${{1}}"/>
																</assignStatement>
																<assignStatement>
																	<variableReferenceExpression name="relativePath"/>
																	<methodInvokeExpression methodName="Substring">
																		<target>
																			<argumentReferenceExpression name="relativePath"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="1"/>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<variableReferenceExpression name="lastWildcardIndex"/>
																			<binaryOperatorExpression operator="Subtract">
																				<propertyReferenceExpression name="Length">
																					<argumentReferenceExpression name="relativePath"/>
																				</propertyReferenceExpression>
																				<primitiveExpression value="1"/>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="pathFilter"/>
																			<primitiveExpression value="{{0}}:$beginswith${{1}}"/>
																		</assignStatement>
																		<assignStatement>
																			<variableReferenceExpression name="relativePath"/>
																			<methodInvokeExpression methodName="Substring">
																				<target>
																					<argumentReferenceExpression name="relativePath"/>
																				</target>
																				<parameters>
																					<primitiveExpression value="0"/>
																					<variableReferenceExpression name="lastWildcardIndex"/>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
									<falseStatements>
										<assignStatement>
											<variableReferenceExpression name="pathFilter"/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[{0}:=null]]></xsl:attribute>
											</primitiveExpression>
										</assignStatement>
									</falseStatements>
								</conditionStatement>
								<variableDeclarationStatement type="System.String" name="fileNameFilter">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Boolean" name="usePhysicalName">
									<init>
										<primitiveExpression value="false"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<argumentReferenceExpression name="fileName"/>
											</unaryOperatorExpression>
											<binaryOperatorExpression operator="ValueInequality">
												<argumentReferenceExpression name="fileName"/>
												<primitiveExpression value="%"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="usePhysicalName"/>
											<primitiveExpression value="true"/>
										</assignStatement>
										<assignStatement>
											<variableReferenceExpression name="fileNameFilter"/>
											<primitiveExpression value="{{0}}:={{1}}"/>
										</assignStatement>
										<variableDeclarationStatement type="System.Int32" name="firstWildcardIndex">
											<init>
												<methodInvokeExpression methodName="IndexOf">
													<target>
														<argumentReferenceExpression name="fileName"/>
													</target>
													<parameters>
														<primitiveExpression value="%"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="GreaterThanOrEqual">
													<variableReferenceExpression name="firstWildcardIndex"/>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="System.Int32" name="lastWildcardIndex">
													<init>
														<methodInvokeExpression methodName="LastIndexOf">
															<target>
																<argumentReferenceExpression name="fileName"/>
															</target>
															<parameters>
																<primitiveExpression value="%"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<assignStatement>
													<variableReferenceExpression name="fileNameFilter"/>
													<primitiveExpression value="{{0}}:$contains${{1}}"/>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<variableReferenceExpression name="firstWildcardIndex"/>
															<variableReferenceExpression name="lastWildcardIndex"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<variableReferenceExpression name="firstWildcardIndex"/>
																	<primitiveExpression value="0"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="fileNameFilter"/>
																	<primitiveExpression value="{{0}}:$endswith${{1}}"/>
																</assignStatement>
																<assignStatement>
																	<variableReferenceExpression name="fileName"/>
																	<methodInvokeExpression methodName="Substring">
																		<target>
																			<argumentReferenceExpression name="fileName"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="1"/>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="ValueEquality">
																			<variableReferenceExpression name="lastWildcardIndex"/>
																			<binaryOperatorExpression operator="Subtract">
																				<propertyReferenceExpression name="Length">
																					<argumentReferenceExpression name="fileName"/>
																				</propertyReferenceExpression>
																				<primitiveExpression value="1"/>
																			</binaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="fileNameFilter"/>
																			<primitiveExpression value="{{0}}:$beginswith${{1}}"/>
																		</assignStatement>
																		<assignStatement>
																			<variableReferenceExpression name="fileName"/>
																			<methodInvokeExpression methodName="Substring">
																				<target>
																					<argumentReferenceExpression name="fileName"/>
																				</target>
																				<parameters>
																					<primitiveExpression value="0"/>
																					<variableReferenceExpression name="lastWildcardIndex"/>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
															</falseStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<variableReferenceExpression name="pathFilter"/>
											</unaryOperatorExpression>
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<variableReferenceExpression name="fileNameFilter"/>
											</unaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="filter"/>
											</target>
											<parameters>
												<primitiveExpression value="_match_:$all$"/>
											</parameters>
										</methodInvokeExpression>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<variableReferenceExpression name="pathFilter"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="filter"/>
													</target>
													<parameters>
														<stringFormatExpression>
															<variableReferenceExpression name="pathFilter"/>
															<variableReferenceExpression name="pathField"/>
															<methodInvokeExpression methodName="ValueToString">
																<target>
																	<typeReferenceExpression type="DataControllerBase"/>
																</target>
																<parameters>
																	<argumentReferenceExpression name="relativePath"/>
																</parameters>
															</methodInvokeExpression>
														</stringFormatExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="ValueInequality">
														<argumentReferenceExpression name="fileName"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="ValueInequality">
														<argumentReferenceExpression name="fileName"/>
														<primitiveExpression value="%"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="filter"/>
													</target>
													<parameters>
														<stringFormatExpression>
															<variableReferenceExpression name="fileNameFilter"/>
															<variableReferenceExpression name="dataFileNameField"/>
															<methodInvokeExpression methodName="ValueToString">
																<target>
																	<typeReferenceExpression type="DataControllerBase"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="fileName"/>
																</parameters>
															</methodInvokeExpression>
														</stringFormatExpression>
													</parameters>
												</methodInvokeExpression>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<unaryOperatorExpression operator="IsNullOrEmpty">
																<methodInvokeExpression methodName="GetExtension">
																	<target>
																		<typeReferenceExpression type="Path"/>
																	</target>
																	<parameters>
																		<argumentReferenceExpression name="fileName"/>
																	</parameters>
																</methodInvokeExpression>
															</unaryOperatorExpression>
															<binaryOperatorExpression operator="BooleanOr">
																<unaryOperatorExpression operator="IsNullOrEmpty">
																	<variableReferenceExpression name="relativePath"/>
																</unaryOperatorExpression>
																<binaryOperatorExpression operator="BooleanOr">
																	<unaryOperatorExpression operator="Not">
																		<methodInvokeExpression methodName="StartsWith">
																			<target>
																				<argumentReferenceExpression name="relativePath"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="sys/"/>
																				<propertyReferenceExpression name="OrdinalIgnoreCase">
																					<typeReferenceExpression type="StringComparison"/>
																				</propertyReferenceExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</unaryOperatorExpression>
																	<methodInvokeExpression methodName="StartsWith">
																		<target>
																			<argumentReferenceExpression name="relativePath"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="sys/controls"/>
																			<propertyReferenceExpression name="OrdinalIgnoreCase">
																				<typeReferenceExpression type="StringComparison"/>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</binaryOperatorExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="filter"/>
															</target>
															<parameters>
																<primitiveExpression value="_match_:$all$"/>
															</parameters>
														</methodInvokeExpression>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="pathFilter"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="filter"/>
																	</target>
																	<parameters>
																		<stringFormatExpression>
																			<variableReferenceExpression name="pathFilter"/>
																			<variableReferenceExpression name="pathField"/>
																			<methodInvokeExpression methodName="ValueToString">
																				<target>
																					<typeReferenceExpression type="DataControllerBase"/>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="relativePath"/>
																				</parameters>
																			</methodInvokeExpression>
																		</stringFormatExpression>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="filter"/>
															</target>
															<parameters>
																<stringFormatExpression>
																	<variableReferenceExpression name="fileNameFilter"/>
																	<variableReferenceExpression name="dataFileNameField"/>
																	<methodInvokeExpression methodName="ValueToString">
																		<target>
																			<typeReferenceExpression type="DataControllerBase"/>
																		</target>
																		<parameters>
																			<binaryOperatorExpression operator="Add">
																				<methodInvokeExpression methodName="Replace">
																					<target>
																						<methodInvokeExpression methodName="GetFileNameWithoutExtension">
																							<target>
																								<typeReferenceExpression type="Path"/>
																							</target>
																							<parameters>
																								<argumentReferenceExpression name="fileName"/>
																							</parameters>
																						</methodInvokeExpression>
																					</target>
																					<parameters>
																						<primitiveExpression value="-"/>
																						<stringEmptyExpression/>
																					</parameters>
																				</methodInvokeExpression>
																				<primitiveExpression value=".html"/>
																			</binaryOperatorExpression>
																		</parameters>
																	</methodInvokeExpression>
																</stringFormatExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="HasValue">
											<argumentReferenceExpression name="modified"/>
										</propertyReferenceExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="filter"/>
											</target>
											<parameters>
												<stringFormatExpression>
													<xsl:attribute name="format"><![CDATA[{0}:<={1}]]></xsl:attribute>
													<methodInvokeExpression methodName="SiteContentFieldName">
														<parameters>
															<propertyReferenceExpression name="ModifiedDate">
																<typeReferenceExpression type="SiteContentFields"/>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="ValueToString">
														<target>
															<typeReferenceExpression type="DataControllerBase"/>
														</target>
														<parameters>
															<argumentReferenceExpression name="modified"/>
														</parameters>
													</methodInvokeExpression>
												</stringFormatExpression>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<comment> determine user identity</comment>
								<variableDeclarationStatement type="HttpContext" name="context">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="HttpContext"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="userName">
									<init>
										<stringEmptyExpression/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Boolean" name="isAuthenticated">
									<init>
										<primitiveExpression value="false"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="IPrincipal" name="user">
									<init>
										<propertyReferenceExpression name="User">
											<variableReferenceExpression name="context"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="user"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="userName"/>
											<methodInvokeExpression methodName="ToLower">
												<target>
													<propertyReferenceExpression name="Name">
														<propertyReferenceExpression name="Identity">
															<variableReferenceExpression name="user"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<variableReferenceExpression name="isAuthenticated"/>
											<propertyReferenceExpression name="IsAuthenticated">
												<propertyReferenceExpression name="Identity">
													<variableReferenceExpression name="user"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<comment>enumerate site content files</comment>
								<variableDeclarationStatement type="PageRequest" name="r">
									<init>
										<objectCreateExpression type="PageRequest"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="Controller">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="GetSiteContentControllerName"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="View">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="GetSiteContentViewId"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="RequiresSiteContentText">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<primitiveExpression value="true"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="PageSize">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<propertyReferenceExpression name="MaxValue">
										<typeReferenceExpression type="Int32"/>
									</propertyReferenceExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Filter">
										<variableReferenceExpression name="r"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="ToArray">
										<target>
											<variableReferenceExpression name="filter"/>
										</target>
									</methodInvokeExpression>
								</assignStatement>
								<variableDeclarationStatement type="SortedDictionary" name="blobsToResolve">
									<typeArguments>
										<typeReference type="System.String"/>
										<typeReference type="SiteContentFile"/>
									</typeArguments>
									<init>
										<objectCreateExpression type="SortedDictionary">
											<typeArguments>
												<typeReference type="System.String"/>
												<typeReference type="SiteContentFile"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String[]" name="access">
									<init>
										<methodInvokeExpression methodName="GrantFullAccess">
											<target>
												<typeReferenceExpression type="Controller"/>
											</target>
											<parameters>
												<primitiveExpression value="{$SiteContentTableName}"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<tryStatement>
									<statements>
										<variableDeclarationStatement type="IDataEngine" name="engine">
											<init>
												<methodInvokeExpression methodName="CreateDataEngine">
													<target>
														<typeReferenceExpression type="ControllerFactory"/>
													</target>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="DataControllerBase" name="controller">
											<init>
												<castExpression targetType="DataControllerBase">
													<variableReferenceExpression name="engine"/>
												</castExpression>
											</init>
										</variableDeclarationStatement>
										<!--<assignStatement>
                      <propertyReferenceExpression name="AllowPublicAccess">
                        <variableReferenceExpression name="controller"/>
                      </propertyReferenceExpression>
                      <primitiveExpression value="true"/>
                    </assignStatement>-->
										<variableDeclarationStatement type="IDataReader" name="reader">
											<init>
												<methodInvokeExpression methodName="ExecuteReader">
													<target>
														<variableReferenceExpression name="engine"/>
													</target>
													<parameters>
														<variableReferenceExpression name="r"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<comment>verify optional SiteContent fields</comment>
										<variableDeclarationStatement type="SortedDictionary" name="fieldDictionary">
											<typeArguments>
												<typeReference type="System.String"/>
												<typeReference type="System.String"/>
											</typeArguments>
											<init>
												<objectCreateExpression type="SortedDictionary">
													<typeArguments>
														<typeReference type="System.String"/>
														<typeReference type="System.String"/>
													</typeArguments>
												</objectCreateExpression>
											</init>
										</variableDeclarationStatement>
										<forStatement>
											<variable type="System.Int32" name="i">
												<init>
													<primitiveExpression value="0"/>
												</init>
											</variable>
											<test>
												<binaryOperatorExpression operator="LessThan">
													<variableReferenceExpression name="i"/>
													<propertyReferenceExpression name="FieldCount">
														<variableReferenceExpression name="reader"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</test>
											<increment>
												<variableReferenceExpression name="i"/>
											</increment>
											<statements>
												<variableDeclarationStatement type="System.String" name="fieldName">
													<init>
														<methodInvokeExpression methodName="GetName">
															<target>
																<variableReferenceExpression name="reader"/>
															</target>
															<parameters>
																<variableReferenceExpression name="i"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="fieldDictionary"/>
														</target>
														<indices>
															<variableReferenceExpression name="fieldName"/>
														</indices>
													</arrayIndexerExpression>
													<variableReferenceExpression name="fieldName"/>
												</assignStatement>
											</statements>
										</forStatement>
										<variableDeclarationStatement type="System.String" name="rolesField">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<variableReferenceExpression name="fieldDictionary"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<parameters>
														<propertyReferenceExpression name="Roles">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<directionExpression direction="Out">
													<variableReferenceExpression name="rolesField"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement type="System.String" name="usersField">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<variableReferenceExpression name="fieldDictionary"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<parameters>
														<propertyReferenceExpression name="Users">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<directionExpression direction="Out">
													<variableReferenceExpression name="usersField"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement type="System.String" name="roleExceptionsField">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<variableReferenceExpression name="fieldDictionary"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<parameters>
														<propertyReferenceExpression name="RoleExceptions">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<directionExpression direction="Out">
													<variableReferenceExpression name="roleExceptionsField"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement type="System.String" name="userExceptionsField">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<variableReferenceExpression name="fieldDictionary"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<parameters>
														<propertyReferenceExpression name="UserExceptions">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<directionExpression direction="Out">
													<variableReferenceExpression name="userExceptionsField"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement type="System.String" name="cacheProfileField">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<variableReferenceExpression name="fieldDictionary"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<parameters>
														<propertyReferenceExpression name="CacheProfile">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<directionExpression direction="Out">
													<variableReferenceExpression name="cacheProfileField"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement type="System.String" name="scheduleField">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<variableReferenceExpression name="fieldDictionary"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<parameters>
														<propertyReferenceExpression name="Schedule">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<directionExpression direction="Out">
													<variableReferenceExpression name="scheduleField"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement type="System.String" name="scheduleExceptionsField">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<variableReferenceExpression name="fieldDictionary"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<parameters>
														<propertyReferenceExpression name="ScheduleExceptions">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<directionExpression direction="Out">
													<variableReferenceExpression name="scheduleExceptionsField"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement name="createdDateField">
											<init>
												<stringEmptyExpression/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<variableReferenceExpression name="fieldDictionary"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<parameters>
														<propertyReferenceExpression name="CreatedDate">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<directionExpression direction="Out">
													<variableReferenceExpression name="createdDateField"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement name="modifiedDateField">
											<init>
												<stringEmptyExpression/>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="TryGetValue">
											<target>
												<variableReferenceExpression name="fieldDictionary"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<parameters>
														<propertyReferenceExpression name="ModifiedDate">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<directionExpression direction="Out">
													<variableReferenceExpression name="modifiedDateField"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
										<variableDeclarationStatement type="DataField" name="dataField">
											<init>
												<methodInvokeExpression methodName="FindField">
													<target>
														<methodInvokeExpression methodName="CreateViewPage">
															<target>
																<variableReferenceExpression name="controller"/>
															</target>
														</methodInvokeExpression>
													</target>
													<parameters>
														<methodInvokeExpression methodName="SiteContentFieldName">
															<parameters>
																<propertyReferenceExpression name="Data">
																	<typeReferenceExpression type="SiteContentFields"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.String" name="blobHandler">
											<init>
												<propertyReferenceExpression name="OnDemandHandler">
													<variableReferenceExpression name="dataField"/>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="WorkflowRegister" name="wr">
											<init>
												<methodInvokeExpression methodName="GetCurrent">
													<target>
														<typeReferenceExpression type="WorkflowRegister"/>
													</target>
													<parameters>
														<variableReferenceExpression name="relativePath"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<comment>read SiteContent files</comment>
										<whileStatement>
											<test>
												<methodInvokeExpression methodName="Read">
													<target>
														<variableReferenceExpression name="reader"/>
													</target>
												</methodInvokeExpression>
											</test>
											<statements>
												<comment>verify user access rights</comment>
												<variableDeclarationStatement type="System.Boolean" name="include">
													<init>
														<primitiveExpression value="true"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNotNullOrEmpty">
															<variableReferenceExpression name="rolesField"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement type="System.String" name="roles">
															<init>
																<convertExpression to="String">
																	<arrayIndexerExpression>
																		<target>
																			<variableReferenceExpression name="reader"/>
																		</target>
																		<indices>
																			<variableReferenceExpression name="rolesField"/>
																		</indices>
																	</arrayIndexerExpression>
																</convertExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<unaryOperatorExpression operator="IsNotNullOrEmpty">
																		<variableReferenceExpression name="roles"/>
																	</unaryOperatorExpression>
																	<binaryOperatorExpression operator="ValueInequality">
																		<variableReferenceExpression name="roles"/>
																		<primitiveExpression value="?"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="BooleanAnd">
																			<binaryOperatorExpression operator="ValueEquality">
																				<variableReferenceExpression name="roles"/>
																				<primitiveExpression value="*"/>
																			</binaryOperatorExpression>
																			<unaryOperatorExpression operator="Not">
																				<variableReferenceExpression name="isAuthenticated"/>
																			</unaryOperatorExpression>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="include"/>
																			<primitiveExpression value="false"/>
																		</assignStatement>
																	</trueStatements>
																	<falseStatements>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="BooleanOr">
																					<unaryOperatorExpression operator="Not">
																						<variableReferenceExpression name="isAuthenticated"/>
																					</unaryOperatorExpression>
																					<binaryOperatorExpression operator="BooleanAnd">
																						<binaryOperatorExpression operator="ValueInequality">
																							<variableReferenceExpression name="roles"/>
																							<primitiveExpression value="*"/>
																						</binaryOperatorExpression>
																						<unaryOperatorExpression operator="Not">
																							<methodInvokeExpression methodName="UserIsInRole">
																								<target>
																									<typeReferenceExpression type="DataControllerBase"/>
																								</target>
																								<parameters>
																									<variableReferenceExpression name="roles"/>
																								</parameters>
																							</methodInvokeExpression>
																						</unaryOperatorExpression>
																					</binaryOperatorExpression>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<variableReferenceExpression name="include"/>
																					<primitiveExpression value="false"/>
																				</assignStatement>
																			</trueStatements>
																		</conditionStatement>
																	</falseStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<variableReferenceExpression name="include"/>
															<unaryOperatorExpression operator="IsNotNullOrEmpty">
																<variableReferenceExpression name="usersField"/>
															</unaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement type="System.String" name="users">
															<init>
																<convertExpression to="String">
																	<arrayIndexerExpression>
																		<target>
																			<variableReferenceExpression name="reader"/>
																		</target>
																		<indices>
																			<variableReferenceExpression name="usersField"/>
																		</indices>
																	</arrayIndexerExpression>
																</convertExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<unaryOperatorExpression operator="IsNotNullOrEmpty">
																		<variableReferenceExpression name="users"/>
																	</unaryOperatorExpression>
																	<binaryOperatorExpression operator="ValueEquality">
																		<methodInvokeExpression methodName="IndexOf">
																			<target>
																				<typeReferenceExpression type="Array"/>
																			</target>
																			<parameters>
																				<methodInvokeExpression methodName="Split">
																					<target>
																						<methodInvokeExpression methodName="ToLower">
																							<target>
																								<variableReferenceExpression name="users"/>
																							</target>
																						</methodInvokeExpression>
																					</target>
																					<parameters>
																						<arrayCreateExpression>
																							<createType type="System.Char"/>
																							<initializers>
																								<primitiveExpression value="," convertTo="Char"/>
																							</initializers>
																						</arrayCreateExpression>
																						<propertyReferenceExpression name="RemoveEmptyEntries">
																							<typeReferenceExpression type="StringSplitOptions"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																				<variableReferenceExpression name="userName"/>
																			</parameters>
																		</methodInvokeExpression>
																		<primitiveExpression value="-1"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="include"/>
																	<primitiveExpression value="false"/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<variableReferenceExpression name="include"/>
															<unaryOperatorExpression operator="IsNotNullOrEmpty">
																<variableReferenceExpression name="roleExceptionsField"/>
															</unaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement type="System.String" name="roleExceptions">
															<init>
																<convertExpression to="String">
																	<arrayIndexerExpression>
																		<target>
																			<variableReferenceExpression name="reader"/>
																		</target>
																		<indices>
																			<variableReferenceExpression name="roleExceptionsField"/>
																		</indices>
																	</arrayIndexerExpression>
																</convertExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<unaryOperatorExpression operator="IsNotNullOrEmpty">
																		<variableReferenceExpression name="roleExceptions"/>
																	</unaryOperatorExpression>
																	<binaryOperatorExpression operator="BooleanAnd">
																		<variableReferenceExpression name="isAuthenticated"/>
																		<binaryOperatorExpression operator="BooleanOr">
																			<binaryOperatorExpression operator="ValueEquality">
																				<variableReferenceExpression name="roleExceptions"/>
																				<primitiveExpression value="*"/>
																			</binaryOperatorExpression>
																			<methodInvokeExpression methodName="UserIsInRole">
																				<target>
																					<typeReferenceExpression type="DataControllerBase"/>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="roleExceptions"/>
																				</parameters>
																			</methodInvokeExpression>
																		</binaryOperatorExpression>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="include"/>
																	<primitiveExpression value="false"/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<variableReferenceExpression name="include"/>
															<unaryOperatorExpression operator="IsNotNullOrEmpty">
																<variableReferenceExpression name="userExceptionsField"/>
															</unaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement type="System.String" name="userExceptions">
															<init>
																<convertExpression to="String">
																	<arrayIndexerExpression>
																		<target>
																			<variableReferenceExpression name="reader"/>
																		</target>
																		<indices>
																			<variableReferenceExpression name="userExceptionsField"/>
																		</indices>
																	</arrayIndexerExpression>
																</convertExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<unaryOperatorExpression operator="IsNotNullOrEmpty">
																		<variableReferenceExpression name="userExceptions"/>
																	</unaryOperatorExpression>
																	<binaryOperatorExpression operator="ValueInequality">
																		<methodInvokeExpression methodName="IndexOf">
																			<target>
																				<typeReferenceExpression type="Array"/>
																			</target>
																			<parameters>
																				<methodInvokeExpression methodName="Split">
																					<target>
																						<methodInvokeExpression methodName="ToLower">
																							<target>
																								<variableReferenceExpression name="userExceptions"/>
																							</target>
																						</methodInvokeExpression>
																					</target>
																					<parameters>
																						<arrayCreateExpression>
																							<createType type="System.Char"/>
																							<initializers>
																								<primitiveExpression value="," convertTo="Char"/>
																							</initializers>
																						</arrayCreateExpression>
																						<propertyReferenceExpression name="RemoveEmptyEntries">
																							<typeReferenceExpression type="StringSplitOptions"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</methodInvokeExpression>
																				<variableReferenceExpression name="userName"/>
																			</parameters>
																		</methodInvokeExpression>
																		<primitiveExpression value="-1"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="include"/>
																	<primitiveExpression value="false"/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
												<variableDeclarationStatement type="System.String" name="physicalName">
													<init>
														<convertExpression to="String">
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="reader"/>
																</target>
																<indices>
																	<variableReferenceExpression name="dataFileNameField"/>
																</indices>
															</arrayIndexerExpression>
														</convertExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="System.String" name="physicalPath">
													<init>
														<convertExpression to="String">
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="reader"/>
																</target>
																<indices>
																	<methodInvokeExpression methodName="SiteContentFieldName">
																		<parameters>
																			<propertyReferenceExpression name="Path">
																				<typeReferenceExpression type="SiteContentFields"/>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</indices>
															</arrayIndexerExpression>
														</convertExpression>
													</init>
												</variableDeclarationStatement>
												<comment>check if the content object is a part of a workflow</comment>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="BooleanAnd">
																<binaryOperatorExpression operator="IdentityInequality">
																	<variableReferenceExpression name="wr"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
																<propertyReferenceExpression name="Enabled">
																	<variableReferenceExpression name="wr"/>
																</propertyReferenceExpression>
															</binaryOperatorExpression>
															<unaryOperatorExpression operator="Not">
																<methodInvokeExpression methodName="IsMatch">
																	<target>
																		<variableReferenceExpression name="wr"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="physicalPath"/>
																		<variableReferenceExpression name="physicalName"/>
																	</parameters>
																</methodInvokeExpression>
															</unaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="include"/>
															<primitiveExpression value="false"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<variableDeclarationStatement type="System.String" name="schedule">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="System.String" name="scheduleExceptions">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<comment>check if the content object is on schedule</comment>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<variableReferenceExpression name="include"/>
															<binaryOperatorExpression operator="BooleanOr">
																<unaryOperatorExpression operator="IsNullOrEmpty">
																	<variableReferenceExpression name="physicalPath"/>
																</unaryOperatorExpression>
																<unaryOperatorExpression operator="Not">
																	<methodInvokeExpression methodName="StartsWith">
																		<target>
																			<variableReferenceExpression name="physicalPath"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="sys/schedules/"/>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="scheduleField"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="schedule"/>
																	<convertExpression to="String">
																		<arrayIndexerExpression>
																			<target>
																				<variableReferenceExpression name="reader"/>
																			</target>
																			<indices>
																				<variableReferenceExpression name="scheduleField"/>
																			</indices>
																		</arrayIndexerExpression>
																	</convertExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="scheduleExceptionsField"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="scheduleExceptions"/>
																	<convertExpression to="String">
																		<arrayIndexerExpression>
																			<target>
																				<variableReferenceExpression name="reader"/>
																			</target>
																			<indices>
																				<variableReferenceExpression name="scheduleExceptionsField"/>
																			</indices>
																		</arrayIndexerExpression>
																	</convertExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<xsl:if test="$IsUnlimited='true' and $TargetFramework!='3.5'">
															<conditionStatement>
																<condition>
																	<binaryOperatorExpression operator="BooleanOr">
																		<unaryOperatorExpression operator="IsNotNullOrEmpty">
																			<variableReferenceExpression name="schedule"/>
																		</unaryOperatorExpression>
																		<unaryOperatorExpression operator="IsNotNullOrEmpty">
																			<variableReferenceExpression name="scheduleExceptions"/>
																		</unaryOperatorExpression>
																	</binaryOperatorExpression>
																</condition>
																<trueStatements>
																	<variableDeclarationStatement type="System.String" name="scheduleStatusKey">
																		<init>
																			<stringFormatExpression format="ScheduleStatus|{{0}}|{{1}}">
																				<variableReferenceExpression name="schedule"/>
																				<variableReferenceExpression name="scheduleExceptions"/>
																			</stringFormatExpression>
																		</init>
																	</variableDeclarationStatement>
																	<variableDeclarationStatement type="ScheduleStatus" name="status">
																		<init>
																			<castExpression targetType="ScheduleStatus">
																				<arrayIndexerExpression>
																					<target>
																						<propertyReferenceExpression name="Items">
																							<variableReferenceExpression name="context"/>
																						</propertyReferenceExpression>
																					</target>
																					<indices>
																						<variableReferenceExpression name="scheduleStatusKey"/>
																					</indices>
																				</arrayIndexerExpression>
																			</castExpression>
																		</init>
																	</variableDeclarationStatement>
																	<conditionStatement>
																		<condition>
																			<binaryOperatorExpression operator="IdentityEquality">
																				<variableReferenceExpression name="status"/>
																				<primitiveExpression value="null"/>
																			</binaryOperatorExpression>
																		</condition>
																		<trueStatements>
																			<assignStatement>
																				<variableReferenceExpression name="status"/>
																				<castExpression targetType="ScheduleStatus">
																					<arrayIndexerExpression>
																						<target>
																							<propertyReferenceExpression name="Cache">
																								<variableReferenceExpression name="context"/>
																							</propertyReferenceExpression>
																						</target>
																						<indices>
																							<variableReferenceExpression name="scheduleStatusKey"/>
																						</indices>
																					</arrayIndexerExpression>
																				</castExpression>
																			</assignStatement>
																		</trueStatements>
																	</conditionStatement>
																	<variableDeclarationStatement type="System.Boolean" name="scheduleStatusChanged">
																		<init>
																			<primitiveExpression value="false"/>
																		</init>
																	</variableDeclarationStatement>
																	<conditionStatement>
																		<condition>
																			<binaryOperatorExpression operator="IdentityEquality">
																				<variableReferenceExpression name="status"/>
																				<primitiveExpression value="null"/>
																			</binaryOperatorExpression>
																		</condition>
																		<trueStatements>
																			<conditionStatement>
																				<condition>
																					<binaryOperatorExpression operator="BooleanAnd">
																						<unaryOperatorExpression operator="IsNotNullOrEmpty">
																							<variableReferenceExpression name="schedule"/>
																						</unaryOperatorExpression>
																						<unaryOperatorExpression operator="Not">
																							<methodInvokeExpression methodName="Contains">
																								<target>
																									<variableReferenceExpression name="schedule"/>
																								</target>
																								<parameters>
																									<primitiveExpression value="+"/>
																								</parameters>
																							</methodInvokeExpression>
																						</unaryOperatorExpression>
																					</binaryOperatorExpression>
																				</condition>
																				<trueStatements>
																					<assignStatement>
																						<variableReferenceExpression name="schedule"/>
																						<methodInvokeExpression methodName="ReadSiteContentString">
																							<parameters>
																								<binaryOperatorExpression operator="Add">
																									<primitiveExpression value="sys/schedules%/"/>
																									<variableReferenceExpression name="schedule"/>
																								</binaryOperatorExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</assignStatement>
																				</trueStatements>
																			</conditionStatement>
																			<conditionStatement>
																				<condition>
																					<binaryOperatorExpression operator="BooleanAnd">
																						<unaryOperatorExpression operator="IsNotNullOrEmpty">
																							<variableReferenceExpression name="scheduleExceptions"/>
																						</unaryOperatorExpression>
																						<unaryOperatorExpression operator="Not">
																							<methodInvokeExpression methodName="Contains">
																								<target>
																									<variableReferenceExpression name="scheduleExceptions"/>
																								</target>
																								<parameters>
																									<primitiveExpression value="+"/>
																								</parameters>
																							</methodInvokeExpression>
																						</unaryOperatorExpression>
																					</binaryOperatorExpression>
																				</condition>
																				<trueStatements>
																					<assignStatement>
																						<variableReferenceExpression name="scheduleExceptions"/>
																						<methodInvokeExpression methodName="ReadSiteContentString">
																							<parameters>
																								<binaryOperatorExpression operator="Add">
																									<primitiveExpression value="sys/schedules%/"/>
																									<variableReferenceExpression name="scheduleExceptions"/>
																								</binaryOperatorExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</assignStatement>
																				</trueStatements>
																			</conditionStatement>
																			<conditionStatement>
																				<condition>
																					<binaryOperatorExpression operator="BooleanOr">
																						<unaryOperatorExpression operator="IsNotNullOrEmpty">
																							<variableReferenceExpression name="schedule"/>
																						</unaryOperatorExpression>
																						<unaryOperatorExpression operator="IsNotNullOrEmpty">
																							<variableReferenceExpression name="scheduleExceptions"/>
																						</unaryOperatorExpression>
																					</binaryOperatorExpression>
																				</condition>
																				<trueStatements>
																					<assignStatement>
																						<variableReferenceExpression name="status"/>
																						<methodInvokeExpression methodName="Test">
																							<target>
																								<typeReferenceExpression type="Scheduler"/>
																							</target>
																							<parameters>
																								<variableReferenceExpression name="schedule"/>
																								<variableReferenceExpression name="scheduleExceptions"/>
																							</parameters>
																						</methodInvokeExpression>
																					</assignStatement>
																				</trueStatements>
																				<falseStatements>
																					<assignStatement>
																						<variableReferenceExpression name="status"/>
																						<objectCreateExpression type="ScheduleStatus"/>
																					</assignStatement>
																					<assignStatement>
																						<propertyReferenceExpression name="Success">
																							<variableReferenceExpression name="status"/>
																						</propertyReferenceExpression>
																						<primitiveExpression value="true"/>
																					</assignStatement>
																					<assignStatement>
																						<propertyReferenceExpression name="NextTestDate">
																							<variableReferenceExpression name="status"/>
																						</propertyReferenceExpression>
																						<propertyReferenceExpression name="MaxValue">
																							<typeReferenceExpression type="DateTime"/>
																						</propertyReferenceExpression>
																					</assignStatement>
																				</falseStatements>
																			</conditionStatement>
																			<assignStatement>
																				<arrayIndexerExpression>
																					<target>
																						<propertyReferenceExpression name="Items">
																							<variableReferenceExpression name="context"/>
																						</propertyReferenceExpression>
																					</target>
																					<indices>
																						<variableReferenceExpression name="scheduleStatusKey"/>
																					</indices>
																				</arrayIndexerExpression>
																				<variableReferenceExpression name="status"/>
																			</assignStatement>
																			<assignStatement>
																				<variableReferenceExpression name="scheduleStatusChanged"/>
																				<primitiveExpression value="true"/>
																			</assignStatement>
																		</trueStatements>
																		<falseStatements>
																			<conditionStatement>
																				<condition>
																					<binaryOperatorExpression operator="GreaterThan">
																						<propertyReferenceExpression name="Now">
																							<typeReferenceExpression type="DateTime"/>
																						</propertyReferenceExpression>
																						<propertyReferenceExpression name="NextTestDate">
																							<variableReferenceExpression name="status"/>
																						</propertyReferenceExpression>
																					</binaryOperatorExpression>
																				</condition>
																				<trueStatements>
																					<assignStatement>
																						<variableReferenceExpression name="status"/>
																						<methodInvokeExpression methodName="Test">
																							<target>
																								<typeReferenceExpression type="Scheduler"/>
																							</target>
																							<parameters>
																								<propertyReferenceExpression name="Schedule">
																									<variableReferenceExpression name="status"/>
																								</propertyReferenceExpression>
																								<propertyReferenceExpression name="Exceptions">
																									<variableReferenceExpression name="status"/>
																								</propertyReferenceExpression>
																							</parameters>
																						</methodInvokeExpression>
																					</assignStatement>
																					<assignStatement>
																						<arrayIndexerExpression>
																							<target>
																								<propertyReferenceExpression name="Items">
																									<variableReferenceExpression name="context"/>
																								</propertyReferenceExpression>
																							</target>
																							<indices>
																								<variableReferenceExpression name="scheduleStatusKey"/>
																							</indices>
																						</arrayIndexerExpression>
																						<variableReferenceExpression name="status"/>
																					</assignStatement>
																					<assignStatement>
																						<variableReferenceExpression name="scheduleStatusChanged"/>
																						<primitiveExpression value="true"/>
																					</assignStatement>
																				</trueStatements>
																			</conditionStatement>
																		</falseStatements>
																	</conditionStatement>
																	<conditionStatement>
																		<condition>
																			<variableReferenceExpression name="scheduleStatusChanged"/>
																		</condition>
																		<trueStatements>
																			<methodInvokeExpression methodName="Add">
																				<target>
																					<propertyReferenceExpression name="Cache">
																						<variableReferenceExpression name="context"/>
																					</propertyReferenceExpression>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="scheduleStatusKey"/>
																					<variableReferenceExpression name="status"/>
																					<primitiveExpression value="null"/>
																					<methodInvokeExpression methodName="AddSeconds">
																						<target>
																							<propertyReferenceExpression name="Now">
																								<typeReferenceExpression type="DateTime"/>
																							</propertyReferenceExpression>
																						</target>
																						<parameters>
																							<propertyReferenceExpression name="ScheduleCacheDuration"/>
																						</parameters>
																					</methodInvokeExpression>
																					<propertyReferenceExpression name="NoSlidingExpiration">
																						<typeReferenceExpression type="Cache"/>
																					</propertyReferenceExpression>
																					<propertyReferenceExpression name="Normal">
																						<typeReferenceExpression type="CacheItemPriority"/>
																					</propertyReferenceExpression>
																					<primitiveExpression value="null"/>
																				</parameters>
																			</methodInvokeExpression>
																		</trueStatements>
																	</conditionStatement>
																	<conditionStatement>
																		<condition>
																			<unaryOperatorExpression operator="Not">
																				<propertyReferenceExpression name="Success">
																					<variableReferenceExpression name="status"/>
																				</propertyReferenceExpression>
																			</unaryOperatorExpression>
																		</condition>
																		<trueStatements>
																			<assignStatement>
																				<variableReferenceExpression name="include"/>
																				<primitiveExpression value="false"/>
																			</assignStatement>
																		</trueStatements>
																	</conditionStatement>
																</trueStatements>
															</conditionStatement>
														</xsl:if>
													</trueStatements>
												</conditionStatement>
												<comment>create a file instance</comment>
												<conditionStatement>
													<condition>
														<variableReferenceExpression name="include"/>
													</condition>
													<trueStatements>
														<variableDeclarationStatement type="System.String" name="siteContentIdField">
															<init>
																<methodInvokeExpression methodName="SiteContentFieldName">
																	<parameters>
																		<propertyReferenceExpression name="SiteContentId">
																			<typeReferenceExpression type="SiteContentFields"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement type="SiteContentFile" name="f">
															<init>
																<objectCreateExpression type="SiteContentFile"/>
															</init>
														</variableDeclarationStatement>
														<assignStatement>
															<propertyReferenceExpression name="Id">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="reader"/>
																</target>
																<indices>
																	<variableReferenceExpression name="siteContentIdField"/>
																</indices>
															</arrayIndexerExpression>
														</assignStatement>
														<conditionStatement>
															<condition>
																<variableReferenceExpression name="usePhysicalName"/>
															</condition>
															<trueStatements>
																<assignStatement>
																	<argumentReferenceExpression name="fileName"/>
																	<variableReferenceExpression name="physicalName"/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<propertyReferenceExpression name="Name">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
															<variableReferenceExpression name="fileName"/>
														</assignStatement>
														<assignStatement>
															<propertyReferenceExpression name="PhysicalName">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
															<variableReferenceExpression name="physicalName"/>
														</assignStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanOr">
																	<unaryOperatorExpression operator="IsNullOrEmpty">
																		<propertyReferenceExpression name="Name">
																			<variableReferenceExpression name="f"/>
																		</propertyReferenceExpression>
																	</unaryOperatorExpression>
																	<methodInvokeExpression methodName="Contains">
																		<target>
																			<variableReferenceExpression name="f.Name"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="%"/>
																		</parameters>
																	</methodInvokeExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<propertyReferenceExpression name="Name">
																		<variableReferenceExpression name="f"/>
																	</propertyReferenceExpression>
																	<propertyReferenceExpression name="PhysicalName">
																		<variableReferenceExpression name="f"/>
																	</propertyReferenceExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<propertyReferenceExpression name="Path">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
															<variableReferenceExpression name="physicalPath"/>
														</assignStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="createdDateField"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement name="createdDate">
																	<init>
																		<arrayIndexerExpression>
																			<target>
																				<variableReferenceExpression name="reader"/>
																			</target>
																			<indices>
																				<variableReferenceExpression name="createdDateField"/>
																			</indices>
																		</arrayIndexerExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="Equals">
																				<target>
																					<propertyReferenceExpression name="Value">
																						<typeReferenceExpression type="DBNull"/>
																					</propertyReferenceExpression>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="createdDate"/>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<propertyReferenceExpression name="CreatedDate">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																			<castExpression targetType="DateTime">
																				<variableReferenceExpression name="createdDate"/>
																			</castExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="modifiedDateField"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement name="modifiedDate">
																	<init>
																		<arrayIndexerExpression>
																			<target>
																				<variableReferenceExpression name="reader"/>
																			</target>
																			<indices>
																				<variableReferenceExpression name="modifiedDateField"/>
																			</indices>
																		</arrayIndexerExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="Equals">
																				<target>
																					<propertyReferenceExpression name="Value">
																						<typeReferenceExpression type="DBNull"/>
																					</propertyReferenceExpression>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="modifiedDate"/>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<propertyReferenceExpression name="ModifiedDate">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																			<castExpression targetType="DateTime">
																				<variableReferenceExpression name="modifiedDate"/>
																			</castExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<propertyReferenceExpression name="ContentType">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
															<convertExpression to="String">
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="reader"/>
																	</target>
																	<indices>
																		<methodInvokeExpression methodName="SiteContentFieldName">
																			<parameters>
																				<propertyReferenceExpression name="DataContentType">
																					<typeReferenceExpression type="SiteContentFields"/>
																				</propertyReferenceExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</indices>
																</arrayIndexerExpression>
															</convertExpression>
														</assignStatement>
														<assignStatement>
															<propertyReferenceExpression name="Schedule">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
															<variableReferenceExpression name="schedule"/>
														</assignStatement>
														<assignStatement>
															<propertyReferenceExpression name="ScheduleExceptions">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
															<variableReferenceExpression name="scheduleExceptions"/>
														</assignStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="IsNotNullOrEmpty">
																	<variableReferenceExpression name="cacheProfileField"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement type="System.String" name="cacheProfile">
																	<init>
																		<convertExpression to="String">
																			<arrayIndexerExpression>
																				<target>
																					<variableReferenceExpression name="reader"/>
																				</target>
																				<indices>
																					<variableReferenceExpression name="cacheProfileField"/>
																				</indices>
																			</arrayIndexerExpression>
																		</convertExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="IsNotNullOrEmpty">
																			<variableReferenceExpression name="cacheProfile"/>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<propertyReferenceExpression name="CacheProfile">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																			<variableReferenceExpression name="cacheProfile"/>
																		</assignStatement>
																		<assignStatement>
																			<variableReferenceExpression name="cacheProfile"/>
																			<methodInvokeExpression methodName="ReadSiteContentString">
																				<parameters>
																					<binaryOperatorExpression operator="Add">
																						<primitiveExpression value="sys/cache-profiles/"/>
																						<variableReferenceExpression name="cacheProfile"/>
																					</binaryOperatorExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																		<conditionStatement>
																			<condition>
																				<unaryOperatorExpression operator="IsNotNullOrEmpty">
																					<variableReferenceExpression name="cacheProfile"/>
																				</unaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<variableDeclarationStatement type="Match" name="m">
																					<init>
																						<methodInvokeExpression methodName="Match">
																							<target>
																								<propertyReferenceExpression name="NameValueListRegex"/>
																							</target>
																							<parameters>
																								<variableReferenceExpression name="cacheProfile"/>
																							</parameters>
																						</methodInvokeExpression>
																					</init>
																				</variableDeclarationStatement>
																				<whileStatement>
																					<test>
																						<propertyReferenceExpression name="Success">
																							<variableReferenceExpression name="m"/>
																						</propertyReferenceExpression>
																					</test>
																					<statements>
																						<variableDeclarationStatement type="System.String" name="n">
																							<init>
																								<methodInvokeExpression methodName="ToLower">
																									<target>
																										<propertyReferenceExpression name="Value">
																											<arrayIndexerExpression>
																												<target>
																													<propertyReferenceExpression name="Groups">
																														<variableReferenceExpression name="m"/>
																													</propertyReferenceExpression>
																												</target>
																												<indices>
																													<primitiveExpression value="Name"/>
																												</indices>
																											</arrayIndexerExpression>
																										</propertyReferenceExpression>
																									</target>
																								</methodInvokeExpression>
																							</init>
																						</variableDeclarationStatement>
																						<variableDeclarationStatement type="System.String" name="v">
																							<init>
																								<propertyReferenceExpression name="Value">
																									<arrayIndexerExpression>
																										<target>
																											<propertyReferenceExpression name="Groups">
																												<variableReferenceExpression name="m"/>
																											</propertyReferenceExpression>
																										</target>
																										<indices>
																											<primitiveExpression value="Value"/>
																										</indices>
																									</arrayIndexerExpression>
																								</propertyReferenceExpression>
																							</init>
																						</variableDeclarationStatement>
																						<conditionStatement>
																							<condition>
																								<binaryOperatorExpression operator="ValueEquality">
																									<variableReferenceExpression name="n"/>
																									<primitiveExpression value="duration"/>
																								</binaryOperatorExpression>
																							</condition>
																							<trueStatements>
																								<variableDeclarationStatement type="System.Int32" name="duration">
																									<init>
																										<primitiveExpression value="0"/>
																									</init>
																								</variableDeclarationStatement>
																								<conditionStatement>
																									<condition>
																										<methodInvokeExpression methodName="TryParse">
																											<target>
																												<typeReferenceExpression type="Int32"/>
																											</target>
																											<parameters>
																												<variableReferenceExpression name="v"/>
																												<directionExpression direction="Out">
																													<variableReferenceExpression name="duration"/>
																												</directionExpression>
																											</parameters>
																										</methodInvokeExpression>
																									</condition>
																									<trueStatements>
																										<assignStatement>
																											<propertyReferenceExpression name="CacheDuration">
																												<variableReferenceExpression name="f"/>
																											</propertyReferenceExpression>
																											<variableReferenceExpression name="duration"/>
																										</assignStatement>
																										<assignStatement>
																											<propertyReferenceExpression name="CacheLocation">
																												<variableReferenceExpression name="f"/>
																											</propertyReferenceExpression>
																											<propertyReferenceExpression name="ServerAndPrivate">
																												<typeReferenceExpression type="HttpCacheability"/>
																											</propertyReferenceExpression>
																										</assignStatement>
																									</trueStatements>
																								</conditionStatement>
																							</trueStatements>
																							<falseStatements>
																								<conditionStatement>
																									<condition>
																										<binaryOperatorExpression operator="ValueEquality">
																											<variableReferenceExpression name="n"/>
																											<primitiveExpression value="location"/>
																										</binaryOperatorExpression>
																									</condition>
																									<trueStatements>
																										<tryStatement>
																											<statements>
																												<assignStatement>
																													<propertyReferenceExpression name="CacheLocation">
																														<variableReferenceExpression name="f"/>
																													</propertyReferenceExpression>
																													<castExpression targetType="HttpCacheability">
																														<methodInvokeExpression methodName="ConvertFromString">
																															<target>
																																<methodInvokeExpression methodName="GetConverter">
																																	<target>
																																		<typeReferenceExpression type="TypeDescriptor"/>
																																	</target>
																																	<parameters>
																																		<typeofExpression type="HttpCacheability"/>
																																	</parameters>
																																</methodInvokeExpression>
																															</target>
																															<parameters>
																																<variableReferenceExpression name="v"/>
																															</parameters>
																														</methodInvokeExpression>
																													</castExpression>
																												</assignStatement>
																											</statements>
																											<catch exceptionType="Exception"></catch>
																										</tryStatement>
																									</trueStatements>
																									<falseStatements>
																										<conditionStatement>
																											<condition>
																												<binaryOperatorExpression operator="ValueEquality">
																													<variableReferenceExpression name="n"/>
																													<primitiveExpression value="varybyheaders"/>
																												</binaryOperatorExpression>
																											</condition>
																											<trueStatements>
																												<assignStatement>
																													<propertyReferenceExpression name="CacheVaryByHeaders">
																														<variableReferenceExpression name="f"/>
																													</propertyReferenceExpression>
																													<methodInvokeExpression methodName="Split">
																														<target>
																															<variableReferenceExpression name="v"/>
																														</target>
																														<parameters>
																															<arrayCreateExpression>
																																<createType type="System.Char"/>
																																<initializers>
																																	<primitiveExpression value="," convertTo="Char"/>
																																	<primitiveExpression value=";" convertTo="Char"/>
																																</initializers>
																															</arrayCreateExpression>
																															<propertyReferenceExpression name="RemoveEmptyEntries">
																																<typeReferenceExpression type="StringSplitOptions"/>
																															</propertyReferenceExpression>
																														</parameters>
																													</methodInvokeExpression>
																												</assignStatement>
																											</trueStatements>
																											<falseStatements>
																												<conditionStatement>
																													<condition>
																														<binaryOperatorExpression operator="ValueEquality">
																															<variableReferenceExpression name="n"/>
																															<primitiveExpression value="varybyparams"/>
																														</binaryOperatorExpression>
																													</condition>
																													<trueStatements>
																														<assignStatement>
																															<propertyReferenceExpression name="CacheVaryByParams">
																																<variableReferenceExpression name="f"/>
																															</propertyReferenceExpression>
																															<methodInvokeExpression methodName="Split">
																																<target>
																																	<variableReferenceExpression name="v"/>
																																</target>
																																<parameters>
																																	<arrayCreateExpression>
																																		<createType type="System.Char"/>
																																		<initializers>
																																			<primitiveExpression value="," convertTo="Char"/>
																																			<primitiveExpression value=";" convertTo="Char"/>
																																		</initializers>
																																	</arrayCreateExpression>
																																	<propertyReferenceExpression name="RemoveEmptyEntries">
																																		<typeReferenceExpression type="StringSplitOptions"/>
																																	</propertyReferenceExpression>
																																</parameters>
																															</methodInvokeExpression>
																														</assignStatement>
																													</trueStatements>
																													<falseStatements>
																														<conditionStatement>
																															<condition>
																																<binaryOperatorExpression operator="ValueEquality">
																																	<variableReferenceExpression name="n"/>
																																	<primitiveExpression value="nostore"/>
																																</binaryOperatorExpression>
																															</condition>
																															<trueStatements>
																																<assignStatement>
																																	<propertyReferenceExpression name="CacheNoStore">
																																		<variableReferenceExpression name="f"/>
																																	</propertyReferenceExpression>
																																	<binaryOperatorExpression operator="ValueEquality">
																																		<methodInvokeExpression methodName="ToLower">
																																			<target>
																																				<variableReferenceExpression name="v"/>
																																			</target>
																																		</methodInvokeExpression>
																																		<primitiveExpression value="true" convertTo="String"/>
																																	</binaryOperatorExpression>
																																</assignStatement>
																															</trueStatements>
																														</conditionStatement>
																													</falseStatements>
																												</conditionStatement>
																											</falseStatements>
																										</conditionStatement>
																									</falseStatements>
																								</conditionStatement>
																							</falseStatements>
																						</conditionStatement>
																						<assignStatement>
																							<variableReferenceExpression name="m"/>
																							<methodInvokeExpression methodName="NextMatch">
																								<target>
																									<variableReferenceExpression name="m"/>
																								</target>
																							</methodInvokeExpression>
																						</assignStatement>
																					</statements>
																				</whileStatement>
																			</trueStatements>
																		</conditionStatement>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<variableDeclarationStatement type="System.Object" name="textString">
															<init>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="reader"/>
																	</target>
																	<indices>
																		<methodInvokeExpression methodName="SiteContentFieldName">
																			<parameters>
																				<propertyReferenceExpression name="Text">
																					<typeReferenceExpression type="SiteContentFields"/>
																				</propertyReferenceExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</indices>
																</arrayIndexerExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanOr">
																	<methodInvokeExpression methodName="Equals">
																		<target>
																			<propertyReferenceExpression name="Value">
																				<typeReferenceExpression type="DBNull"/>
																			</propertyReferenceExpression>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="textString"/>
																		</parameters>
																	</methodInvokeExpression>
																	<unaryOperatorExpression operator="Not">
																		<propertyReferenceExpression name="IsText">
																			<variableReferenceExpression name="f"/>
																		</propertyReferenceExpression>
																	</unaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement type="System.String" name="blobKey">
																	<init>
																		<stringFormatExpression format="{{0}}=o|{{1}}">
																			<variableReferenceExpression name="blobHandler"/>
																			<propertyReferenceExpression name="Id">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																		</stringFormatExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="GreaterThan">
																			<propertyReferenceExpression name="CacheDuration">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																			<primitiveExpression value="0"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<propertyReferenceExpression name="Data">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																			<castExpression targetType="System.Byte[]">
																				<arrayIndexerExpression>
																					<target>
																						<propertyReferenceExpression name="Cache">
																							<propertyReferenceExpression name="Current">
																								<typeReferenceExpression type="HttpContext"/>
																							</propertyReferenceExpression>
																						</propertyReferenceExpression>
																					</target>
																					<indices>
																						<variableReferenceExpression name="blobKey"/>
																					</indices>
																				</arrayIndexerExpression>
																			</castExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityEquality">
																			<propertyReferenceExpression name="Data">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<arrayIndexerExpression>
																				<target>
																					<variableReferenceExpression name="blobsToResolve"/>
																				</target>
																				<indices>
																					<variableReferenceExpression name="blobKey"/>
																				</indices>
																			</arrayIndexerExpression>
																			<variableReferenceExpression name="f"/>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="IsNullOrEmpty">
																			<propertyReferenceExpression name="ContentType">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<conditionStatement>
																			<condition>
																				<methodInvokeExpression methodName="IsMatch">
																					<target>
																						<typeReferenceExpression type="Regex"/>
																					</target>
																					<parameters>
																						<castExpression targetType="System.String">
																							<variableReferenceExpression name="textString"/>
																						</castExpression>
																						<primitiveExpression>
																							<xsl:attribute name="value"><![CDATA[</\w+\s*>]]></xsl:attribute>
																						</primitiveExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<propertyReferenceExpression name="ContentType">
																						<variableReferenceExpression name="f"/>
																					</propertyReferenceExpression>
																					<primitiveExpression value="text/xml"/>
																				</assignStatement>
																			</trueStatements>
																			<falseStatements>
																				<assignStatement>
																					<propertyReferenceExpression name="ContentType">
																						<variableReferenceExpression name="f"/>
																					</propertyReferenceExpression>
																					<primitiveExpression value="text/plain"/>
																				</assignStatement>
																			</falseStatements>
																		</conditionStatement>
																	</trueStatements>
																</conditionStatement>
																<assignStatement>
																	<propertyReferenceExpression name="Data">
																		<variableReferenceExpression name="f"/>
																	</propertyReferenceExpression>
																	<methodInvokeExpression methodName="GetBytes">
																		<target>
																			<propertyReferenceExpression name="UTF8">
																				<typeReferenceExpression type="Encoding"/>
																			</propertyReferenceExpression>
																		</target>
																		<parameters>
																			<castExpression targetType="System.String">
																				<variableReferenceExpression name="textString"/>
																			</castExpression>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
															</falseStatements>
														</conditionStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<variableReferenceExpression name="result"/>
															</target>
															<parameters>
																<variableReferenceExpression name="f"/>
															</parameters>
														</methodInvokeExpression>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<propertyReferenceExpression name="Count">
																		<variableReferenceExpression name="result"/>
																	</propertyReferenceExpression>
																	<argumentReferenceExpression name="maxCount"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<breakStatement/>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</whileStatement>
										<methodInvokeExpression methodName="Close">
											<target>
												<variableReferenceExpression name="reader"/>
											</target>
										</methodInvokeExpression>
									</statements>
									<finally>
										<methodInvokeExpression methodName="RevokeFullAccess">
											<target>
												<typeReferenceExpression type="Controller"/>
											</target>
											<parameters>
												<variableReferenceExpression name="access"/>
											</parameters>
										</methodInvokeExpression>
									</finally>
								</tryStatement>
								<foreachStatement>
									<variable type="System.String" name="blobKey"/>
									<target>
										<propertyReferenceExpression name="Keys">
											<variableReferenceExpression name="blobsToResolve"/>
										</propertyReferenceExpression>
									</target>
									<statements>
										<variableDeclarationStatement type="SiteContentFile" name="f">
											<init>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="blobsToResolve"/>
													</target>
													<indices>
														<variableReferenceExpression name="blobKey"/>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<comment>download blob content</comment>
										<tryStatement>
											<statements>
												<assignStatement>
													<variableReferenceExpression name="access"/>
													<methodInvokeExpression methodName="GrantFullAccess">
														<target>
															<typeReferenceExpression type="Controller"/>
														</target>
														<parameters>
															<primitiveExpression value="{$SiteContentTableName}"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<tryStatement>
													<statements>
														<assignStatement>
															<propertyReferenceExpression name="Data">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
															<methodInvokeExpression methodName="Read">
																<target>
																	<typeReferenceExpression type="Blob"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="blobKey"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</statements>
													<finally>
														<methodInvokeExpression methodName="RevokeFullAccess">
															<target>
																<typeReferenceExpression type="Controller"/>
															</target>
															<parameters>
																<variableReferenceExpression name="access"/>
															</parameters>
														</methodInvokeExpression>
													</finally>
												</tryStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="GreaterThan">
															<propertyReferenceExpression name="CacheDuration">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
															<primitiveExpression value="0"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="Add">
															<target>
																<propertyReferenceExpression name="Cache">
																	<propertyReferenceExpression name="Current">
																		<typeReferenceExpression type="HttpContext"/>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<variableReferenceExpression name="blobKey"/>
																<propertyReferenceExpression name="Data">
																	<variableReferenceExpression name="f"/>
																</propertyReferenceExpression>
																<primitiveExpression value="null"/>
																<methodInvokeExpression methodName="AddSeconds">
																	<target>
																		<propertyReferenceExpression name="Now">
																			<typeReferenceExpression type="DateTime"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<propertyReferenceExpression name="CacheDuration">
																			<variableReferenceExpression name="f"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
																<propertyReferenceExpression name="NoSlidingExpiration">
																	<typeReferenceExpression type="Cache"/>
																</propertyReferenceExpression>
																<propertyReferenceExpression name="Normal">
																	<typeReferenceExpression type="CacheItemPriority"/>
																</propertyReferenceExpression>
																<primitiveExpression value="null"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</statements>
											<catch exceptionType="Exception" localName="ex">
												<assignStatement>
													<propertyReferenceExpression name="Error">
														<variableReferenceExpression name="f"/>
													</propertyReferenceExpression>
													<propertyReferenceExpression name="Message">
														<variableReferenceExpression name="ex"/>
													</propertyReferenceExpression>
												</assignStatement>
											</catch>
										</tryStatement>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property SystemResourceRegex -->
						<memberField type="Regex" name="SystemResourceRegex">
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[~/((sys/)|(views/)|(controllers/)|(permissions/)|(reports/)|((site|touch\-settings|acl)\.\w+))]]></xsl:attribute>
										</primitiveExpression>
										<propertyReferenceExpression name="IgnoreCase">
											<typeReferenceExpression type="RegexOptions"/>
										</propertyReferenceExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- method IsSystemResource(HttpRequest) -->
						<memberMethod returnType="System.Boolean" name="IsSystemResource">
							<attributes public="true"/>
							<parameters>
								<parameter type="HttpRequest" name="request"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="IsMatch">
										<target>
											<variableReferenceExpression name="SystemResourceRegex"/>
										</target>
										<parameters>
											<propertyReferenceExpression name="AppRelativeCurrentExecutionFilePath">
												<argumentReferenceExpression name="request"/>
											</propertyReferenceExpression>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method AddAscripts() -->
						<memberMethod returnType="System.String" name="AddScripts">
							<attributes public="true"/>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="Count">
												<propertyReferenceExpression name="Addons"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<stringEmptyExpression/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="StringBuilder" name="sb">
									<init>
										<objectCreateExpression type="StringBuilder"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="System.Object" name="addon"/>
									<target>
										<propertyReferenceExpression name="Addons"/>
									</target>
									<statements>
										<methodInvokeExpression methodName="Append">
											<target>
												<variableReferenceExpression name="sb"/>
											</target>
											<parameters>
												<castExpression targetType="System.String">
													<methodInvokeExpression methodName="Invoke">
														<target>
															<methodInvokeExpression methodName="GetMethod">
																<target>
																	<methodInvokeExpression methodName="GetType">
																		<target>
																			<variableReferenceExpression name="addon"/>
																		</target>
																	</methodInvokeExpression>
																</target>
																<parameters>
																	<primitiveExpression value="Script"/>
																</parameters>
															</methodInvokeExpression>
														</target>
														<parameters>
															<variableReferenceExpression name="addon"/>
															<primitiveExpression value="null"/>
														</parameters>
													</methodInvokeExpression>
												</castExpression>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ToString">
										<target>
											<variableReferenceExpression name="sb"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method AddStyleSheets() -->
						<memberMethod returnType="System.String" name="AddStyleSheets">
							<attributes public="true"/>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="Count">
												<propertyReferenceExpression name="Addons"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<stringEmptyExpression/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="StringBuilder" name="sb">
									<init>
										<objectCreateExpression type="StringBuilder"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="System.Object" name="addon"/>
									<target>
										<propertyReferenceExpression name="Addons"/>
									</target>
									<statements>
										<methodInvokeExpression methodName="Append">
											<target>
												<variableReferenceExpression name="sb"/>
											</target>
											<parameters>
												<castExpression targetType="System.String">
													<methodInvokeExpression methodName="Invoke">
														<target>
															<methodInvokeExpression methodName="GetMethod">
																<target>
																	<methodInvokeExpression methodName="GetType">
																		<target>
																			<variableReferenceExpression name="addon"/>
																		</target>
																	</methodInvokeExpression>
																</target>
																<parameters>
																	<primitiveExpression value="StyleSheet"/>
																</parameters>
															</methodInvokeExpression>
														</target>
														<parameters>
															<variableReferenceExpression name="addon"/>
															<primitiveExpression value="null"/>
														</parameters>
													</methodInvokeExpression>
												</castExpression>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ToString">
										<target>
											<variableReferenceExpression name="sb"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method LoadContent(HttpRequest, HttpResponse, SortedDictionary<string, string>) -->
						<memberMethod name="LoadContent">
							<attributes public="true"/>
							<parameters>
								<parameter type="HttpRequest" name="request"/>
								<parameter type="HttpResponse" name="response"/>
								<parameter type="SortedDictionary" name="content">
									<typeArguments>
										<typeReference type="System.String"/>
										<typeReference type="System.String"/>
									</typeArguments>
								</parameter>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="IsSystemResource">
											<parameters>
												<argumentReferenceExpression name="request"/>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement/>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="LocalPath">
												<propertyReferenceExpression name="Url">
													<argumentReferenceExpression name="request"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
											<primitiveExpression value="/js/daf/add.min.js"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="SetExpires">
											<target>
												<propertyReferenceExpression name="Cache">
													<argumentReferenceExpression name="response"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<methodInvokeExpression methodName="AddMonths">
													<target>
														<propertyReferenceExpression name="Now">
															<typeReferenceExpression type="DateTime"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<primitiveExpression value="1"/>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="SetCacheability">
											<target>
												<propertyReferenceExpression name="Cache">
													<argumentReferenceExpression name="response"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<propertyReferenceExpression name="Public">
													<typeReferenceExpression type="HttpCacheability"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
										<assignStatement>
											<propertyReferenceExpression name="ContentType">
												<argumentReferenceExpression name="response"/>
											</propertyReferenceExpression>
											<primitiveExpression value="text/javascript"/>
										</assignStatement>
										<methodInvokeExpression methodName="Write">
											<target>
												<argumentReferenceExpression name="response"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="AddScripts"/>
											</parameters>
										</methodInvokeExpression>
										<tryStatement>
											<statements>
												<methodInvokeExpression methodName="Flush">
													<target>
														<argumentReferenceExpression name="response"/>
													</target>
												</methodInvokeExpression>
											</statements>
											<catch exceptionType="Exception"></catch>
										</tryStatement>
										<methodInvokeExpression methodName="End">
											<target>
												<argumentReferenceExpression name="response"/>
											</target>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="LocalPath">
												<propertyReferenceExpression name="Url">
													<argumentReferenceExpression name="request"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
											<primitiveExpression value="/css/daf/add.min.css"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="SetExpires">
											<target>
												<propertyReferenceExpression name="Cache">
													<argumentReferenceExpression name="response"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<methodInvokeExpression methodName="AddMonths">
													<target>
														<propertyReferenceExpression name="Now">
															<typeReferenceExpression type="DateTime"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<primitiveExpression value="1"/>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="SetCacheability">
											<target>
												<propertyReferenceExpression name="Cache">
													<argumentReferenceExpression name="response"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<propertyReferenceExpression name="Public">
													<typeReferenceExpression type="HttpCacheability"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
										<assignStatement>
											<propertyReferenceExpression name="ContentType">
												<argumentReferenceExpression name="response"/>
											</propertyReferenceExpression>
											<primitiveExpression value="text/css"/>
										</assignStatement>
										<methodInvokeExpression methodName="Write">
											<target>
												<argumentReferenceExpression name="response"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="AddStyleSheets"/>
											</parameters>
										</methodInvokeExpression>
										<tryStatement>
											<statements>
												<methodInvokeExpression methodName="Flush">
													<target>
														<argumentReferenceExpression name="response"/>
													</target>
												</methodInvokeExpression>
											</statements>
											<catch exceptionType="Exception"></catch>
										</tryStatement>
										<methodInvokeExpression methodName="End">
											<target>
												<argumentReferenceExpression name="response"/>
											</target>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="System.String" name="text">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Boolean" name="tryFileSystem">
									<init>
										<primitiveExpression value="true"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable name="addon"/>
									<target>
										<propertyReferenceExpression name="Addons"/>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="Not">
													<methodInvokeExpression methodName="Equals">
														<target>
															<propertyReferenceExpression name="Name">
																<methodInvokeExpression methodName="GetType">
																	<target>
																		<variableReferenceExpression name="addon"/>
																	</target>
																</methodInvokeExpression>
															</propertyReferenceExpression>
														</target>
														<parameters>
															<primitiveExpression value="OfflineSync"/>
														</parameters>
													</methodInvokeExpression>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="text"/>
													<castExpression targetType="System.String">
														<methodInvokeExpression methodName="Invoke">
															<target>
																<methodInvokeExpression methodName="GetMethod">
																	<target>
																		<methodInvokeExpression methodName="GetType">
																			<target>
																				<variableReferenceExpression name="addon"/>
																			</target>
																		</methodInvokeExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="Uri"/>
																	</parameters>
																</methodInvokeExpression>
															</target>
															<parameters>
																<variableReferenceExpression name="addon"/>
																<arrayCreateExpression>
																	<createType type="System.Object"/>
																	<initializers>
																		<propertyReferenceExpression name="Current"/>
																	</initializers>
																</arrayCreateExpression>
															</parameters>
														</methodInvokeExpression>
													</castExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNotNullOrEmpty">
															<variableReferenceExpression name="text"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="tryFileSystem"/>
															<primitiveExpression value="false"/>
														</assignStatement>
														<breakStatement/>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<propertyReferenceExpression name="IsSiteContentEnabled"/>
											<variableReferenceExpression name="tryFileSystem"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="System.String" name="fileName">
											<init>
												<methodInvokeExpression methodName="UrlDecode">
													<target>
														<typeReferenceExpression type="HttpUtility"/>
													</target>
													<parameters>
														<arrayIndexerExpression>
															<target>
																<propertyReferenceExpression name="Segments">
																	<propertyReferenceExpression name="Url">
																		<argumentReferenceExpression name="request"/>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</target>
															<indices>
																<binaryOperatorExpression operator="Subtract">
																	<propertyReferenceExpression name="Length">
																		<propertyReferenceExpression name="Segments">
																			<propertyReferenceExpression name="Url">
																				<argumentReferenceExpression name="request"/>
																			</propertyReferenceExpression>
																		</propertyReferenceExpression>
																	</propertyReferenceExpression>
																	<primitiveExpression value="1"/>
																</binaryOperatorExpression>
															</indices>
														</arrayIndexerExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.String" name="path">
											<init>
												<methodInvokeExpression methodName="Substring">
													<target>
														<propertyReferenceExpression name="CurrentExecutionFilePath">
															<argumentReferenceExpression name="request"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<propertyReferenceExpression name="Length">
															<propertyReferenceExpression name="ApplicationPath">
																<argumentReferenceExpression name="request"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="ValueEquality">
														<variableReferenceExpression name="fileName"/>
														<primitiveExpression value="/"/>
													</binaryOperatorExpression>
													<unaryOperatorExpression operator="IsNullOrEmpty">
														<variableReferenceExpression name="path"/>
													</unaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="fileName"/>
													<primitiveExpression value="index"/>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="IsNotNullOrEmpty">
															<variableReferenceExpression name="path"/>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="path"/>
															<methodInvokeExpression methodName="Substring">
																<target>
																	<variableReferenceExpression name="path"/>
																</target>
																<parameters>
																	<primitiveExpression value="0"/>
																	<binaryOperatorExpression operator="Subtract">
																		<propertyReferenceExpression name="Length">
																			<variableReferenceExpression name="path"/>
																		</propertyReferenceExpression>
																		<propertyReferenceExpression name="Length">
																			<variableReferenceExpression name="fileName"/>
																		</propertyReferenceExpression>
																	</binaryOperatorExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="EndsWith">
																	<target>
																		<variableReferenceExpression name="path"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="/"/>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="path"/>
																	<methodInvokeExpression methodName="Substring">
																		<target>
																			<variableReferenceExpression name="path"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="0"/>
																			<binaryOperatorExpression operator="Subtract">
																				<propertyReferenceExpression name="Length">
																					<variableReferenceExpression name="path"/>
																				</propertyReferenceExpression>
																				<primitiveExpression value="1"/>
																			</binaryOperatorExpression>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNullOrEmpty">
													<variableReferenceExpression name="path"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="path"/>
													<primitiveExpression value="null"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement type="SiteContentFileList" name="files">
											<init>
												<methodInvokeExpression methodName="ReadSiteContent">
													<parameters>
														<variableReferenceExpression name="path"/>
														<variableReferenceExpression name="fileName"/>
														<primitiveExpression value="1"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression  operator="GreaterThan">
													<propertyReferenceExpression name="Count">
														<variableReferenceExpression name="files"/>
													</propertyReferenceExpression>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="SiteContentFile" name="f">
													<init>
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="files"/>
															</target>
															<indices>
																<primitiveExpression value="0"/>
															</indices>
														</arrayIndexerExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="ContentType">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
															<primitiveExpression value="text/html"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="text"/>
															<propertyReferenceExpression name="Text">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
														</assignStatement>
														<assignStatement>
															<variableReferenceExpression name="tryFileSystem"/>
															<primitiveExpression value="false"/>
														</assignStatement>
													</trueStatements>
													<falseStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="GreaterThan">
																	<propertyReferenceExpression name="CacheDuration">
																		<variableReferenceExpression name="f"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="0"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement type="DateTime" name="expires">
																	<init>
																		<methodInvokeExpression methodName="AddSeconds">
																			<target>
																				<propertyReferenceExpression name="Now">
																					<typeReferenceExpression type="DateTime"/>
																				</propertyReferenceExpression>
																			</target>
																			<parameters>
																				<propertyReferenceExpression name="CacheDuration">
																					<variableReferenceExpression name="f"/>
																				</propertyReferenceExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</init>
																</variableDeclarationStatement>
																<methodInvokeExpression methodName="SetExpires">
																	<target>
																		<propertyReferenceExpression name="Cache">
																			<argumentReferenceExpression name="response"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="expires"/>
																	</parameters>
																</methodInvokeExpression>
																<methodInvokeExpression methodName="SetCacheability">
																	<target>
																		<propertyReferenceExpression name="Cache">
																			<argumentReferenceExpression name="response"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<propertyReferenceExpression name="CacheLocation">
																			<variableReferenceExpression name="f"/>
																		</propertyReferenceExpression>
																	</parameters>
																</methodInvokeExpression>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityInequality">
																			<propertyReferenceExpression name="CacheVaryByParams">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<foreachStatement>
																			<variable type="System.String" name="header"/>
																			<target>
																				<propertyReferenceExpression name="CacheVaryByParams">
																					<variableReferenceExpression name="f"/>
																				</propertyReferenceExpression>
																			</target>
																			<statements>
																				<assignStatement>
																					<arrayIndexerExpression>
																						<target>
																							<propertyReferenceExpression name="VaryByParams">
																								<propertyReferenceExpression name="Cache">
																									<argumentReferenceExpression name="response"/>
																								</propertyReferenceExpression>
																							</propertyReferenceExpression>
																						</target>
																						<indices>
																							<variableReferenceExpression name="header"/>
																						</indices>
																					</arrayIndexerExpression>
																					<primitiveExpression value="true"/>
																				</assignStatement>
																			</statements>
																		</foreachStatement>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<binaryOperatorExpression operator="IdentityInequality">
																			<propertyReferenceExpression name="CacheVaryByHeaders">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<foreachStatement>
																			<variable type="System.String" name="header"/>
																			<target>
																				<propertyReferenceExpression name="CacheVaryByHeaders">
																					<variableReferenceExpression name="f"/>
																				</propertyReferenceExpression>
																			</target>
																			<statements>
																				<assignStatement>
																					<arrayIndexerExpression>
																						<target>
																							<propertyReferenceExpression name="VaryByHeaders">
																								<propertyReferenceExpression name="Cache">
																									<argumentReferenceExpression name="response"/>
																								</propertyReferenceExpression>
																							</propertyReferenceExpression>
																						</target>
																						<indices>
																							<variableReferenceExpression name="header"/>
																						</indices>
																					</arrayIndexerExpression>
																					<primitiveExpression value="true"/>
																				</assignStatement>
																			</statements>
																		</foreachStatement>
																	</trueStatements>
																</conditionStatement>
																<conditionStatement>
																	<condition>
																		<propertyReferenceExpression name="CacheNoStore">
																			<variableReferenceExpression name="f"/>
																		</propertyReferenceExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="SetNoStore">
																			<target>
																				<propertyReferenceExpression name="Cache">
																					<argumentReferenceExpression name="response"/>
																				</propertyReferenceExpression>
																			</target>
																		</methodInvokeExpression>
																	</trueStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<propertyReferenceExpression name="ContentType">
																<argumentReferenceExpression name="response"/>
															</propertyReferenceExpression>
															<propertyReferenceExpression name="ContentType">
																<variableReferenceExpression name="f"/>
															</propertyReferenceExpression>
														</assignStatement>
														<methodInvokeExpression methodName="AppendHeader">
															<target>
																<argumentReferenceExpression name="response"/>
															</target>
															<parameters>
																<primitiveExpression value="Content-Disposition"/>
																<binaryOperatorExpression operator="Add">
																	<primitiveExpression value="filename="/>
																	<methodInvokeExpression methodName="UrlEncode">
																		<target>
																			<typeReferenceExpression type="HttpUtility"/>
																		</target>
																		<parameters>
																			<propertyReferenceExpression name="PhysicalName">
																				<variableReferenceExpression name="f"/>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</binaryOperatorExpression>
															</parameters>
														</methodInvokeExpression>
														<methodInvokeExpression methodName="Write">
															<target>
																<propertyReferenceExpression name="OutputStream">
																	<argumentReferenceExpression name="response"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<propertyReferenceExpression name="Data">
																	<variableReferenceExpression name="f"/>
																</propertyReferenceExpression>
																<primitiveExpression value="0"/>
																<propertyReferenceExpression name="Length">
																	<propertyReferenceExpression name="Data">
																		<variableReferenceExpression name="f"/>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
														<tryStatement>
															<statements>
																<methodInvokeExpression methodName="Flush">
																	<target>
																		<argumentReferenceExpression name="response"/>
																	</target>
																</methodInvokeExpression>
															</statements>
															<catch exceptionType="Exception">
															</catch>
														</tryStatement>
														<methodInvokeExpression methodName="End">
															<target>
																<variableReferenceExpression name="response"/>
															</target>
														</methodInvokeExpression>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<variableReferenceExpression name="tryFileSystem"/>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="System.String" name="filePath">
											<init>
												<propertyReferenceExpression name="PhysicalPath">
													<argumentReferenceExpression name="request"/>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.String" name="fileExtension">
											<init>
												<methodInvokeExpression methodName="GetExtension">
													<target>
														<typeReferenceExpression type="Path"/>
													</target>
													<parameters>
														<variableReferenceExpression name="filePath"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="ValueInequality">
														<methodInvokeExpression methodName="ToLower">
															<target>
																<variableReferenceExpression name="fileExtension"/>
															</target>
														</methodInvokeExpression>
														<primitiveExpression value=".html"/>
													</binaryOperatorExpression>
													<methodInvokeExpression methodName="Exists">
														<target>
															<typeReferenceExpression type="File"/>
														</target>
														<parameters>
															<variableReferenceExpression name="filePath"/>
														</parameters>
													</methodInvokeExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="System.String" name="fileName">
													<init>
														<methodInvokeExpression methodName="GetFileName">
															<target>
																<typeReferenceExpression type="Path"/>
															</target>
															<parameters>
																<variableReferenceExpression name="filePath"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<methodInvokeExpression methodName="AppendHeader">
													<target>
														<variableReferenceExpression name="response"/>
													</target>
													<parameters>
														<primitiveExpression value="Content-Disposition"/>
														<binaryOperatorExpression operator="Add">
															<primitiveExpression value="filename="/>
															<methodInvokeExpression methodName="UrlEncode">
																<target>
																	<typeReferenceExpression type="HttpUtility"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="fileName"/>
																</parameters>
															</methodInvokeExpression>
														</binaryOperatorExpression>
													</parameters>
												</methodInvokeExpression>
												<variableDeclarationStatement name="cacheDuration">
													<init>
														<binaryOperatorExpression operator="Multiply">
															<binaryOperatorExpression operator="Multiply">
																<primitiveExpression value="60"/>
																<primitiveExpression value="60"/>
															</binaryOperatorExpression>
															<primitiveExpression value="24"/>
														</binaryOperatorExpression>
													</init>
												</variableDeclarationStatement>
												<xsl:if test="$TargetFramework != '3.5' and $TargetFramework != '4.0'">
													<assignStatement>
														<propertyReferenceExpression name="ContentType">
															<variableReferenceExpression name="response"/>
														</propertyReferenceExpression>
														<methodInvokeExpression methodName="GetMimeMapping">
															<target>
																<typeReferenceExpression type="MimeMapping"/>
															</target>
															<parameters>
																<variableReferenceExpression name="fileName"/>
															</parameters>
														</methodInvokeExpression>
													</assignStatement>
												</xsl:if>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="IsMatch">
															<target>
																<typeReferenceExpression type="Regex"/>
															</target>
															<parameters>
																<propertyReferenceExpression name="ContentType">
																	<argumentReferenceExpression name="response"/>
																</propertyReferenceExpression>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[^font/]]></xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="cacheDuration"/>
															<binaryOperatorExpression operator="Multiply">
																<variableReferenceExpression name="cacheDuration"/>
																<primitiveExpression value="365"/>
															</binaryOperatorExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<methodInvokeExpression methodName="SetCacheability">
													<target>
														<propertyReferenceExpression name="Cache">
															<variableReferenceExpression name="response"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<propertyReferenceExpression name="Public">
															<typeReferenceExpression type="HttpCacheability"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<methodInvokeExpression methodName="SetMaxAge">
													<target>
														<propertyReferenceExpression name="Cache">
															<variableReferenceExpression name="response"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<methodInvokeExpression methodName="FromSeconds">
															<target>
																<typeReferenceExpression type="TimeSpan"/>
															</target>
															<parameters>
																<variableReferenceExpression name="cacheDuration"/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
												<variableDeclarationStatement type="System.Byte[]" name="data">
													<init>
														<methodInvokeExpression methodName="ReadAllBytes">
															<target>
																<typeReferenceExpression type="File"/>
															</target>
															<parameters>
																<variableReferenceExpression name="filePath"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<methodInvokeExpression methodName="Write">
													<target>
														<propertyReferenceExpression name="OutputStream">
															<variableReferenceExpression name="response"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<variableReferenceExpression name="data"/>
														<primitiveExpression value="0"/>
														<propertyReferenceExpression name="Length">
															<variableReferenceExpression name="data"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
												<tryStatement>
													<statements>
														<methodInvokeExpression methodName="Flush">
															<target>
																<variableReferenceExpression name="response"/>
															</target>
														</methodInvokeExpression>
													</statements>
													<catch exceptionType="Exception"/>
												</tryStatement>
												<methodInvokeExpression methodName="End">
													<target>
														<variableReferenceExpression name="response"/>
													</target>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<variableReferenceExpression name="fileExtension"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="filePath"/>
													<methodInvokeExpression methodName="Combine">
														<target>
															<typeReferenceExpression type="Path"/>
														</target>
														<parameters>
															<methodInvokeExpression methodName="GetDirectoryName">
																<target>
																	<typeReferenceExpression type="Path"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="filePath"/>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="GetFileNameWithoutExtension">
																<target>
																	<typeReferenceExpression type="Path"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="filePath"/>
																</parameters>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<variableReferenceExpression name="filePath"/>
											<binaryOperatorExpression operator="Add">
												<variableReferenceExpression name="filePath"/>
												<primitiveExpression value=".html"/>
											</binaryOperatorExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="Exists">
													<target>
														<typeReferenceExpression type="File"/>
													</target>
													<parameters>
														<variableReferenceExpression name="filePath"/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="text"/>
													<methodInvokeExpression methodName="ReadAllText">
														<target>
															<typeReferenceExpression type="File"/>
														</target>
														<parameters>
															<variableReferenceExpression name="filePath"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="Contains">
															<target>
																<methodInvokeExpression methodName="GetFileNameWithoutExtension">
																	<target>
																		<typeReferenceExpression type="Path"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="filePath"/>
																	</parameters>
																</methodInvokeExpression>
															</target>
															<parameters>
																<primitiveExpression value="-"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="filePath"/>
															<methodInvokeExpression methodName="Combine">
																<target>
																	<typeReferenceExpression type="Path"/>
																</target>
																<parameters>
																	<methodInvokeExpression methodName="GetDirectoryName">
																		<target>
																			<typeReferenceExpression type="Path"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="filePath"/>
																		</parameters>
																	</methodInvokeExpression>
																	<methodInvokeExpression methodName="Replace">
																		<target>
																			<methodInvokeExpression methodName="GetFileName">
																				<target>
																					<typeReferenceExpression type="Path"/>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="filePath"/>
																				</parameters>
																			</methodInvokeExpression>
																		</target>
																		<parameters>
																			<primitiveExpression value="-"/>
																			<stringEmptyExpression/>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="Exists">
																	<target>
																		<typeReferenceExpression type="File"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="filePath"/>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="text"/>
																	<methodInvokeExpression methodName="ReadAllText">
																		<target>
																			<typeReferenceExpression type="File"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="filePath"/>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="text"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="text"/>
													<methodInvokeExpression methodName="Replace">
														<target>
															<typeReferenceExpression type="Localizer"/>
														</target>
														<parameters>
															<primitiveExpression value="Pages"/>
															<variableReferenceExpression name="filePath"/>
															<variableReferenceExpression name="text"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="IsMatch">
															<target>
																<typeReferenceExpression type="Regex"/>
															</target>
															<parameters>
																<variableReferenceExpression name="text"/>
																<primitiveExpression>
																	<xsl:attribute name="value"><![CDATA[<body.+?data-ui-framework="none".*?>]]></xsl:attribute>
																</primitiveExpression>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement name="scriptBuilder">
															<init>
																<objectCreateExpression type="StringBuilder"/>
															</init>
														</variableDeclarationStatement>
														<methodInvokeExpression methodName="Add">
															<target>
																<propertyReferenceExpression name="Items">
																	<propertyReferenceExpression name="Current">
																		<typeReferenceExpression type="HttpContext"/>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<primitiveExpression value="ui-framework-none"/>
																<primitiveExpression value="true"/>
															</parameters>
														</methodInvokeExpression>
														<variableDeclarationStatement name="scripts">
															<init>
																<methodInvokeExpression methodName="StandardScripts">
																	<target>
																		<typeReferenceExpression type="AquariumExtenderBase"/>
																	</target>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<methodInvokeExpression methodName="Remove">
															<target>
																<propertyReferenceExpression name="Items">
																	<propertyReferenceExpression name="Current">
																		<typeReferenceExpression type="HttpContext"/>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<primitiveExpression value="ui-framework-none"/>
															</parameters>
														</methodInvokeExpression>
														<foreachStatement>
															<variable name="scriptUrl"/>
															<target>
																<variableReferenceExpression name="scripts"/>
															</target>
															<statements>
																<variableDeclarationStatement name="url">
																	<init>
																		<propertyReferenceExpression name="Path">
																			<variableReferenceExpression name="scriptUrl"/>
																		</propertyReferenceExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<methodInvokeExpression methodName="Contains">
																			<target>
																				<variableReferenceExpression name="url"/>
																			</target>
																			<parameters>
																				<primitiveExpression>
																					<xsl:attribute name="value"><![CDATA[/combined-]]></xsl:attribute>
																				</primitiveExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="url"/>
																			<methodInvokeExpression methodName="Replace">
																				<target>
																					<typeReferenceExpression type="Regex"/>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="url"/>
																					<primitiveExpression>
																						<xsl:attribute name="value"><![CDATA[\?.+$]]></xsl:attribute>
																					</primitiveExpression>
																					<primitiveExpression>
																						<xsl:attribute name="value"><![CDATA[?ui-framework=none]]></xsl:attribute>
																					</primitiveExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
																<methodInvokeExpression methodName="AppendFormat">
																	<target>
																		<variableReferenceExpression name="scriptBuilder"/>
																	</target>
																	<parameters>
																		<primitiveExpression>
																			<xsl:attribute name="value"><![CDATA[<script src="{0}"></script>]]>&#10;&#9;</xsl:attribute>
																		</primitiveExpression>
																		<variableReferenceExpression name="url"/>
																	</parameters>
																</methodInvokeExpression>
															</statements>
														</foreachStatement>
														<assignStatement>
															<variableReferenceExpression name="text"/>
															<methodInvokeExpression methodName="Replace">
																<target>
																	<typeReferenceExpression type="Regex"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="text"/>
																	<primitiveExpression>
																		<xsl:attribute name="value"><![CDATA[(<body.+?>\s*)]]></xsl:attribute>
																	</primitiveExpression>
																	<binaryOperatorExpression operator="Add">
																		<primitiveExpression value="$1"/>
																		<methodInvokeExpression methodName="ToString">
																			<target>
																				<variableReferenceExpression name="scriptBuilder"/>
																			</target>
																		</methodInvokeExpression>
																	</binaryOperatorExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<propertyReferenceExpression name="Items">
																		<propertyReferenceExpression name="Current">
																			<typeReferenceExpression type="HttpContext"/>
																		</propertyReferenceExpression>
																	</propertyReferenceExpression>
																</target>
																<indices>
																	<primitiveExpression value="ui-framework-none.text"/>
																</indices>
															</arrayIndexerExpression>
															<variableReferenceExpression name="text"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="text"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="altText">
											<init>
												<methodInvokeExpression methodName="LoadContent">
													<target>
														<typeReferenceExpression type="RESTfulResource"/>
													</target>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="altText"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="text"/>
													<variableReferenceExpression name="altText"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<variableReferenceExpression name="text"/>
											<methodInvokeExpression methodName="Replace">
												<target>
													<typeReferenceExpression type="Regex"/>
												</target>
												<parameters>
													<variableReferenceExpression name="text"/>
													<primitiveExpression>
														<xsl:attribute name="value"><![CDATA[<!--[\s\S]+?-->\s*]]></xsl:attribute>
													</primitiveExpression>
													<stringEmptyExpression/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="content"/>
												</target>
												<indices>
													<primitiveExpression value="File"/>
												</indices>
											</arrayIndexerExpression>
											<variableReferenceExpression name="text"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>

							</statements>
						</memberMethod>
						<!-- method CreateStandardMembershipAccounts() -->
						<memberMethod name="CreateStandardMembershipAccounts">
							<attributes public="true"/>
							<statements>
								<xsl:if test="a:project/a:membership[@enabled='true' or @customSecurity='true' and codeontime:OptionValue(a:config, 'CreateStandardUserAccounts', 'true') != 'false']">
									<comment>Create a separate code file with a definition of the partial class ApplicationServices overriding</comment>
									<comment>this method to prevent automatic registration of 'admin' and 'user'. Do not change this file directly.</comment>
									<methodInvokeExpression methodName="RegisterStandardMembershipAccounts"/>
								</xsl:if>
							</statements>
						</memberMethod>
						<!-- method RequiresAuthentication(HttpRequest) -->
						<memberMethod returnType="System.Boolean" name="RequiresAuthentication">
							<attributes public="true"/>
							<parameters>
								<parameter type="HttpRequest" name="request"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="EndsWith">
											<target>
												<propertyReferenceExpression name="Path">
													<argumentReferenceExpression name="request"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="Export.ashx"/>
												<propertyReferenceExpression name="CurrentCultureIgnoreCase">
													<typeReferenceExpression type="StringComparison"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="System.String" name="formToken">
											<init>
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Params">
															<propertyReferenceExpression name="Request">
																<propertyReferenceExpression name="Current">
																	<typeReferenceExpression type="HttpContext"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="t"/>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanOr">
													<unaryOperatorExpression operator="IsNullOrEmpty">
														<variableReferenceExpression name="formToken"/>
													</unaryOperatorExpression>
													<unaryOperatorExpression operator="Not">
														<methodInvokeExpression methodName="ValidateToken">
															<parameters>
																<variableReferenceExpression name="formToken"/>
															</parameters>
														</methodInvokeExpression>
													</unaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="true"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<primitiveExpression value="false"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method AuthenticateRequest(HttpContext context) -->
						<memberMethod returnType="System.Boolean" name="AuthenticateRequest">
							<attributes public="true"/>
							<parameters>
								<parameter type="HttpContext" name="context"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<primitiveExpression value="false"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method RedirectToLoginPage()-->
						<memberMethod name="RedirectToLoginPage">
							<attributes public="true"/>
							<statements>
								<xsl:if test="$TargetFramework!='3.5' and ($MembershipEnabled='true' or $CustomSecurity='true')">
									<variableDeclarationStatement type="OAuthHandler" name="handler">
										<init>
											<methodInvokeExpression methodName="GetActiveHandler">
												<target>
													<typeReferenceExpression type="OAuthHandlerFactory"/>
												</target>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="IdentityInequality">
												<variableReferenceExpression name="handler"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<propertyReferenceExpression name="StartPage">
													<variableReferenceExpression name="handler"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="AbsolutePath">
													<propertyReferenceExpression name="Url">
														<propertyReferenceExpression name="Request">
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="HttpContext"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</assignStatement>
											<methodInvokeExpression methodName="RedirectToLoginPage">
												<target>
													<variableReferenceExpression name="handler"/>
												</target>
											</methodInvokeExpression>
											<methodReturnStatement/>
										</trueStatements>
									</conditionStatement>
								</xsl:if>
								<methodInvokeExpression methodName="RedirectToLoginPage">
									<target>
										<typeReferenceExpression type="FormsAuthentication"/>
									</target>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method SendCookie(HttpCookie, bool) -->
						<memberMethod name="SendCookie">
							<attributes family="true"/>
							<parameters>
								<parameter type="HttpCookie" name="cookie"/>
								<parameter type="System.Boolean" name="append"/>
							</parameters>
							<statements>
								<xsl:if test="$TargetFramework='4.7.2' or $TargetFramework = '4.8'">
									<variableDeclarationStatement name="section">
										<init>
											<castExpression targetType="HttpCookiesSection">
												<methodInvokeExpression methodName="GetSection">
													<target>
														<typeReferenceExpression type="WebConfigurationManager"/>
													</target>
													<parameters>
														<primitiveExpression value="system.web/httpCookies"/>
													</parameters>
												</methodInvokeExpression>
											</castExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="IdentityInequality">
												<variableReferenceExpression name="section"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<propertyReferenceExpression name="SameSite">
													<argumentReferenceExpression name="cookie"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="SameSite">
													<variableReferenceExpression name="section"/>
												</propertyReferenceExpression>
											</assignStatement>
										</trueStatements>
										<falseStatements>
											<assignStatement>
												<propertyReferenceExpression name="SameSite">
													<argumentReferenceExpression name="cookie"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="Strict">
													<typeReferenceExpression type="SameSiteMode"/>
												</propertyReferenceExpression>
											</assignStatement>
										</falseStatements>
									</conditionStatement>
								</xsl:if>
								<variableDeclarationStatement name="response">
									<init>
										<propertyReferenceExpression name="Response">
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<argumentReferenceExpression name="append"/>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="AppendCookie">
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<parameters>
												<argumentReferenceExpression name="cookie"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
									<falseStatements>
										<methodInvokeExpression methodName="SetCookie">
											<target>
												<variableReferenceExpression name="response"/>
											</target>
											<parameters>
												<argumentReferenceExpression name="cookie"/>
											</parameters>
										</methodInvokeExpression>
									</falseStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method UserThemes() -->
						<memberMethod returnType="JObject" name="UserThemes">
							<attributes public="true"/>
							<statements>
								<variableDeclarationStatement type="JObject" name="lists">
									<init>
										<objectCreateExpression type="JObject"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="JArray" name="themes">
									<init>
										<objectCreateExpression type="JArray"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="JArray" name="accents">
									<init>
										<objectCreateExpression type="JArray"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<variableReferenceExpression name="lists"/>
										</target>
										<indices>
											<primitiveExpression value="themes"/>
										</indices>
									</arrayIndexerExpression>
									<variableReferenceExpression name="themes"/>
								</assignStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<variableReferenceExpression name="lists"/>
										</target>
										<indices>
											<primitiveExpression value="accents"/>
										</indices>
									</arrayIndexerExpression>
									<variableReferenceExpression name="accents"/>
								</assignStatement>
								<variableDeclarationStatement type="System.String" name="themesPath">
									<init>
										<methodInvokeExpression methodName="MapPath">
											<target>
												<propertyReferenceExpression name="Server">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="~/css/themes"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="System.String" name="f"/>
									<target>
										<methodInvokeExpression methodName="GetFiles">
											<target>
												<typeReferenceExpression type="Directory"/>
											</target>
											<parameters>
												<variableReferenceExpression name="themesPath"/>
												<primitiveExpression value="touch-theme.*.json"/>
											</parameters>
										</methodInvokeExpression>
									</target>
									<statements>
										<variableDeclarationStatement type="JObject" name="theme">
											<init>
												<methodInvokeExpression methodName="Parse">
													<target>
														<typeReferenceExpression type="JObject"/>
													</target>
													<parameters>
														<methodInvokeExpression methodName="ReadAllText">
															<target>
																<typeReferenceExpression type="File"/>
															</target>
															<parameters>
																<variableReferenceExpression name="f"/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="JObject" name="t">
											<init>
												<objectCreateExpression type="JObject"/>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="t"/>
												</target>
												<indices>
													<primitiveExpression value="name"/>
												</indices>
											</arrayIndexerExpression>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="theme"/>
												</target>
												<indices>
													<primitiveExpression value="name"/>
												</indices>
											</arrayIndexerExpression>
										</assignStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="t"/>
												</target>
												<indices>
													<primitiveExpression value="color"/>
												</indices>
											</arrayIndexerExpression>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="theme"/>
												</target>
												<indices>
													<primitiveExpression value="color"/>
												</indices>
											</arrayIndexerExpression>
										</assignStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="themes"/>
											</target>
											<parameters>
												<variableReferenceExpression name="t"/>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</foreachStatement>
								<foreachStatement>
									<variable type="System.String" name="f"/>
									<target>
										<methodInvokeExpression methodName="GetFiles">
											<target>
												<typeReferenceExpression type="Directory"/>
											</target>
											<parameters>
												<variableReferenceExpression name="themesPath"/>
												<primitiveExpression value="touch-accent.*.json"/>
											</parameters>
										</methodInvokeExpression>
									</target>
									<statements>
										<variableDeclarationStatement type="JObject" name="accent">
											<init>
												<methodInvokeExpression methodName="Parse">
													<target>
														<typeReferenceExpression type="JObject"/>
													</target>
													<parameters>
														<methodInvokeExpression methodName="ReadAllText">
															<target>
																<typeReferenceExpression type="File"/>
															</target>
															<parameters>
																<variableReferenceExpression name="f"/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="JObject" name="a">
											<init>
												<objectCreateExpression type="JObject"/>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="a"/>
												</target>
												<indices>
													<primitiveExpression value="name"/>
												</indices>
											</arrayIndexerExpression>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="accent"/>
												</target>
												<indices>
													<primitiveExpression value="name"/>
												</indices>
											</arrayIndexerExpression>
										</assignStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="a"/>
												</target>
												<indices>
													<primitiveExpression value="color"/>
												</indices>
											</arrayIndexerExpression>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="accent"/>
												</target>
												<indices>
													<primitiveExpression value="color"/>
												</indices>
											</arrayIndexerExpression>
										</assignStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="accents"/>
											</target>
											<parameters>
												<variableReferenceExpression name="a"/>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="lists"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method UserSettings(Page)-->
						<memberMethod returnType="JObject" name="UserSettings">
							<attributes public="true"/>
							<parameters>
								<parameter type="Page" name="p"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="JObject" name="settings">
									<init>
										<objectCreateExpression type="JObject">
											<parameters>
												<propertyReferenceExpression name="DefaultSettings"/>
											</parameters>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<xsl:call-template name="InitializeSetting">
									<xsl:with-param name="Name" select="'membership'"/>
									<xsl:with-param name="DefaultValue">
										<objectCreateExpression type="JObject"/>
									</xsl:with-param>
								</xsl:call-template>
								<variableDeclarationStatement name="userKey">
									<init>
										<stringEmptyExpression/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="allow2FA">
									<init>
										<primitiveExpression value="false"/>
									</init>
								</variableDeclarationStatement>
								<xsl:choose>
									<xsl:when test="a:project/a:membership[@enabled='true' or @customSecurity='true']">
										<variableDeclarationStatement type="MembershipUser" name="user">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="IsAuthenticated">
													<propertyReferenceExpression name="Identity">
														<propertyReferenceExpression name="User">
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="HttpContext"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="user"/>
													<methodInvokeExpression methodName="GetUser">
														<target>
															<typeReferenceExpression type="Membership"/>
														</target>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="user"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="userKey"/>
													<convertExpression to="String">
														<propertyReferenceExpression name="ProviderUserKey">
															<variableReferenceExpression name="user"/>
														</propertyReferenceExpression>
													</convertExpression>
												</assignStatement>
												<xsl:if test="$TargetFramework!='3.5' and ($MembershipEnabled='true' or $CustomSecurity='true')">
													<assignStatement>
														<variableReferenceExpression name="allow2FA"/>
														<convertExpression to="Boolean">
															<methodInvokeExpression methodName="SettingsProperty">
																<parameters>
																	<primitiveExpression value="server.2FA.enabled"/>
																	<primitiveExpression value="true"/>
																</parameters>
															</methodInvokeExpression>
														</convertExpression>
													</assignStatement>
													<variableDeclarationStatement name="userAuthData">
														<init>
															<methodInvokeExpression methodName="UserAuthenticationData">
																<parameters>
																	<propertyReferenceExpression name="UserName">
																		<variableReferenceExpression name="user"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
														</init>
													</variableDeclarationStatement>
													<conditionStatement>
														<condition>
															<binaryOperatorExpression operator="IdentityInequality">
																<variableReferenceExpression name="userAuthData"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
														</condition>
														<trueStatements>
															<variableDeclarationStatement name="source">
																<init>
																	<arrayIndexerExpression>
																		<target>
																			<variableReferenceExpression name="userAuthData"/>
																		</target>
																		<indices>
																			<primitiveExpression value="Source"/>
																		</indices>
																	</arrayIndexerExpression>
																</init>
															</variableDeclarationStatement>
															<conditionStatement>
																<condition>
																	<binaryOperatorExpression operator="IdentityInequality">
																		<variableReferenceExpression name="source"/>
																		<primitiveExpression value="null"/>
																	</binaryOperatorExpression>
																</condition>
																<trueStatements>
																	<variableDeclarationStatement name="handler">
																		<init>
																			<methodInvokeExpression methodName="Create">
																				<target>
																					<typeReferenceExpression type="OAuthHandlerFactory"/>
																				</target>
																				<parameters>
																					<convertExpression to="String">
																						<variableReferenceExpression name="source"/>
																					</convertExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</init>
																	</variableDeclarationStatement>
																	<conditionStatement>
																		<condition>
																			<binaryOperatorExpression operator="IdentityInequality">
																				<variableReferenceExpression name="handler"/>
																				<primitiveExpression value="null"/>
																			</binaryOperatorExpression>
																		</condition>
																		<trueStatements>
																			<assignStatement>
																				<arrayIndexerExpression>
																					<target>
																						<arrayIndexerExpression>
																							<target>
																								<variableReferenceExpression name="settings"/>
																							</target>
																							<indices>
																								<primitiveExpression value="membership"/>
																							</indices>
																						</arrayIndexerExpression>
																					</target>
																					<indices>
																						<primitiveExpression value="profile"/>
																					</indices>
																				</arrayIndexerExpression>
																				<methodInvokeExpression methodName="GetUserProfile">
																					<target>
																						<variableReferenceExpression name="handler"/>
																					</target>
																				</methodInvokeExpression>
																			</assignStatement>
																		</trueStatements>
																	</conditionStatement>
																	<assignStatement>
																		<variableReferenceExpression name="allow2FA"/>
																		<primitiveExpression value="false"/>
																	</assignStatement>
																</trueStatements>
															</conditionStatement>
														</trueStatements>
													</conditionStatement>
												</xsl:if>
											</trueStatements>
										</conditionStatement>
									</xsl:when>
									<xsl:when test="a:project/a:membership[@activeDirectory='true']">
										<!-- userID not supported with Active Directory-->
									</xsl:when>
									<xsl:otherwise>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="settings"/>
														</target>
														<indices>
															<primitiveExpression value="membership"/>
														</indices>
													</arrayIndexerExpression>
												</target>
												<indices>
													<primitiveExpression value="enabled"/>
												</indices>
											</arrayIndexerExpression>
											<primitiveExpression value="false"/>
										</assignStatement>
									</xsl:otherwise>
								</xsl:choose>
								<conditionStatement>
									<condition>
										<variableReferenceExpression name="allow2FA"/>
									</condition>
									<trueStatements>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="settings"/>
														</target>
														<indices>
															<primitiveExpression value="membership"/>
														</indices>
													</arrayIndexerExpression>
												</target>
												<indices>
													<primitiveExpression value="2FA"/>
												</indices>
											</arrayIndexerExpression>
											<primitiveExpression value="true"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<convertExpression to="Boolean">
											<methodInvokeExpression methodName="SettingsProperty">
												<parameters>
													<primitiveExpression value="server.2FA.disableLoginPassword"/>
													<primitiveExpression value="false"/>
												</parameters>
											</methodInvokeExpression>
										</convertExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="settings"/>
														</target>
														<indices>
															<primitiveExpression value="membership"/>
														</indices>
													</arrayIndexerExpression>
												</target>
												<indices>
													<primitiveExpression value="disableLoginPassword"/>
												</indices>
											</arrayIndexerExpression>
											<primitiveExpression value="true"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<variableReferenceExpression name="settings"/>
										</target>
										<indices>
											<primitiveExpression value="appInfo"/>
										</indices>
									</arrayIndexerExpression>
									<methodInvokeExpression methodName="Join">
										<target>
											<typeReferenceExpression type="System.String"/>
										</target>
										<parameters>
											<primitiveExpression value="|"/>
											<arrayCreateExpression>
												<createType type="System.String"/>
												<initializers>
													<propertyReferenceExpression name="DisplayName"/>
													<propertyReferenceExpression name="Name">
														<propertyReferenceExpression name="Identity">
															<propertyReferenceExpression name="User">
																<propertyReferenceExpression name="Current">
																	<typeReferenceExpression type="HttpContext"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
													<variableReferenceExpression name="userKey"/>
												</initializers>
											</arrayCreateExpression>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<xsl:if test="$PageImplementation='html'">
									<conditionStatement>
										<condition>
											<propertyReferenceExpression name="IsContentEditor"/>
										</condition>
										<trueStatements>
											<assignStatement>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="settings"/>
													</target>
													<indices>
														<primitiveExpression value="siteContent"/>
													</indices>
												</arrayIndexerExpression>
												<methodInvokeExpression methodName="GetSiteContentControllerName"/>
											</assignStatement>
											<assignStatement>
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="settings"/>
													</target>
													<indices>
														<primitiveExpression value="siteContentPK"/>
													</indices>
												</arrayIndexerExpression>
												<methodInvokeExpression methodName="SiteContentFieldName">
													<parameters>
														<propertyReferenceExpression name="SiteContentId">
															<typeReferenceExpression type="SiteContentFields"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
								</xsl:if>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<argumentReferenceExpression name="p"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="settings"/>
												</target>
												<indices>
													<primitiveExpression value="rootUrl"/>
												</indices>
											</arrayIndexerExpression>
											<methodInvokeExpression methodName="ResolveUrl">
												<target>
													<argumentReferenceExpression name="p"/>
												</target>
												<parameters>
													<primitiveExpression value="~"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<arrayIndexerExpression>
												<target>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="settings"/>
														</target>
														<indices>
															<primitiveExpression value="ui"/>
														</indices>
													</arrayIndexerExpression>
												</target>
												<indices>
													<primitiveExpression value="theme"/>
												</indices>
											</arrayIndexerExpression>
										</target>
										<indices>
											<primitiveExpression value="name"/>
										</indices>
									</arrayIndexerExpression>
									<propertyReferenceExpression name="UserTheme"/>
								</assignStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<arrayIndexerExpression>
												<target>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="settings"/>
														</target>
														<indices>
															<primitiveExpression value="ui"/>
														</indices>
													</arrayIndexerExpression>
												</target>
												<indices>
													<primitiveExpression value="theme"/>
												</indices>
											</arrayIndexerExpression>
										</target>
										<indices>
											<primitiveExpression value="accent"/>
										</indices>
									</arrayIndexerExpression>
									<propertyReferenceExpression name="UserAccent"/>
								</assignStatement>
								<xsl:if test="a:project/@userInterface='Both'">
									<assignStatement>
										<arrayIndexerExpression>
											<target>
												<variableReferenceExpression name="settings"/>
											</target>
											<indices>
												<primitiveExpression value="defaultUI"/>
											</indices>
										</arrayIndexerExpression>
										<primitiveExpression>
											<xsl:attribute name="value">
												<xsl:choose>
													<xsl:when test="a:project/@userInterface='Both'">
														<xsl:text>TouchUI</xsl:text>
													</xsl:when>
													<xsl:otherwise>
														<xsl:value-of select="a:project/@userInterface"/>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:attribute>
										</primitiveExpression>
									</assignStatement>
								</xsl:if>
								<foreachStatement>
									<variable name="addon"/>
									<target>
										<propertyReferenceExpression name="Addons"/>
									</target>
									<statements>
										<methodInvokeExpression methodName="Invoke">
											<target>
												<methodInvokeExpression methodName="GetMethod">
													<target>
														<methodInvokeExpression methodName="GetType">
															<target>
																<variableReferenceExpression name="addon"/>
															</target>
														</methodInvokeExpression>
													</target>
													<parameters>
														<primitiveExpression value="Settings"/>
													</parameters>
												</methodInvokeExpression>
											</target>
											<parameters>
												<variableReferenceExpression name="addon"/>
												<arrayCreateExpression>
													<createType type="System.Object"/>
													<initializers>
														<variableReferenceExpression name="settings"/>
													</initializers>
												</arrayCreateExpression>
											</parameters>
										</methodInvokeExpression>

									</statements>
								</foreachStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="settings"/>
												</target>
												<indices>
													<primitiveExpression value="server"/>
												</indices>
											</arrayIndexerExpression>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="Remove">
											<target>
												<variableReferenceExpression name="settings"/>
											</target>
											<parameters>
												<primitiveExpression value="server"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="appState">
									<init>
										<castExpression targetType="JObject">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Items">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="AppState"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="appState"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="settings"/>
												</target>
												<indices>
													<primitiveExpression value="state"/>
												</indices>
											</arrayIndexerExpression>
											<variableReferenceExpression name="appState"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="settings"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method UserHomePageUrl() -->
						<memberMethod returnType="System.String" name="UserHomePageUrl">
							<attributes public="true" />
							<statements>
								<xsl:if test="$PageImplementation='html'">
									<conditionStatement>
										<condition>
											<propertyReferenceExpression name="IsSiteContentEnabled"/>
										</condition>
										<trueStatements>
											<variableDeclarationStatement type="SiteContentFile" name="index">
												<init>
													<methodInvokeExpression methodName="ReadSiteContent">
														<parameters>
															<primitiveExpression value="index"/>
														</parameters>
													</methodInvokeExpression>
												</init>
											</variableDeclarationStatement>
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="IdentityInequality">
														<variableReferenceExpression name="index"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<methodReturnStatement>
														<propertyReferenceExpression name="ApplicationPath">
															<propertyReferenceExpression name="Request">
																<propertyReferenceExpression name="Current">
																	<typeReferenceExpression type="HttpContext"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</methodReturnStatement>
												</trueStatements>
											</conditionStatement>
										</trueStatements>
									</conditionStatement>
								</xsl:if>
								<methodReturnStatement>
									<primitiveExpression>
										<xsl:attribute name="value">
											<xsl:choose>
												<xsl:when test="$PageImplementation='html'">
													<xsl:text>~/pages/home</xsl:text>
												</xsl:when>
												<xsl:otherwise>
													<xsl:text>~/Pages/Home.aspx</xsl:text>
												</xsl:otherwise>
											</xsl:choose>
										</xsl:attribute>
									</primitiveExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method UserPictureString-->
						<memberMethod returnType="System.String" name="UserPictureString">
							<attributes public="true"/>
							<parameters>
								<parameter type="MembershipUser" name="user"/>
							</parameters>
							<statements>
								<xsl:if test="$TargetFramework!='3.5' and $TargetFramework!='4.0'">
									<tryStatement>
										<statements>
											<variableDeclarationStatement type="Image" name="img">
												<init>
													<methodInvokeExpression methodName="UserPictureImage">
														<parameters>
															<variableReferenceExpression name="user"/>
														</parameters>
													</methodInvokeExpression>
												</init>
											</variableDeclarationStatement>
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="IdentityEquality">
														<variableReferenceExpression name="img"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<assignStatement>
														<variableReferenceExpression name="img"/>
														<methodInvokeExpression methodName="UserPictureFromCMS">
															<parameters>
																<variableReferenceExpression name="user"/>
															</parameters>
														</methodInvokeExpression>
													</assignStatement>
												</trueStatements>
											</conditionStatement>
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="IdentityInequality">
														<variableReferenceExpression name="img"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<conditionStatement>
														<condition>
															<binaryOperatorExpression operator="BooleanOr">
																<binaryOperatorExpression operator="GreaterThan">
																	<propertyReferenceExpression name="Width">
																		<variableReferenceExpression name="img"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="80"/>
																</binaryOperatorExpression>
																<binaryOperatorExpression operator="GreaterThan">
																	<propertyReferenceExpression name="Height">
																		<variableReferenceExpression name="img"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="80"/>
																</binaryOperatorExpression>
															</binaryOperatorExpression>
														</condition>
														<trueStatements>
															<variableDeclarationStatement type="System.Single" name="scale">
																<init>
																	<binaryOperatorExpression operator="Divide">
																		<castExpression targetType="System.Single">
																			<propertyReferenceExpression name="Width">
																				<variableReferenceExpression name="img"/>
																			</propertyReferenceExpression>
																		</castExpression>
																		<primitiveExpression value="80"/>
																	</binaryOperatorExpression>
																</init>
															</variableDeclarationStatement>
															<variableDeclarationStatement type="System.Int32" name="height">
																<init>
																	<castExpression targetType="System.Int32">
																		<binaryOperatorExpression operator="Divide">
																			<propertyReferenceExpression name="Height">
																				<variableReferenceExpression name="img"/>
																			</propertyReferenceExpression>
																			<variableReferenceExpression name="scale"/>
																		</binaryOperatorExpression>
																	</castExpression>
																</init>
															</variableDeclarationStatement>
															<variableDeclarationStatement type="System.Int32" name="width">
																<init>
																	<primitiveExpression value="80"/>
																</init>
															</variableDeclarationStatement>
															<conditionStatement>
																<condition>
																	<binaryOperatorExpression operator="LessThan">
																		<propertyReferenceExpression name="Height">
																			<variableReferenceExpression name="img"/>
																		</propertyReferenceExpression>
																		<propertyReferenceExpression name="Width">
																			<variableReferenceExpression name="img"/>
																		</propertyReferenceExpression>
																	</binaryOperatorExpression>
																</condition>
																<trueStatements>
																	<assignStatement>
																		<variableReferenceExpression name="scale"/>
																		<binaryOperatorExpression operator="Divide">
																			<castExpression targetType="System.Single">
																				<propertyReferenceExpression name="Height">
																					<variableReferenceExpression name="img"/>
																				</propertyReferenceExpression>
																			</castExpression>
																			<primitiveExpression value="80"/>
																		</binaryOperatorExpression>
																	</assignStatement>
																	<assignStatement>
																		<variableReferenceExpression name="height"/>
																		<primitiveExpression value="80"/>
																	</assignStatement>
																	<assignStatement>
																		<variableReferenceExpression name="width"/>
																		<castExpression targetType="System.Int32">
																			<binaryOperatorExpression operator="Divide">
																				<propertyReferenceExpression name="Width">
																					<variableReferenceExpression name="img"/>
																				</propertyReferenceExpression>
																				<variableReferenceExpression name="scale"/>
																			</binaryOperatorExpression>
																		</castExpression>
																	</assignStatement>
																</trueStatements>
															</conditionStatement>
															<assignStatement>
																<variableReferenceExpression name="img"/>
																<methodInvokeExpression methodName="ResizeImage">
																	<target>
																		<typeReferenceExpression type="Blob"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="img"/>
																		<variableReferenceExpression name="width"/>
																		<variableReferenceExpression name="height"/>
																	</parameters>
																</methodInvokeExpression>
															</assignStatement>
														</trueStatements>
													</conditionStatement>
													<usingStatement>
														<variable type="MemoryStream" name="stream">
															<init>
																<objectCreateExpression type="MemoryStream"/>
															</init>
														</variable>
														<statements>
															<methodInvokeExpression methodName="Save">
																<target>
																	<variableReferenceExpression name="img"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="stream"/>
																	<propertyReferenceExpression name="Bmp">
																		<typeReferenceExpression type="ImageFormat"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
															<variableDeclarationStatement type="System.Byte[]" name="bytes">
																<init>
																	<methodInvokeExpression methodName="ToArray">
																		<target>
																			<variableReferenceExpression name="stream"/>
																		</target>
																	</methodInvokeExpression>
																</init>
															</variableDeclarationStatement>
															<methodInvokeExpression methodName="Dispose">
																<target>
																	<variableReferenceExpression name="img"/>
																</target>
															</methodInvokeExpression>
															<methodReturnStatement>
																<binaryOperatorExpression operator="Add">
																	<primitiveExpression value="data:image/raw;base64,"/>
																	<methodInvokeExpression methodName="ToBase64String">
																		<target>
																			<typeReferenceExpression type="Convert"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="bytes"/>
																		</parameters>
																	</methodInvokeExpression>
																</binaryOperatorExpression>
															</methodReturnStatement>
														</statements>
													</usingStatement>
												</trueStatements>
											</conditionStatement>
										</statements>
										<catch exceptionType="Exception"/>
									</tryStatement>
								</xsl:if>
								<methodReturnStatement>
									<stringEmptyExpression/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<xsl:if test="$TargetFramework!='3.5' and $TargetFramework!='4.0'">
							<!-- method UserPictureImage-->
							<memberMethod returnType="Image" name="UserPictureImage">
								<attributes public="true"/>
								<parameters>
									<parameter type="MembershipUser" name="user"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="System.String" name="url">
										<init>
											<methodInvokeExpression methodName="UserPictureUrl">
												<parameters>
													<variableReferenceExpression name="user"/>
												</parameters>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<variableReferenceExpression name="url"/>
											</unaryOperatorExpression>
										</condition>
										<trueStatements>
											<variableDeclarationStatement type="WebRequest" name="request">
												<init>
													<methodInvokeExpression methodName="Create">
														<target>
															<typeReferenceExpression type="WebRequest"/>
														</target>
														<parameters>
															<variableReferenceExpression name="url"/>
														</parameters>
													</methodInvokeExpression>
												</init>
											</variableDeclarationStatement>
											<usingStatement>
												<variable type="Stream" name="stream">
													<init>
														<methodInvokeExpression methodName="GetResponseStream">
															<target>
																<methodInvokeExpression methodName="GetResponse">
																	<target>
																		<variableReferenceExpression name="request"/>
																	</target>
																</methodInvokeExpression>
															</target>
														</methodInvokeExpression>
													</init>
												</variable>
												<statements>
													<usingStatement>
														<variable type="MemoryStream" name="ms">
															<init>
																<objectCreateExpression type="MemoryStream"/>
															</init>
														</variable>
														<statements>
															<methodInvokeExpression methodName="CopyTo">
																<target>
																	<variableReferenceExpression name="stream"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="ms"/>
																</parameters>
															</methodInvokeExpression>
															<methodReturnStatement>
																<castExpression targetType="Image">
																	<methodInvokeExpression methodName="ConvertFrom">
																		<target>
																			<objectCreateExpression type="ImageConverter"/>
																		</target>
																		<parameters>
																			<methodInvokeExpression methodName="ToArray">
																				<target>
																					<variableReferenceExpression name="ms"/>
																				</target>
																			</methodInvokeExpression>
																		</parameters>
																	</methodInvokeExpression>
																</castExpression>
															</methodReturnStatement>
														</statements>
													</usingStatement>
												</statements>
											</usingStatement>
										</trueStatements>
										<falseStatements>
											<assignStatement>
												<variableReferenceExpression name="url"/>
												<methodInvokeExpression methodName="UserPictureFilePath">
													<parameters>
														<variableReferenceExpression name="user"/>
													</parameters>
												</methodInvokeExpression>
											</assignStatement>
											<conditionStatement>
												<condition>
													<unaryOperatorExpression operator="IsNotNullOrEmpty">
														<variableReferenceExpression name="url"/>
													</unaryOperatorExpression>
												</condition>
												<trueStatements>
													<methodReturnStatement>
														<methodInvokeExpression methodName="FromFile">
															<target>
																<typeReferenceExpression type="Image"/>
															</target>
															<parameters>
																<variableReferenceExpression name="url"/>
															</parameters>
														</methodInvokeExpression>
													</methodReturnStatement>
												</trueStatements>
											</conditionStatement>
										</falseStatements>
									</conditionStatement>
									<methodReturnStatement>
										<primitiveExpression value="null"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method UserPictureFromCMS(MembershipUser)-->
							<memberMethod returnType="Image" name="UserPictureFromCMS">
								<attributes public="true"/>
								<parameters>
									<parameter type="MembershipUser" name="user"/>
								</parameters>
								<statements>
									<xsl:if test="$PageImplementation='html' and $SiteContentTableName!=''">
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="IsSiteContentEnabled"/>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="SiteContentFileList" name="list">
													<init>
														<methodInvokeExpression methodName="ReadSiteContent">
															<parameters>
																<primitiveExpression value="sys/users"/>
																<binaryOperatorExpression operator="Add">
																	<propertyReferenceExpression name="UserName">
																		<variableReferenceExpression name="user"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value=".%"/>
																</binaryOperatorExpression>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<foreachStatement>
													<variable type="SiteContentFile" name="file"/>
													<target>
														<variableReferenceExpression name="list"/>
													</target>
													<statements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<methodInvokeExpression methodName="StartsWith">
																		<target>
																			<propertyReferenceExpression name="ContentType">
																				<variableReferenceExpression name="file"/>
																			</propertyReferenceExpression>
																		</target>
																		<parameters>
																			<primitiveExpression value="image/"/>
																		</parameters>
																	</methodInvokeExpression>
																	<binaryOperatorExpression operator="IdentityInequality">
																		<propertyReferenceExpression name="Data">
																			<variableReferenceExpression name="file"/>
																		</propertyReferenceExpression>
																		<primitiveExpression value="null"/>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodReturnStatement>
																	<castExpression targetType="Image">
																		<methodInvokeExpression methodName="ConvertFrom">
																			<target>
																				<objectCreateExpression type="ImageConverter"/>
																			</target>
																			<parameters>
																				<propertyReferenceExpression name="Data">
																					<variableReferenceExpression name="file"/>
																				</propertyReferenceExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</castExpression>
																</methodReturnStatement>
															</trueStatements>
														</conditionStatement>
													</statements>
												</foreachStatement>
											</trueStatements>
										</conditionStatement>
									</xsl:if>
									<methodReturnStatement>
										<primitiveExpression value="null"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method UserPictureFilePath-->
							<memberMethod returnType="System.String" name="UserPictureFilePath">
								<attributes public="true"/>
								<parameters>
									<parameter type="MembershipUser" name="user"/>
								</parameters>
								<statements>
									<methodReturnStatement>
										<primitiveExpression value="null"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method UserPictureUrl-->
							<memberMethod returnType="System.String" name="UserPictureUrl">
								<attributes public="true"/>
								<parameters>
									<parameter type="MembershipUser" name="user"/>
								</parameters>
								<statements>
									<methodReturnStatement>
										<primitiveExpression value="null"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
						</xsl:if>
						<!-- property Realm -->
						<memberProperty type="System.String" name="Realm">
							<attributes public="true"/>
							<getStatements>
								<methodReturnStatement>
									<propertyReferenceExpression name="DisplayName"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- member FrameworkAppName -->
						<memberField type="System.String" name="FrameworkAppName">
							<attributes static="true" public="true"/>
							<init>
								<primitiveExpression value="null"/>
							</init>
						</memberField>
						<!-- property Name -->
						<memberProperty type="System.String" name="Name">
							<attributes public="true"/>
							<getStatements>
								<methodReturnStatement>
									<propertyReferenceExpression name="FrameworkAppName"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property DisplayName -->
						<memberProperty type="System.String" name="DisplayName">
							<attributes public="true"/>
							<getStatements>
								<variableDeclarationStatement name="result">
									<init>
										<propertyReferenceExpression name="Name"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="IsTouchClient"/>
									</condition>
									<trueStatements>
										<variableDeclarationStatement name="settings">
											<init>
												<propertyReferenceExpression name="DefaultSettings"/>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="appName">
											<init>
												<convertExpression to="String">
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="settings"/>
														</target>
														<indices>
															<primitiveExpression value="appName"/>
														</indices>
													</arrayIndexerExpression>
												</convertExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<variableReferenceExpression name="appName"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="result"/>
													<variableReferenceExpression name="appName"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property MapsApiIdentifier-->
						<memberProperty type="System.String" name="MapsApiIdentifier">
							<attributes public="true" static="true"/>
							<getStatements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityInequality">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="ValueEquality">
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Headers">
															<propertyReferenceExpression name="Request">
																<propertyReferenceExpression name="Current">
																	<typeReferenceExpression type="HttpContext"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="X-Cot-Manifest-Request"/>
													</indices>
												</arrayIndexerExpression>
												<primitiveExpression value="true" convertTo="String"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="AppSettings">
														<typeReferenceExpression type="WebConfigurationManager"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="MapsApiIdentifierMobile"/>
												</indices>
											</arrayIndexerExpression>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="AppSettings">
												<typeReferenceExpression type="WebConfigurationManager"/>
											</propertyReferenceExpression>
										</target>
										<indices>
											<primitiveExpression value="MapsApiIdentifier"/>
										</indices>
									</arrayIndexerExpression>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property MaxPivotRowCount-->
						<memberProperty type="System.Int32" name="MaxPivotRowCount">
							<attributes public="true"/>
							<getStatements>
								<methodReturnStatement>
									<primitiveExpression value="250000"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property Current -->
						<memberProperty type="ApplicationServices" name="Current">
							<attributes public="true" static="true"/>
							<getStatements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="Create"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method Create() -->
						<memberMethod returnType="ApplicationServices" name="Create">
							<attributes public="true" static="true"/>
							<statements>
								<methodReturnStatement>
									<objectCreateExpression type="ApplicationServices"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method bool UserIsAuthorizedToAccessResource(string, string) -->
						<memberMethod returnType="System.Boolean" name="UserIsAuthorizedToAccessResource">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="path"/>
								<parameter type="System.String" name="roles"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<unaryOperatorExpression operator="Not">
										<methodInvokeExpression methodName="ResourceAuthorizationIsRequired">
											<target>
												<methodInvokeExpression methodName="Create"/>
											</target>
											<parameters>
												<argumentReferenceExpression name="path"/>
												<argumentReferenceExpression name="roles"/>
											</parameters>
										</methodInvokeExpression>
									</unaryOperatorExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- field AuthorizationIsSupported -->
						<memberField type="System.Boolean" name="AuthorizationIsSupported">
							<attributes public="true" static="true"/>
							<init>
								<primitiveExpression value="true"/>
							</init>
						</memberField>
						<!-- method bool ResourceAuthorizationIsRequired(string, string) -->
						<memberMethod returnType="System.Boolean" name="ResourceAuthorizationIsRequired">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="path"/>
								<parameter type="System.String" name="roles"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<propertyReferenceExpression name="AuthorizationIsSupported"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="false"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<argumentReferenceExpression name="roles"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<argumentReferenceExpression name="roles"/>
											<stringEmptyExpression/>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<assignStatement>
											<argumentReferenceExpression name="roles"/>
											<methodInvokeExpression methodName="Trim">
												<target>
													<argumentReferenceExpression name="roles"/>
												</target>
											</methodInvokeExpression>
										</assignStatement>
									</falseStatements>
								</conditionStatement>
								<variableDeclarationStatement name="acl">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="AccessControlList"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="appPage">
									<init>
										<methodInvokeExpression methodName="Match">
											<target>
												<typeReferenceExpression type="Regex"/>
											</target>
											<parameters>
												<argumentReferenceExpression name="path"/>
												<primitiveExpression value="pages/(.+?)(\?|$)"/>
												<propertyReferenceExpression name="IgnoreCase">
													<typeReferenceExpression type="RegexOptions"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="BooleanAnd">
												<propertyReferenceExpression name="Success">
													<variableReferenceExpression name="appPage"/>
												</propertyReferenceExpression>
												<unaryOperatorExpression operator="Not">
													<methodInvokeExpression methodName="PermissionGranted">
														<target>
															<variableReferenceExpression name="acl"/>
														</target>
														<parameters>
															<propertyReferenceExpression name="Page">
																<typeReferenceExpression type="PermissionKind"/>
															</propertyReferenceExpression>
															<propertyReferenceExpression name="Value">
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="Groups">
																			<variableReferenceExpression name="appPage"/>
																		</propertyReferenceExpression>
																	</target>
																	<indices>
																		<primitiveExpression value="1"/>
																	</indices>
																</arrayIndexerExpression>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
												</unaryOperatorExpression>
											</binaryOperatorExpression>
											<unaryOperatorExpression operator="Not">
												<methodInvokeExpression methodName="Equals">
													<target>
														<argumentReferenceExpression name="path"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="LoginUrl">
															<typeReferenceExpression type="FormsAuthentication"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</unaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<argumentReferenceExpression name="roles"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="roleList">
													<init>
														<methodInvokeExpression methodName="Split">
															<target>
																<typeReferenceExpression type="Regex"/>
															</target>
															<parameters>
																<argumentReferenceExpression name="roles"/>
																<primitiveExpression value="\s+|\s*,\s*"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement name="pageSupers">
													<init>
														<methodInvokeExpression methodName="ToArray">
															<target>
																<methodInvokeExpression methodName="Intersect">
																	<target>
																		<variableReferenceExpression name="roleList"/>
																	</target>
																	<parameters>
																		<propertyReferenceExpression name="SuperUsers"/>
																	</parameters>
																</methodInvokeExpression>
															</target>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="GreaterThan">
																<propertyReferenceExpression name="Length">
																	<variableReferenceExpression name="pageSupers"/>
																</propertyReferenceExpression>
																<primitiveExpression value="0"/>
															</binaryOperatorExpression>
															<methodInvokeExpression methodName="UserIsInRole">
																<target>
																	<typeReferenceExpression type="DataControllerBase"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="pageSupers"/>
																</parameters>
															</methodInvokeExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodReturnStatement>
															<primitiveExpression value="false"/>
														</methodReturnStatement>
													</trueStatements>
												</conditionStatement>
												<methodReturnStatement>
													<primitiveExpression value="true"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
										<methodReturnStatement>
											<primitiveExpression value="true"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="System.Boolean" name="requiresAuthorization">
									<init>
										<primitiveExpression value="false"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Boolean" name="isAuthenticated">
									<init>
										<propertyReferenceExpression name="IsAuthenticated">
											<propertyReferenceExpression name="Identity">
												<propertyReferenceExpression name="User">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<propertyReferenceExpression name="Enabled">
												<variableReferenceExpression name="acl"/>
											</propertyReferenceExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<unaryOperatorExpression operator="IsNullOrEmpty">
														<argumentReferenceExpression name="roles"/>
													</unaryOperatorExpression>
													<unaryOperatorExpression operator="Not">
														<variableReferenceExpression name="isAuthenticated"/>
													</unaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="requiresAuthorization"/>
													<primitiveExpression value="true"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<unaryOperatorExpression operator="IsNotNullOrEmpty">
														<argumentReferenceExpression name="roles"/>
													</unaryOperatorExpression>
													<binaryOperatorExpression operator="ValueInequality">
														<argumentReferenceExpression name="roles"/>
														<primitiveExpression value="?"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<argumentReferenceExpression name="roles"/>
															<primitiveExpression value="*"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="Not">
																	<variableReferenceExpression name="isAuthenticated"/>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="requiresAuthorization"/>
																	<primitiveExpression value="true"/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
													<falseStatements>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanOr">
																	<unaryOperatorExpression operator="Not">
																		<variableReferenceExpression name="isAuthenticated"/>
																	</unaryOperatorExpression>
																	<unaryOperatorExpression>
																		<methodInvokeExpression methodName="UserIsInRole">
																			<target>
																				<typeReferenceExpression type="DataControllerBase"/>
																			</target>
																			<parameters>
																				<argumentReferenceExpression name="roles"/>
																			</parameters>
																		</methodInvokeExpression>
																	</unaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="requiresAuthorization"/>
																	<primitiveExpression value="true"/>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<argumentReferenceExpression name="path"/>
											<propertyReferenceExpression name="LoginUrl">
												<typeReferenceExpression type="FormsAuthentication"/>
											</propertyReferenceExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="requiresAuthorization"/>
											<primitiveExpression value="false"/>
										</assignStatement>
										<xsl:if test="$TargetFramework!='3.5' and ($MembershipEnabled='true' or $CustomSecurity='true')">
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="BooleanAnd">
														<unaryOperatorExpression operator="Not">
															<variableReferenceExpression name="isAuthenticated"/>
														</unaryOperatorExpression>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="ValueInequality">
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="QueryString">
																			<propertyReferenceExpression name="Request">
																				<propertyReferenceExpression name="Current">
																					<typeReferenceExpression type="HttpContext"/>
																				</propertyReferenceExpression>
																			</propertyReferenceExpression>
																		</propertyReferenceExpression>
																	</target>
																	<indices>
																		<primitiveExpression value="_autoLogin"/>
																	</indices>
																</arrayIndexerExpression>
																<primitiveExpression value="false" convertTo="String"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="IdentityEquality">
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="Cookies">
																			<propertyReferenceExpression name="Request">
																				<propertyReferenceExpression name="Current">
																					<typeReferenceExpression type="HttpContext"/>
																				</propertyReferenceExpression>
																			</propertyReferenceExpression>
																		</propertyReferenceExpression>
																	</target>
																	<indices>
																		<primitiveExpression value=".TOKEN"/>
																	</indices>
																</arrayIndexerExpression>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<variableDeclarationStatement type="OAuthHandler" name="handler">
														<init>
															<methodInvokeExpression methodName="CreateAutoLogin">
																<target>
																	<typeReferenceExpression type="OAuthHandlerFactory"/>
																</target>
															</methodInvokeExpression>
														</init>
													</variableDeclarationStatement>
													<conditionStatement>
														<condition>
															<binaryOperatorExpression operator="IdentityInequality">
																<variableReferenceExpression name="handler"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
														</condition>
														<trueStatements>
															<methodInvokeExpression methodName="SetCookie">
																<target>
																	<typeReferenceExpression type="ApplicationServices"/>
																</target>
																<parameters>
																	<objectCreateExpression type="HttpCookie">
																		<parameters>
																			<primitiveExpression value=".PROVIDER"/>
																			<methodInvokeExpression methodName="GetHandlerName">
																				<target>
																					<variableReferenceExpression name="handler"/>
																				</target>
																			</methodInvokeExpression>
																		</parameters>
																	</objectCreateExpression>
																</parameters>
															</methodInvokeExpression>
															<assignStatement>
																<variableReferenceExpression name="requiresAuthorization"/>
																<primitiveExpression value="true"/>
															</assignStatement>
														</trueStatements>
													</conditionStatement>
												</trueStatements>
											</conditionStatement>
										</xsl:if>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="requiresAuthorization"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method RegisterStandardMembershipAccounts() -->
						<memberMethod name="RegisterStandardMembershipAccounts">
							<attributes public="true" static="true"/>
							<statements>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="AuthorizationIsSupported"/>
									</condition>
									<trueStatements>
										<xsl:if test="a:project/a:membership/@enabled='true'">
											<comment>Confirm existence of schema version</comment>
											<tryStatement>
												<statements>
													<variableDeclarationStatement type="ConnectionStringSettings" name="css">
														<init>
															<arrayIndexerExpression>
																<target>
																	<propertyReferenceExpression name="ConnectionStrings">
																		<typeReferenceExpression type="ConfigurationManager"/>
																	</propertyReferenceExpression>
																</target>
																<indices>
																	<primitiveExpression value="LocalSqlServer"/>
																</indices>
															</arrayIndexerExpression>
														</init>
													</variableDeclarationStatement>
													<conditionStatement>
														<condition>
															<binaryOperatorExpression operator="IdentityEquality">
																<variableReferenceExpression name="css"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
														</condition>
														<trueStatements>
															<assignStatement>
																<variableReferenceExpression name="css"/>
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="ConnectionStrings">
																			<typeReferenceExpression type="ConfigurationManager"/>
																		</propertyReferenceExpression>
																	</target>
																	<indices>
																		<primitiveExpression>
																			<xsl:attribute name="value">
																				<xsl:value-of select="$Namespace"/>
																			</xsl:attribute>
																		</primitiveExpression>
																	</indices>
																</arrayIndexerExpression>
															</assignStatement>
														</trueStatements>
													</conditionStatement>
													<conditionStatement>
														<condition>
															<binaryOperatorExpression operator="BooleanAnd">
																<binaryOperatorExpression operator="IdentityInequality">
																	<variableReferenceExpression name="css"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
																<binaryOperatorExpression operator="ValueEquality">
																	<propertyReferenceExpression name="ProviderName">
																		<variableReferenceExpression name="css"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="System.Data.SqlClient"/>
																</binaryOperatorExpression>
															</binaryOperatorExpression>
														</condition>
														<trueStatements>
															<variableDeclarationStatement type="System.Int32" name="count">
																<init>
																	<primitiveExpression value="0"/>
																</init>
															</variableDeclarationStatement>
															<usingStatement>
																<variable type="SqlText" name="sql">
																	<init>
																		<objectCreateExpression type="SqlText">
																			<parameters>
																				<primitiveExpression value="select count(*) from dbo.aspnet_SchemaVersions where Feature in ('common', 'membership', 'role manager')"/>
																				<propertyReferenceExpression name="Name">
																					<variableReferenceExpression name="css"/>
																				</propertyReferenceExpression>
																			</parameters>
																		</objectCreateExpression>
																	</init>
																</variable>
																<statements>
																	<assignStatement>
																		<variableReferenceExpression name="count"/>
																		<castExpression targetType="System.Int32">
																			<methodInvokeExpression methodName="ExecuteScalar">
																				<target>
																					<variableReferenceExpression name="sql"/>
																				</target>
																			</methodInvokeExpression>
																		</castExpression>
																	</assignStatement>
																</statements>
															</usingStatement>
															<conditionStatement>
																<condition>
																	<binaryOperatorExpression operator="ValueEquality">
																		<variableReferenceExpression name="count"/>
																		<primitiveExpression value="0"/>
																	</binaryOperatorExpression>
																</condition>
																<trueStatements>
																	<usingStatement>
																		<variable type="SqlText" name="sql">
																			<init>
																				<objectCreateExpression type="SqlText">
																					<parameters>
																						<primitiveExpression value="insert into dbo.aspnet_SchemaVersions values ('common', 1, 1)"/>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="css"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</objectCreateExpression>
																			</init>
																		</variable>
																		<statements>
																			<methodInvokeExpression methodName="ExecuteNonQuery">
																				<target>
																					<variableReferenceExpression name="sql"/>
																				</target>
																			</methodInvokeExpression>
																		</statements>
																	</usingStatement>
																	<usingStatement>
																		<variable type="SqlText" name="sql">
																			<init>
																				<objectCreateExpression type="SqlText">
																					<parameters>
																						<primitiveExpression value="insert into dbo.aspnet_SchemaVersions values ('membership', 1, 1)"/>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="css"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</objectCreateExpression>
																			</init>
																		</variable>
																		<statements>
																			<methodInvokeExpression methodName="ExecuteNonQuery">
																				<target>
																					<variableReferenceExpression name="sql"/>
																				</target>
																			</methodInvokeExpression>
																		</statements>
																	</usingStatement>
																	<usingStatement>
																		<variable type="SqlText" name="sql">
																			<init>
																				<objectCreateExpression type="SqlText">
																					<parameters>
																						<primitiveExpression value="insert into dbo.aspnet_SchemaVersions values ('role manager', 1, 1)"/>
																						<propertyReferenceExpression name="Name">
																							<variableReferenceExpression name="css"/>
																						</propertyReferenceExpression>
																					</parameters>
																				</objectCreateExpression>
																			</init>
																		</variable>
																		<statements>
																			<methodInvokeExpression methodName="ExecuteNonQuery">
																				<target>
																					<variableReferenceExpression name="sql"/>
																				</target>
																			</methodInvokeExpression>
																		</statements>
																	</usingStatement>
																</trueStatements>
															</conditionStatement>
														</trueStatements>
													</conditionStatement>
												</statements>
												<catch exceptionType="Exception">
													<comment>Exceptions are ignored if app uses custom membership.</comment>
												</catch>
											</tryStatement>
										</xsl:if>
										<comment>Create standard 'admin' and 'user' accounts.</comment>
										<variableDeclarationStatement type="MembershipUser" name="admin">
											<init>
												<methodInvokeExpression methodName="GetUser">
													<target>
														<typeReferenceExpression type="Membership"/>
													</target>
													<parameters>
														<primitiveExpression value="admin"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IdentityInequality">
														<variableReferenceExpression name="admin"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<propertyReferenceExpression name="IsLockedOut">
														<variableReferenceExpression name="admin"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="UnlockUser">
													<target>
														<variableReferenceExpression name="admin"/>
													</target>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement type="MembershipUser" name="user">
											<init>
												<methodInvokeExpression methodName="GetUser">
													<target>
														<typeReferenceExpression type="Membership"/>
													</target>
													<parameters>
														<primitiveExpression value="user"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IdentityInequality">
														<variableReferenceExpression name="user"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<propertyReferenceExpression name="IsLockedOut">
														<variableReferenceExpression name="user"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="UnlockUser">
													<target>
														<variableReferenceExpression name="user"/>
													</target>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<methodInvokeExpression methodName="GetUser">
														<target>
															<typeReferenceExpression type="Membership"/>
														</target>
														<parameters>
															<primitiveExpression value="admin"/>
														</parameters>
													</methodInvokeExpression>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="MembershipCreateStatus" name="status"/>
												<assignStatement>
													<variableReferenceExpression name="admin"/>
													<methodInvokeExpression methodName="CreateUser">
														<target>
															<typeReferenceExpression type="Membership"/>
														</target>
														<parameters>
															<primitiveExpression value="admin"/>
															<primitiveExpression value="admin123%"/>
															<primitiveExpression value="admin@{$Namespace}.com"/>
															<primitiveExpression value="ASP.NET"/>
															<primitiveExpression value="Code OnTime"/>
															<primitiveExpression value="true"/>
															<directionExpression direction="Out">
																<variableReferenceExpression name="status"/>
															</directionExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<assignStatement>
													<variableReferenceExpression name="user"/>
													<methodInvokeExpression methodName="CreateUser">
														<target>
															<typeReferenceExpression type="Membership"/>
														</target>
														<parameters>
															<primitiveExpression value="user"/>
															<primitiveExpression value="user123%"/>
															<primitiveExpression value="user@{$Namespace}.com"/>
															<primitiveExpression value="ASP.NET"/>
															<primitiveExpression value="Code OnTime"/>
															<primitiveExpression value="true"/>
															<directionExpression direction="Out">
																<variableReferenceExpression name="status"/>
															</directionExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<methodInvokeExpression methodName="CreateRole">
													<target>
														<typeReferenceExpression type="Roles"/>
													</target>
													<parameters>
														<primitiveExpression value="Administrators"/>
													</parameters>
												</methodInvokeExpression>
												<methodInvokeExpression methodName="CreateRole">
													<target>
														<typeReferenceExpression type="Roles"/>
													</target>
													<parameters>
														<primitiveExpression value="Users"/>
													</parameters>
												</methodInvokeExpression>
												<methodInvokeExpression methodName="AddUserToRole">
													<target>
														<typeReferenceExpression type="Roles"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="UserName">
															<variableReferenceExpression name="admin"/>
														</propertyReferenceExpression>
														<primitiveExpression value="Users"/>
													</parameters>
												</methodInvokeExpression>
												<methodInvokeExpression methodName="AddUserToRole">
													<target>
														<typeReferenceExpression type="Roles"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="UserName">
															<variableReferenceExpression name="user"/>
														</propertyReferenceExpression>
														<primitiveExpression value="Users"/>
													</parameters>
												</methodInvokeExpression>
												<methodInvokeExpression methodName="AddUserToRole">
													<target>
														<typeReferenceExpression type="Roles"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="UserName">
															<variableReferenceExpression name="admin"/>
														</propertyReferenceExpression>
														<primitiveExpression value="Administrators"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- property IsTouchClient -->
						<xsl:choose>
							<xsl:when test="a:project/@userInterface='Both' and $IsUnlimited='true' and not($ProjectId='Mobile Factory') and $TargetFramework45Plus = 'true'">
								<!-- method ClientIsUsingTouchUI() -->
								<memberMethod returnType="System.Boolean" name="ClientIsUsingTouchUI">
									<attributes public="true" static="true"/>
									<statements>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="Not">
													<propertyReferenceExpression name="EnableMobileClient"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<primitiveExpression value="false"/>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement type="HttpRequest" name="request">
											<init>
												<propertyReferenceExpression name="Request">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="HttpCookie" name="mobileCookie">
											<init>
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Cookies">
															<variableReferenceExpression name="request"/>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="appfactorytouchui"/>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="mobileCookie"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodReturnStatement>
													<binaryOperatorExpression operator="ValueEquality">
														<propertyReferenceExpression name="Value">
															<variableReferenceExpression name="mobileCookie"/>
														</propertyReferenceExpression>
														<primitiveExpression value="true" convertTo="String"/>
													</binaryOperatorExpression>
												</methodReturnStatement>
											</trueStatements>
										</conditionStatement>
										<methodReturnStatement>
											<primitiveExpression value="true"/>
										</methodReturnStatement>
									</statements>
								</memberMethod>
								<!-- property IsTouchClient-->
								<memberProperty type="System.Boolean" name="IsTouchClient">
									<attributes public="true" static="true"/>
									<getStatements>
										<variableDeclarationStatement type="System.Object" name="isMobile">
											<init>
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Items">
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="HttpContext"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="ApplicationServices_IsTouchClient"/>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<variableReferenceExpression name="isMobile"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="isMobile"/>
													<methodInvokeExpression methodName="ClientIsUsingTouchUI"/>
												</assignStatement>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Items">
																<propertyReferenceExpression name="Current">
																	<typeReferenceExpression type="HttpContext"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</target>
														<indices>
															<primitiveExpression value="ApplicationServices_IsTouchClient"/>
														</indices>
													</arrayIndexerExpression>
													<variableReferenceExpression name="isMobile"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<methodReturnStatement>
											<castExpression targetType="System.Boolean">
												<variableReferenceExpression name="isMobile"/>
											</castExpression>
										</methodReturnStatement>
									</getStatements>
								</memberProperty>
							</xsl:when>
							<xsl:when test="$ProjectId='Mobile Factory' or a:project/@userInterface='TouchUI'">
								<memberProperty type="System.Boolean" name="IsTouchClient">
									<attributes public="true" static="true"/>
									<getStatements>
										<methodReturnStatement>
											<primitiveExpression value="true"/>
										</methodReturnStatement>
									</getStatements>
								</memberProperty>
							</xsl:when>
							<xsl:otherwise>
								<memberProperty type="System.Boolean" name="IsTouchClient">
									<attributes public="true" static="true"/>
									<getStatements>
										<methodReturnStatement>
											<primitiveExpression value="false"/>
										</methodReturnStatement>
									</getStatements>
								</memberProperty>
							</xsl:otherwise>
						</xsl:choose>
						<!-- method RegisterCssLinks(Page) -->
						<memberMethod name="RegisterCssLinks">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="Page" name="p"/>
							</parameters>
							<statements>
								<xsl:choose>
									<xsl:when test="a:project/@userInterface='Desktop' or a:project/@userInterface='Both'">
										<foreachStatement>
											<variable type="Control" name="c"/>
											<target>
												<propertyReferenceExpression name="Controls">
													<propertyReferenceExpression name="Header">
														<argumentReferenceExpression name="p"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IsTypeOf">
															<variableReferenceExpression name="c"/>
															<typeReferenceExpression type="HtmlLink"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<variableDeclarationStatement type="HtmlLink" name="l">
															<init>
																<castExpression targetType="HtmlLink">
																	<variableReferenceExpression name="c"/>
																</castExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<propertyReferenceExpression name="ID">
																		<variableReferenceExpression name="l"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="{a:project/a:namespace}Theme"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodReturnStatement/>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="Contains">
																	<target>
																		<propertyReferenceExpression name="Href">
																			<variableReferenceExpression name="l"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="_Theme_{$Theme}.css"/>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<propertyReferenceExpression name="ID">
																		<variableReferenceExpression name="l"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="{a:project/a:namespace}Theme"/>
																</assignStatement>
																<xsl:choose>
																	<xsl:when test="$Mobile='true'">
																		<conditionStatement>
																			<condition>
																				<propertyReferenceExpression name="IsTouchClient">
																					<typeReferenceExpression type="ApplicationServices"/>
																				</propertyReferenceExpression>
																			</condition>
																			<trueStatements>
																				<xsl:call-template name="RegisterTouchUICssLinks"/>
																				<methodReturnStatement/>
																			</trueStatements>
																			<falseStatements>
																				<xsl:call-template name="EnsureCssLinkVersion"/>
																			</falseStatements>
																		</conditionStatement>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:call-template name="EnsureCssLinkVersion"/>
																	</xsl:otherwise>
																</xsl:choose>
																<methodReturnStatement/>
															</trueStatements>
														</conditionStatement>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</xsl:when>
									<xsl:otherwise>
										<variableDeclarationStatement type="HtmlLink" name="l">
											<init>
												<objectCreateExpression type="HtmlLink"/>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<propertyReferenceExpression name="ID">
												<variableReferenceExpression name="l"/>
											</propertyReferenceExpression>
											<primitiveExpression value="{a:project/a:namespace}Theme"/>
										</assignStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<propertyReferenceExpression name="Attributes">
													<variableReferenceExpression name="l"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="type"/>
												<primitiveExpression value="text/css"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Add">
											<target>
												<propertyReferenceExpression name="Attributes">
													<variableReferenceExpression name="l"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="rel"/>
												<primitiveExpression value="stylesheet"/>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Add">
											<target>
												<propertyReferenceExpression name="Controls">
													<propertyReferenceExpression name="Header">
														<variableReferenceExpression name="p"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<castExpression targetType="Control">
													<variableReferenceExpression name="l"/>
												</castExpression>
											</parameters>
										</methodInvokeExpression>
										<xsl:call-template name="RegisterTouchUICssLinks"/>
									</xsl:otherwise>
								</xsl:choose>
							</statements>
						</memberMethod>
						<!-- property UserTheme -->
						<memberField name="userTheme" type="System.String"/>
						<memberProperty type="System.String" name="UserTheme">
							<attributes public="true"/>
							<getStatements>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<fieldReferenceExpression name="userTheme"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="LoadTheme"/>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<fieldReferenceExpression name="userTheme"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property UserAccent -->
						<memberField name="userAccent" type="System.String"/>
						<memberProperty type="System.String" name="UserAccent">
							<attributes public="true"/>
							<getStatements>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<fieldReferenceExpression name="userAccent"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="LoadTheme"/>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<fieldReferenceExpression name="userAccent"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method LoadTheme()-->
						<memberMethod name="LoadTheme">
							<attributes private="true"/>
							<statements>
								<variableDeclarationStatement type="System.String" name="theme">
									<init>
										<stringEmptyExpression/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="HttpCookie" name="themeCookie">
											<init>
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Cookies">
															<propertyReferenceExpression name="Request">
																<propertyReferenceExpression name="Current">
																	<typeReferenceExpression type="HttpContext"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</target>
													<indices>
														<binaryOperatorExpression operator="Add">
															<primitiveExpression value=".COTTHEME"/>
															<propertyReferenceExpression name="UserName">
																<typeReferenceExpression type="BusinessRules"/>
															</propertyReferenceExpression>
														</binaryOperatorExpression>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="themeCookie"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="theme"/>
													<propertyReferenceExpression name="Value">
														<variableReferenceExpression name="themeCookie"/>
													</propertyReferenceExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<variableReferenceExpression name="theme"/>
											</unaryOperatorExpression>
											<methodInvokeExpression methodName="Contains">
												<target>
													<variableReferenceExpression name="theme"/>
												</target>
												<parameters>
													<primitiveExpression value="." convertTo="Char"/>
												</parameters>
											</methodInvokeExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="theme"/>
											<methodInvokeExpression methodName="Replace">
												<target>
													<variableReferenceExpression name="theme"/>
												</target>
												<parameters>
													<primitiveExpression value=" "/>
													<stringEmptyExpression/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<variableDeclarationStatement type="System.String[]" name="parts">
											<init>
												<methodInvokeExpression methodName="Split">
													<target>
														<variableReferenceExpression name="theme"/>
													</target>
													<parameters>
														<primitiveExpression value="." convertTo="Char"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<fieldReferenceExpression name="userTheme"/>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="parts"/>
												</target>
												<indices>
													<primitiveExpression value="0"/>
												</indices>
											</arrayIndexerExpression>
										</assignStatement>
										<assignStatement>
											<fieldReferenceExpression name="userAccent"/>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="parts"/>
												</target>
												<indices>
													<primitiveExpression value="1"/>
												</indices>
											</arrayIndexerExpression>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<assignStatement>
											<fieldReferenceExpression name="userTheme"/>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<arrayIndexerExpression>
															<target>
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="DefaultSettings"/>
																	</target>
																	<indices>
																		<primitiveExpression value="ui"/>
																	</indices>
																</arrayIndexerExpression>
															</target>
															<indices>
																<primitiveExpression value="theme"/>
															</indices>
														</arrayIndexerExpression>
													</target>
													<indices>
														<primitiveExpression value="name"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</assignStatement>
										<assignStatement>
											<fieldReferenceExpression name="userAccent"/>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<arrayIndexerExpression>
															<target>
																<arrayIndexerExpression>
																	<target>
																		<propertyReferenceExpression name="DefaultSettings"/>
																	</target>
																	<indices>
																		<primitiveExpression value="ui"/>
																	</indices>
																</arrayIndexerExpression>
															</target>
															<indices>
																<primitiveExpression value="theme"/>
															</indices>
														</arrayIndexerExpression>
													</target>
													<indices>
														<primitiveExpression value="accent"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</assignStatement>
									</falseStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method AllowTouchUIStylesheet(String) -->
						<memberMethod returnType="System.Boolean" name="AllowTouchUIStylesheet">
							<attributes family="true"/>
							<parameters>
								<parameter type="System.String" name="name"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<unaryOperatorExpression operator="Not">
										<methodInvokeExpression methodName="IsMatch">
											<target>
												<typeReferenceExpression type="Regex"/>
											</target>
											<parameters>
												<argumentReferenceExpression name="name"/>
												<primitiveExpression>
													<xsl:attribute name="value"><![CDATA[^(touch|bootstrap|jquery\.mobile)]]></xsl:attribute>
												</primitiveExpression>
											</parameters>
										</methodInvokeExpression>
									</unaryOperatorExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method EnumerateTouchUIStylesheets() -->
						<memberMethod returnType="List" name="EnumerateTouchUIStylesheets">
							<typeArguments>
								<typeReference type="System.String"/>
							</typeArguments>
							<attributes public="true" />
							<statements>
								<variableDeclarationStatement type="List" name="stylesheets">
									<typeArguments>
										<typeReference type="System.String"/>
									</typeArguments>
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="ext">
									<init>
										<primitiveExpression value=".min.css"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<propertyReferenceExpression name="EnableMinifiedCss"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="ext"/>
											<primitiveExpression value=".css"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="stylesheets"/>
									</target>
									<parameters>
										<methodInvokeExpression methodName="Format">
											<target>
												<typeReferenceExpression type="System.String"/>
											</target>
											<parameters>
												<primitiveExpression value="~\css\daf\touch-core{{0}}"/>
												<variableReferenceExpression name="ext"/>
											</parameters>
										</methodInvokeExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="stylesheets"/>
									</target>
									<parameters>
										<binaryOperatorExpression operator="Add">
											<primitiveExpression value="~\css\daf\touch"/>
											<variableReferenceExpression name="ext"/>
										</binaryOperatorExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="stylesheets"/>
									</target>
									<parameters>
										<binaryOperatorExpression operator="Add">
											<primitiveExpression value="~\css\daf\touch-charts"/>
											<variableReferenceExpression name="ext"/>
										</binaryOperatorExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="stylesheets"/>
									</target>
									<parameters>
										<binaryOperatorExpression operator="Add">
											<primitiveExpression value="~\css\sys\bootstrap"/>
											<variableReferenceExpression name="ext"/>
										</binaryOperatorExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="stylesheets"/>
									</target>
									<parameters>
										<stringFormatExpression format="~\appservices\touch-theme.{{0}}.{{1}}.css">
											<propertyReferenceExpression name="UserTheme"/>
											<propertyReferenceExpression name="UserAccent"/>
										</stringFormatExpression>
									</parameters>
								</methodInvokeExpression>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<methodInvokeExpression methodName="AddStyleSheets"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="stylesheets"/>
											</target>
											<parameters>
												<primitiveExpression value="~\css\daf\add.min.css"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<comment>enumerate custom css files</comment>
								<variableDeclarationStatement type="List" name="customCss">
									<typeArguments>
										<typeReference type="System.String"/>
									</typeArguments>
									<init>
										<castExpression targetType="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Cache">
														<typeReferenceExpression type="HttpRuntime"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="IncludedCss"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="customCss"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="customCss"/>
											<objectCreateExpression type="List">
												<typeArguments>
													<typeReference type="System.String"/>
												</typeArguments>
											</objectCreateExpression>
										</assignStatement>
										<variableDeclarationStatement type="System.String" name="cssPath">
											<init>
												<methodInvokeExpression methodName="Combine">
													<target>
														<typeReferenceExpression type="Path"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="AppDomainAppPath">
															<typeReferenceExpression type="HttpRuntime"/>
														</propertyReferenceExpression>
														<primitiveExpression value="css"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="CacheDependency" name="dep">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="Exists">
													<target>
														<typeReferenceExpression type="Directory"/>
													</target>
													<parameters>
														<variableReferenceExpression name="cssPath"/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="dep"/>
													<objectCreateExpression type="FolderCacheDependency">
														<parameters>
															<variableReferenceExpression name="cssPath"/>
															<primitiveExpression value="*.css"/>
														</parameters>
													</objectCreateExpression>
												</assignStatement>
												<variableDeclarationStatement type="System.String" name="ignorePath">
													<init>
														<methodInvokeExpression methodName="Combine">
															<target>
																<typeReferenceExpression type="Path"/>
															</target>
															<parameters>
																<variableReferenceExpression name="cssPath"/>
																<primitiveExpression value="_ignore.txt"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="Regex" name="ignoreRegex">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="Exists">
															<target>
																<typeReferenceExpression type="File"/>
															</target>
															<parameters>
																<variableReferenceExpression name="ignorePath"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="ignoreRegex"/>
															<methodInvokeExpression methodName="BuildSearchPathRegex">
																<parameters>
																	<methodInvokeExpression methodName="ReadAllLines">
																		<target>
																			<typeReferenceExpression type="File"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="ignorePath"/>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<foreachStatement>
													<variable type="System.String" name="filePath"/>
													<target>
														<methodInvokeExpression methodName="EnumerateFiles">
															<target>
																<typeReferenceExpression type="Directory"/>
															</target>
															<parameters>
																<variableReferenceExpression name="cssPath"/>
																<primitiveExpression value="*.css"/>
																<propertyReferenceExpression name="AllDirectories">
																	<typeReferenceExpression type="SearchOption"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</target>
													<statements>
														<variableDeclarationStatement type="System.String" name="css">
															<init>
																<methodInvokeExpression methodName="GetFileName">
																	<target>
																		<typeReferenceExpression type="Path"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="filePath"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<variableDeclarationStatement type="System.String" name="relativePath">
															<init>
																<binaryOperatorExpression operator="Add">
																	<primitiveExpression value="~\"/>
																	<methodInvokeExpression methodName="Substring">
																		<target>
																			<variableReferenceExpression name="filePath"/>
																		</target>
																		<parameters>
																			<propertyReferenceExpression name="Length">
																				<propertyReferenceExpression name="AppDomainAppPath">
																					<typeReferenceExpression type="HttpRuntime"/>
																				</propertyReferenceExpression>
																			</propertyReferenceExpression>
																		</parameters>
																	</methodInvokeExpression>
																</binaryOperatorExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<methodInvokeExpression methodName="AllowTouchUIStylesheet">
																		<parameters>
																			<variableReferenceExpression name="css"/>
																		</parameters>
																	</methodInvokeExpression>
																	<binaryOperatorExpression operator="BooleanOr">
																		<binaryOperatorExpression operator="IdentityEquality">
																			<variableReferenceExpression name="ignoreRegex"/>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="IsMatch">
																				<target>
																					<variableReferenceExpression name="ignoreRegex"/>
																				</target>
																				<parameters>
																					<methodInvokeExpression methodName="Substring">
																						<target>
																							<variableReferenceExpression name="relativePath"/>
																						</target>
																						<parameters>
																							<primitiveExpression value="2"/>
																						</parameters>
																					</methodInvokeExpression>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</binaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="EndsWith">
																				<target>
																					<variableReferenceExpression name="css"/>
																				</target>
																				<parameters>
																					<primitiveExpression value=".min.css"/>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<methodInvokeExpression methodName="Add">
																			<target>
																				<variableReferenceExpression name="customCss"/>
																			</target>
																			<parameters>
																				<variableReferenceExpression name="relativePath"/>
																			</parameters>
																		</methodInvokeExpression>
																	</trueStatements>
																	<falseStatements>
																		<variableDeclarationStatement type="System.Int32" name="index">
																			<init>
																				<methodInvokeExpression methodName="IndexOf">
																					<target>
																						<variableReferenceExpression name="customCss"/>
																					</target>
																					<parameters>
																						<binaryOperatorExpression operator="Add">
																							<methodInvokeExpression methodName="Substring">
																								<target>
																									<variableReferenceExpression name="css"/>
																								</target>
																								<parameters>
																									<primitiveExpression value="0"/>
																									<binaryOperatorExpression operator="Subtract">
																										<propertyReferenceExpression name="Length">
																											<variableReferenceExpression name="css"/>
																										</propertyReferenceExpression>
																										<primitiveExpression value="7"/>
																									</binaryOperatorExpression>
																								</parameters>
																							</methodInvokeExpression>
																							<primitiveExpression value="css"/>
																						</binaryOperatorExpression>
																					</parameters>
																				</methodInvokeExpression>
																			</init>
																		</variableDeclarationStatement>
																		<conditionStatement>
																			<condition>
																				<binaryOperatorExpression operator="GreaterThan">
																					<variableReferenceExpression name="index"/>
																					<primitiveExpression value="-1"/>
																				</binaryOperatorExpression>
																			</condition>
																			<trueStatements>
																				<assignStatement>
																					<arrayIndexerExpression>
																						<target>
																							<variableReferenceExpression name="customCss"/>
																						</target>
																						<indices>
																							<variableReferenceExpression name="index"/>
																						</indices>
																					</arrayIndexerExpression>
																					<variableReferenceExpression name="relativePath"/>
																				</assignStatement>
																			</trueStatements>
																			<falseStatements>
																				<methodInvokeExpression methodName="Add">
																					<target>
																						<variableReferenceExpression name="customCss"/>
																					</target>
																					<parameters>
																						<variableReferenceExpression name="relativePath"/>
																					</parameters>
																				</methodInvokeExpression>
																			</falseStatements>
																		</conditionStatement>
																	</falseStatements>
																</conditionStatement>
															</trueStatements>
														</conditionStatement>
													</statements>
												</foreachStatement>
											</trueStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<propertyReferenceExpression name="Cache">
													<typeReferenceExpression type="HttpRuntime"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="IncludedCss"/>
												<variableReferenceExpression name="customCss"/>
												<variableReferenceExpression name="dep"/>
												<propertyReferenceExpression name="NoAbsoluteExpiration">
													<typeReferenceExpression type="Cache"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="NoSlidingExpiration">
													<typeReferenceExpression type="Cache"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="Default">
													<typeReferenceExpression type="CacheItemPriority"/>
												</propertyReferenceExpression>
												<primitiveExpression value="null"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<methodInvokeExpression methodName="AddRange">
									<target>
										<variableReferenceExpression name="stylesheets"/>
									</target>
									<parameters>
										<variableReferenceExpression name="customCss"/>
									</parameters>
								</methodInvokeExpression>
								<methodReturnStatement>
									<variableReferenceExpression name="stylesheets"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- field CssUrlRegex -->
						<memberField type="Regex" name="CssUrlRegex">
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[(?'Header'\burl\s*\(\s*(\"|\')?)(?'Name'[\w/\.]+)(?'Symbol'\S)]]></xsl:attribute>
										</primitiveExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- method DoReplaceCssUrl(Match) -->
						<memberMethod returnType="System.String" name="DoReplaceCssUrl">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="Match" name="m"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="header">
									<init>
										<propertyReferenceExpression name="Value">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Groups">
														<argumentReferenceExpression name="m"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="Header"/>
												</indices>
											</arrayIndexerExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="name">
									<init>
										<propertyReferenceExpression name="Value">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Groups">
														<argumentReferenceExpression name="m"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="Name"/>
												</indices>
											</arrayIndexerExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="symbol">
									<init>
										<propertyReferenceExpression name="Value">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Groups">
														<argumentReferenceExpression name="m"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="Symbol"/>
												</indices>
											</arrayIndexerExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="BooleanOr">
												<binaryOperatorExpression operator="ValueEquality">
													<variableReferenceExpression name="name"/>
													<primitiveExpression value="data"/>
												</binaryOperatorExpression>
												<methodInvokeExpression methodName="StartsWith">
													<target>
														<variableReferenceExpression name="name"/>
													</target>
													<parameters>
														<primitiveExpression value="http"/>
													</parameters>
												</methodInvokeExpression>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="ValueEquality">
												<variableReferenceExpression name="symbol"/>
												<primitiveExpression value=":"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<propertyReferenceExpression name="Value">
												<argumentReferenceExpression name="m"/>
											</propertyReferenceExpression>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="appPath">
									<init>
										<propertyReferenceExpression name="ApplicationPath">
											<propertyReferenceExpression name="Request">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<methodInvokeExpression methodName="EndsWith">
												<target>
													<variableReferenceExpression name="appPath"/>
												</target>
												<parameters>
													<primitiveExpression value="/"/>
												</parameters>
											</methodInvokeExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="appPath"/>
											<binaryOperatorExpression operator="Add">
												<variableReferenceExpression name="appPath"/>
												<primitiveExpression value="/"/>
											</binaryOperatorExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<variableReferenceExpression name="name"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<typeReferenceExpression type="Regex"/>
										</target>
										<parameters>
											<variableReferenceExpression name="name"/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[^(\.\.\/)+]]></xsl:attribute>
											</primitiveExpression>
											<variableReferenceExpression name="appPath"/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<methodReturnStatement>
									<binaryOperatorExpression operator="Add">
										<variableReferenceExpression name="header"/>
										<binaryOperatorExpression operator="Add">
											<variableReferenceExpression name="name"/>
											<variableReferenceExpression name="symbol"/>
										</binaryOperatorExpression>
									</binaryOperatorExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method CombineTouchUIStylesheets(HttpContext)-->
						<memberMethod returnType="System.String" name="CombineTouchUIStylesheets">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="HttpContext" name="context"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="HttpResponse" name="response">
									<init>
										<propertyReferenceExpression name="Response">
											<argumentReferenceExpression name="context"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="HttpCachePolicy" name="cache">
									<init>
										<propertyReferenceExpression name="Cache">
											<variableReferenceExpression name="response"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<methodInvokeExpression methodName="SetCacheability">
									<target>
										<variableReferenceExpression name="cache"/>
									</target>
									<parameters>
										<propertyReferenceExpression name="Public">
											<typeReferenceExpression type="HttpCacheability"/>
										</propertyReferenceExpression>
									</parameters>
								</methodInvokeExpression>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="VaryByHeaders">
												<variableReferenceExpression name="cache"/>
											</propertyReferenceExpression>
										</target>
										<indices>
											<primitiveExpression value="User-Agent"/>
										</indices>
									</arrayIndexerExpression>
									<primitiveExpression value="true"/>
								</assignStatement>
								<methodInvokeExpression methodName="SetOmitVaryStar">
									<target>
										<variableReferenceExpression name="cache"/>
									</target>
									<parameters>
										<primitiveExpression value="true"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="SetExpires">
									<target>
										<variableReferenceExpression name="cache"/>
									</target>
									<parameters>
										<methodInvokeExpression methodName="AddDays">
											<target>
												<propertyReferenceExpression name="Now">
													<typeReferenceExpression type="DateTime"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="365"/>
											</parameters>
										</methodInvokeExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="SetValidUntilExpires">
									<target>
										<variableReferenceExpression name="cache"/>
									</target>
									<parameters>
										<primitiveExpression value="true"/>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="SetLastModifiedFromFileDependencies">
									<target>
										<variableReferenceExpression name="cache"/>
									</target>
								</methodInvokeExpression>
								<comment>combine scripts</comment>
								<variableDeclarationStatement type="System.String" name="contentFramework">
									<init>
										<arrayIndexerExpression>
											<target>
												<propertyReferenceExpression name="QueryString">
													<propertyReferenceExpression name="Request">
														<variableReferenceExpression name="context"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<indices>
												<primitiveExpression value="_cf"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Boolean" name="includeBootstrap">
									<init>
										<binaryOperatorExpression operator="ValueEquality">
											<variableReferenceExpression name="contentFramework"/>
											<primitiveExpression value="bootstrap"/>
										</binaryOperatorExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="StringBuilder" name="sb">
									<init>
										<objectCreateExpression type="StringBuilder"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="ApplicationServices" name="services">
									<init>
										<methodInvokeExpression methodName="Create"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="System.String" name="stylesheet"/>
									<target>
										<methodInvokeExpression methodName="EnumerateTouchUIStylesheets">
											<target>
												<variableReferenceExpression name="services"/>
											</target>
										</methodInvokeExpression>
									</target>
									<statements>
										<variableDeclarationStatement type="System.String" name="cssName">
											<init>
												<methodInvokeExpression methodName="GetFileName">
													<target>
														<typeReferenceExpression type="Path"/>
													</target>
													<parameters>
														<variableReferenceExpression name="stylesheet"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanOr">
													<variableReferenceExpression name="includeBootstrap"/>
													<unaryOperatorExpression operator="Not">
														<methodInvokeExpression methodName="StartsWith">
															<target>
																<variableReferenceExpression name="cssName"/>
															</target>
															<parameters>
																<primitiveExpression value="bootstrap"/>
															</parameters>
														</methodInvokeExpression>
													</unaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="StartsWith">
															<target>
																<variableReferenceExpression name="cssName"/>
															</target>
															<parameters>
																<primitiveExpression value="touch-theme."/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="AppendLine">
															<target>
																<variableReferenceExpression name="sb"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="Compile">
																	<target>
																		<typeReferenceExpression type="StylesheetGenerator"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="cssName"/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
													<falseStatements>
														<variableDeclarationStatement type="System.String" name="data">
															<init>
																<primitiveExpression value="null"/>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<variableReferenceExpression name="stylesheet"/>
																	<primitiveExpression value="~\css\daf\add.min.css"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="data"/>
																	<methodInvokeExpression methodName="AddStyleSheets">
																		<target>
																			<propertyReferenceExpression name="Current">
																				<typeReferenceExpression type="ApplicationServices"/>
																			</propertyReferenceExpression>
																		</target>
																	</methodInvokeExpression>
																</assignStatement>
															</trueStatements>
															<falseStatements>
																<assignStatement>
																	<variableReferenceExpression name="data"/>
																	<methodInvokeExpression methodName="ReadAllText">
																		<target>
																			<typeReferenceExpression type="File"/>
																		</target>
																		<parameters>
																			<methodInvokeExpression methodName="MapPath">
																				<target>
																					<propertyReferenceExpression name="Server">
																						<propertyReferenceExpression name="Current">
																							<typeReferenceExpression type="HttpContext"/>
																						</propertyReferenceExpression>
																					</propertyReferenceExpression>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="stylesheet"/>
																				</parameters>
																			</methodInvokeExpression>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
															</falseStatements>
														</conditionStatement>
														<assignStatement>
															<variableReferenceExpression name="data"/>
															<methodInvokeExpression methodName="Replace">
																<target>
																	<propertyReferenceExpression name="CssUrlRegex"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="data"/>
																	<addressOfExpression>
																		<methodReferenceExpression methodName="DoReplaceCssUrl"/>
																	</addressOfExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<conditionStatement>
															<condition>
																<unaryOperatorExpression operator="Not">
																	<methodInvokeExpression methodName="Contains">
																		<target>
																			<variableReferenceExpression name="data"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="@import url"/>
																		</parameters>
																	</methodInvokeExpression>
																</unaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="AppendLine">
																	<target>
																		<variableReferenceExpression name="sb"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="data"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
															<falseStatements>
																<methodInvokeExpression methodName="Insert">
																	<target>
																		<variableReferenceExpression name="sb"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="0"/>
																		<variableReferenceExpression name="data"/>
																	</parameters>
																</methodInvokeExpression>
															</falseStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ToString">
										<target>
											<variableReferenceExpression name="sb"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property DefaultExcludeScriptRegex-->
						<memberField type="Regex" name="DefaultExcludeScriptRegex">
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[^(daf\\|sys\\|lib\\|surveys\\|_references\.js)|((.+?)\.(\w\w(\-\w+)*)\.js$)]]></xsl:attribute>
										</primitiveExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- method ConfigureScripts(List<ScriptReference>)-->
						<memberMethod name="ConfigureScripts">
							<attributes public="true"/>
							<parameters>
								<parameter type="List" name="scripts">
									<typeArguments>
										<typeReference type="ScriptReference"/>
									</typeArguments>
								</parameter>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="jsPath">
									<init>
										<methodInvokeExpression methodName="Combine">
											<target>
												<typeReferenceExpression type="Path"/>
											</target>
											<parameters>
												<propertyReferenceExpression name="AppDomainAppPath">
													<typeReferenceExpression type="HttpRuntime"/>
												</propertyReferenceExpression>
												<primitiveExpression value="js"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="List" name="includedScripts">
									<typeArguments>
										<typeReference type="System.String"/>
									</typeArguments>
									<init>
										<castExpression targetType="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Cache">
														<typeReferenceExpression type="HttpRuntime"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="IncludedScripts"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<variableReferenceExpression name="includedScripts"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="includedScripts"/>
											<objectCreateExpression type="List">
												<typeArguments>
													<typeReference type="System.String"/>
												</typeArguments>
											</objectCreateExpression>
										</assignStatement>
										<variableDeclarationStatement type="CacheDependency" name="dep">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="Exists">
													<target>
														<typeReferenceExpression type="Directory"/>
													</target>
													<parameters>
														<variableReferenceExpression name="jsPath"/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="dep"/>
													<objectCreateExpression type="FolderCacheDependency">
														<parameters>
															<variableReferenceExpression name="jsPath"/>
															<primitiveExpression value="*.js"/>
														</parameters>
													</objectCreateExpression>
												</assignStatement>
												<variableDeclarationStatement type="System.String" name="ignorePath">
													<init>
														<methodInvokeExpression methodName="Combine">
															<target>
																<typeReferenceExpression type="Path"/>
															</target>
															<parameters>
																<variableReferenceExpression name="jsPath"/>
																<primitiveExpression value="_ignore.txt"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="Regex" name="ignoreRegex">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="Exists">
															<target>
																<typeReferenceExpression type="File"/>
															</target>
															<parameters>
																<variableReferenceExpression name="ignorePath"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="ignoreRegex"/>
															<methodInvokeExpression methodName="BuildSearchPathRegex">
																<parameters>
																	<methodInvokeExpression methodName="ReadAllLines">
																		<target>
																			<typeReferenceExpression type="File"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="ignorePath"/>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<foreachStatement>
													<variable type="System.String" name="file"/>
													<target>
														<methodInvokeExpression methodName="EnumerateFiles">
															<target>
																<typeReferenceExpression type="Directory"/>
															</target>
															<parameters>
																<variableReferenceExpression name="jsPath"/>
																<primitiveExpression value="*.js"/>
																<propertyReferenceExpression name="AllDirectories">
																	<typeReferenceExpression type="SearchOption"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</target>
													<statements>
														<variableDeclarationStatement type="System.String" name="relativeFile">
															<init>
																<methodInvokeExpression methodName="Substring">
																	<target>
																		<variableReferenceExpression name="file"/>
																	</target>
																	<parameters>
																		<binaryOperatorExpression operator="Add">
																			<propertyReferenceExpression name="Length">
																				<variableReferenceExpression name="jsPath"/>
																			</propertyReferenceExpression>
																			<primitiveExpression value="1"/>
																		</binaryOperatorExpression>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<binaryOperatorExpression operator="BooleanOr">
																		<binaryOperatorExpression operator="IdentityEquality">
																			<variableReferenceExpression name="ignoreRegex"/>
																			<primitiveExpression value="null"/>
																		</binaryOperatorExpression>
																		<unaryOperatorExpression operator="Not">
																			<methodInvokeExpression methodName="IsMatch">
																				<target>
																					<variableReferenceExpression name="ignoreRegex"/>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="relativeFile"/>
																				</parameters>
																			</methodInvokeExpression>
																		</unaryOperatorExpression>
																	</binaryOperatorExpression>
																	<unaryOperatorExpression  operator="Not">
																		<methodInvokeExpression methodName="IsMatch">
																			<target>
																				<propertyReferenceExpression name="DefaultExcludeScriptRegex"/>
																			</target>
																			<parameters>
																				<variableReferenceExpression name="relativeFile"/>
																			</parameters>
																		</methodInvokeExpression>
																	</unaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<methodInvokeExpression methodName="Add">
																	<target>
																		<variableReferenceExpression name="includedScripts"/>
																	</target>
																	<parameters>
																		<binaryOperatorExpression operator="Add">
																			<primitiveExpression value="~/"/>
																			<methodInvokeExpression methodName="Replace">
																				<target>
																					<methodInvokeExpression methodName="Substring">
																						<target>
																							<variableReferenceExpression name="file"/>
																						</target>
																						<parameters>
																							<propertyReferenceExpression name="Length">
																								<propertyReferenceExpression name="AppDomainAppPath">
																									<typeReferenceExpression type="HttpRuntime"/>
																								</propertyReferenceExpression>
																							</propertyReferenceExpression>
																						</parameters>
																					</methodInvokeExpression>
																				</target>
																				<parameters>
																					<primitiveExpression value="\"/>
																					<primitiveExpression value="/"/>
																				</parameters>
																			</methodInvokeExpression>
																		</binaryOperatorExpression>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
													</statements>
												</foreachStatement>
												<variableDeclarationStatement type="System.Int32" name="i">
													<init>
														<primitiveExpression value="0"/>
													</init>
												</variableDeclarationStatement>
												<whileStatement>
													<test>
														<binaryOperatorExpression operator="LessThan">
															<variableReferenceExpression name="i"/>
															<propertyReferenceExpression name="Count">
																<variableReferenceExpression name="includedScripts"/>
															</propertyReferenceExpression>
														</binaryOperatorExpression>
													</test>
													<statements>
														<variableDeclarationStatement type="System.String" name="scriptName">
															<init>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="includedScripts"/>
																	</target>
																	<indices>
																		<variableReferenceExpression name="i"/>
																	</indices>
																</arrayIndexerExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="EndsWith">
																	<target>
																		<variableReferenceExpression name="scriptName"/>
																	</target>
																	<parameters>
																		<primitiveExpression value=".min.js"/>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<conditionStatement>
																	<condition>
																		<propertyReferenceExpression name="EnableMinifiedScript">
																			<typeReferenceExpression type="AquariumExtenderBase"/>
																		</propertyReferenceExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="scriptName"/>
																			<binaryOperatorExpression operator="Add">
																				<methodInvokeExpression methodName="Substring">
																					<target>
																						<variableReferenceExpression name="scriptName"/>
																					</target>
																					<parameters>
																						<primitiveExpression value="0"/>
																						<binaryOperatorExpression operator="Subtract">
																							<propertyReferenceExpression name="Length">
																								<variableReferenceExpression name="scriptName"/>
																							</propertyReferenceExpression>
																							<primitiveExpression value="7"/>
																						</binaryOperatorExpression>
																					</parameters>
																				</methodInvokeExpression>
																				<primitiveExpression value=".js"/>
																			</binaryOperatorExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
																<methodInvokeExpression methodName="Remove">
																	<target>
																		<variableReferenceExpression name="includedScripts"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="scriptName"/>
																	</parameters>
																</methodInvokeExpression>
															</trueStatements>
															<falseStatements>
																<assignStatement>
																	<variableReferenceExpression name="i"/>
																	<binaryOperatorExpression operator="Add">
																		<variableReferenceExpression name="i"/>
																		<primitiveExpression value="1"/>
																	</binaryOperatorExpression>
																</assignStatement>
															</falseStatements>
														</conditionStatement>
													</statements>
												</whileStatement>
											</trueStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<propertyReferenceExpression name="Cache">
													<typeReferenceExpression type="HttpRuntime"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="IncludedScripts"/>
												<variableReferenceExpression name="includedScripts"/>
												<variableReferenceExpression name="dep"/>
												<propertyReferenceExpression name="NoAbsoluteExpiration">
													<typeReferenceExpression type="Cache"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="NoSlidingExpiration">
													<typeReferenceExpression type="Cache"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="Default">
													<typeReferenceExpression type="CacheItemPriority"/>
												</propertyReferenceExpression>
												<primitiveExpression value="null"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<foreachStatement>
									<variable type="System.String" name="file"/>
									<target>
										<variableReferenceExpression name="includedScripts"/>
									</target>
									<statements>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="scripts"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="CreateScriptReference">
													<target>
														<typeReferenceExpression type="AquariumExtenderBase"/>
													</target>
													<parameters>
														<variableReferenceExpression name="file"/>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</foreachStatement>
							</statements>
						</memberMethod>
						<!-- method BuildSearchPathRegex(string[])-->
						<memberMethod returnType="Regex" name="BuildSearchPathRegex">
							<attributes />
							<parameters>
								<parameter type="System.String[]" name="paths"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="Length">
												<variableReferenceExpression name="paths"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="null"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="StringBuilder" name="sb">
									<init>
										<objectCreateExpression type="StringBuilder"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="System.String" name="path"/>
									<target>
										<variableReferenceExpression name="paths"/>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueInequality">
													<propertyReferenceExpression name="Length">
														<variableReferenceExpression name="sb"/>
													</propertyReferenceExpression>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Append">
													<target>
														<variableReferenceExpression name="sb"/>
													</target>
													<parameters>
														<primitiveExpression value="|"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="AppendFormat">
											<target>
												<variableReferenceExpression name="sb"/>
											</target>
											<parameters>
												<primitiveExpression value="({{0}})"/>
												<methodInvokeExpression methodName="Replace">
													<target>
														<methodInvokeExpression methodName="Escape">
															<target>
																<typeReferenceExpression type="Regex"/>
															</target>
															<parameters>
																<methodInvokeExpression methodName="Replace">
																	<target>
																		<methodInvokeExpression methodName="Trim">
																			<target>
																				<variableReferenceExpression name="path"/>
																			</target>
																		</methodInvokeExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="/"/>
																		<primitiveExpression value="\"/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</target>
													<parameters>
														<primitiveExpression value="\*"/>
														<primitiveExpression value=".*"/>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</foreachStatement>
								<methodReturnStatement>
									<objectCreateExpression type="Regex">
										<parameters>
											<methodInvokeExpression methodName="ToString">
												<target>
													<variableReferenceExpression name="sb"/>
												</target>
											</methodInvokeExpression>
										</parameters>
									</objectCreateExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method CompressOutput(HttpContext, string) -->
						<memberMethod name="CompressOutput">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="HttpContext" name="context"/>
								<parameter type="System.String" name="data"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="HttpRequest" name="request">
									<init>
										<propertyReferenceExpression name="Request">
											<argumentReferenceExpression name="context"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="HttpResponse" name="response">
									<init>
										<propertyReferenceExpression name="Response">
											<argumentReferenceExpression name="context"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="acceptEncoding">
									<init>
										<arrayIndexerExpression>
											<target>
												<propertyReferenceExpression name="Headers">
													<variableReferenceExpression name="request"/>
												</propertyReferenceExpression>
											</target>
											<indices>
												<primitiveExpression value="Accept-Encoding"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<variableReferenceExpression name="acceptEncoding"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="Contains">
													<target>
														<variableReferenceExpression name="acceptEncoding"/>
													</target>
													<parameters>
														<primitiveExpression value="gzip"/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<propertyReferenceExpression name="Filter">
														<variableReferenceExpression name="response"/>
													</propertyReferenceExpression>
													<objectCreateExpression type="GZipStream">
														<parameters>
															<propertyReferenceExpression name="Filter">
																<variableReferenceExpression name="response"/>
															</propertyReferenceExpression>
															<propertyReferenceExpression name="Compress">
																<typeReferenceExpression type="CompressionMode"/>
															</propertyReferenceExpression>
														</parameters>
													</objectCreateExpression>
												</assignStatement>
												<methodInvokeExpression methodName="AppendHeader">
													<target>
														<variableReferenceExpression name="response"/>
													</target>
													<parameters>
														<primitiveExpression value="Content-Encoding"/>
														<primitiveExpression  value="gzip"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
											<falseStatements>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="Contains">
															<target>
																<variableReferenceExpression name="acceptEncoding"/>
															</target>
															<parameters>
																<primitiveExpression value="deflate"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<propertyReferenceExpression name="Filter">
																<variableReferenceExpression name="response"/>
															</propertyReferenceExpression>
															<objectCreateExpression type="DeflateStream">
																<parameters>
																	<propertyReferenceExpression name="Filter">
																		<variableReferenceExpression name="response"/>
																	</propertyReferenceExpression>
																	<propertyReferenceExpression name="Compress">
																		<typeReferenceExpression type="CompressionMode"/>
																	</propertyReferenceExpression>
																</parameters>
															</objectCreateExpression>
														</assignStatement>
														<methodInvokeExpression methodName="AppendHeader">
															<target>
																<variableReferenceExpression name="response"/>
															</target>
															<parameters>
																<primitiveExpression value="Content-Encoding"/>
																<primitiveExpression  value="deflate"/>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="System.Byte[]" name="output">
									<init>
										<methodInvokeExpression methodName="GetBytes">
											<target>
												<propertyReferenceExpression name="UTF8">
													<typeReferenceExpression type="Encoding"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<argumentReferenceExpression name="data"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="ContentEncoding">
										<variableReferenceExpression name="response"/>
									</propertyReferenceExpression>
									<propertyReferenceExpression name="Unicode">
										<typeReferenceExpression type="Encoding"/>
									</propertyReferenceExpression>
								</assignStatement>
								<methodInvokeExpression methodName="AppendHeader">
									<target>
										<variableReferenceExpression name="response"/>
									</target>
									<parameters>
										<primitiveExpression value="Content-Length"/>
										<methodInvokeExpression methodName="ToString">
											<target>
												<propertyReferenceExpression name="Length">
													<variableReferenceExpression name="output"/>
												</propertyReferenceExpression>
											</target>
										</methodInvokeExpression>
									</parameters>
								</methodInvokeExpression>
								<methodInvokeExpression methodName="Write">
									<target>
										<propertyReferenceExpression name="OutputStream">
											<variableReferenceExpression name="response"/>
										</propertyReferenceExpression>
									</target>
									<parameters>
										<variableReferenceExpression name="output"/>
										<primitiveExpression value="0"/>
										<propertyReferenceExpression name="Length">
											<variableReferenceExpression name="output"/>
										</propertyReferenceExpression>
									</parameters>
								</methodInvokeExpression>
								<tryStatement>
									<statements>
										<methodInvokeExpression methodName="Flush">
											<target>
												<variableReferenceExpression name="response"/>
											</target>
										</methodInvokeExpression>
									</statements>
									<catch exceptionType="Exception"></catch>
								</tryStatement>
							</statements>
						</memberMethod>
						<!-- field RequestHandlers-->
						<memberField type="SortedDictionary" name="RequestHandlers">
							<typeArguments>
								<typeReference type="System.String"/>
								<typeReference type="ServiceRequestHandler"/>
							</typeArguments>
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="SortedDictionary">
									<typeArguments>
										<typeReference type="System.String"/>
										<typeReference type="ServiceRequestHandler"/>
									</typeArguments>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- method HandleServiceRequest(HttpContext)-->
						<memberMethod name="HandleServiceRequest">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="HttpContext" name="context"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="methodName">
									<init>
										<methodInvokeExpression methodName="ToLowerInvariant">
											<target>
												<propertyReferenceExpression name="AppRelativeCurrentExecutionFilePath">
													<propertyReferenceExpression name="Request">
														<variableReferenceExpression name="context"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="StartsWith">
											<target>
												<variableReferenceExpression name="methodName"/>
											</target>
											<parameters>
												<propertyReferenceExpression name="DefaultServicePath">
													<typeReferenceExpression type="AquariumExtenderBase"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="methodName"/>
											<methodInvokeExpression methodName="Substring">
												<target>
													<variableReferenceExpression name="methodName"/>
												</target>
												<parameters>
													<binaryOperatorExpression operator="Add">
														<propertyReferenceExpression name="Length">
															<propertyReferenceExpression name="DefaultServicePath">
																<typeReferenceExpression type="AquariumExtenderBase"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
														<primitiveExpression value="1"/>
													</binaryOperatorExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="StartsWith">
													<target>
														<variableReferenceExpression name="methodName"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="AppServicePath">
															<typeReferenceExpression type="AquariumExtenderBase"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="methodName"/>
													<methodInvokeExpression methodName="Substring">
														<target>
															<variableReferenceExpression name="methodName"/>
														</target>
														<parameters>
															<binaryOperatorExpression operator="Add">
																<propertyReferenceExpression name="Length">
																	<propertyReferenceExpression name="AppServicePath">
																		<typeReferenceExpression type="AquariumExtenderBase"/>
																	</propertyReferenceExpression>
																</propertyReferenceExpression>
																<primitiveExpression value="1"/>
															</binaryOperatorExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<variableReferenceExpression name="methodName"/>
													<primitiveExpression value="v2"/>
												</assignStatement>
											</falseStatements>
										</conditionStatement>
									</falseStatements>
								</conditionStatement>
								<variableDeclarationStatement name="indexOfSlash">
									<init>
										<methodInvokeExpression methodName="IndexOf">
											<target>
												<variableReferenceExpression name="methodName"/>
											</target>
											<parameters>
												<primitiveExpression value="/"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueInequality">
											<variableReferenceExpression name="indexOfSlash"/>
											<primitiveExpression value="-1"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="methodName"/>
											<methodInvokeExpression methodName="Substring">
												<target>
													<variableReferenceExpression name="methodName"/>
												</target>
												<parameters>
													<primitiveExpression value="0"/>
													<variableReferenceExpression name="indexOfSlash"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<variableReferenceExpression name="methodName"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<throwExceptionStatement>
											<objectCreateExpression type="HttpException">
												<parameters>
													<primitiveExpression value="400"/>
													<primitiveExpression value="Method not specified."/>
												</parameters>
											</objectCreateExpression>
										</throwExceptionStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="ServiceRequestHandler" name="handler">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<variableReferenceExpression name="methodName"/>
									<methodInvokeExpression methodName="ToLower">
										<target>
											<variableReferenceExpression name="methodName"/>
										</target>
									</methodInvokeExpression>
								</assignStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<methodInvokeExpression methodName="TryGetValue">
												<target>
													<propertyReferenceExpression name="RequestHandlers"/>
												</target>
												<parameters>
													<variableReferenceExpression name="methodName"/>
													<directionExpression direction="Out">
														<variableReferenceExpression name="handler"/>
													</directionExpression>
												</parameters>
											</methodInvokeExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<foreachStatement>
											<variable type="KeyValuePair" name="kv">
												<typeArguments>
													<typeReference type="System.String"/>
													<typeReference type="ServiceRequestHandler"/>
												</typeArguments>
											</variable>
											<target>
												<propertyReferenceExpression name="RequestHandlers"/>
											</target>
											<statements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueEquality">
															<propertyReferenceExpression name="Key">
																<variableReferenceExpression name="kv"/>
															</propertyReferenceExpression>
															<variableReferenceExpression name="methodName"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<comment>Method TryGetValue does not locate "logout" key when vi-VN culture is set.</comment>
														<comment>The full scan will locate the handler in this and other similar situations.</comment>
														<assignStatement>
															<variableReferenceExpression name="handler"/>
															<propertyReferenceExpression name="Value">
																<variableReferenceExpression name="kv"/>
															</propertyReferenceExpression>
														</assignStatement>
														<breakStatement/>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="handler"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="JObject" name="args">
											<init>
												<methodInvokeExpression methodName="ToJson">
													<target>
														<typeReferenceExpression type="RequestValidationServiceBase"/>
													</target>
													<parameters>
														<variableReferenceExpression name="context"/>
														<variableReferenceExpression name="handler"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.Object" name="result">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IsTypeOf">
														<variableReferenceExpression name="args"/>
														<typeReferenceExpression type="JObject"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="IdentityInequality">
														<arrayIndexerExpression>
															<target>
																<castExpression targetType="JObject">
																	<argumentReferenceExpression name="args"/>
																</castExpression>
															</target>
															<indices>
																<primitiveExpression value="error"/>
															</indices>
														</arrayIndexerExpression>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="result"/>
													<argumentReferenceExpression name="args"/>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<tryStatement>
													<statements>
														<variableDeclarationStatement name="allowedMethods">
															<init>
																<propertyReferenceExpression name="AllowedMethods">
																	<variableReferenceExpression name="handler"/>
																</propertyReferenceExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<binaryOperatorExpression operator="IdentityInequality">
																		<variableReferenceExpression name="allowedMethods"/>
																		<primitiveExpression value="null"/>
																	</binaryOperatorExpression>
																	<unaryOperatorExpression operator="Not">
																		<methodInvokeExpression methodName="Contains">
																			<target>
																				<variableReferenceExpression name="allowedMethods"/>
																			</target>
																			<parameters>
																				<propertyReferenceExpression name="HttpMethod">
																					<propertyReferenceExpression name="Request">
																						<variableReferenceExpression name="context"/>
																					</propertyReferenceExpression>
																				</propertyReferenceExpression>
																			</parameters>
																		</methodInvokeExpression>
																	</unaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<throwExceptionStatement>
																	<objectCreateExpression type="HttpException">
																		<parameters>
																			<primitiveExpression value="405"/>
																			<stringFormatExpression>
																				<xsl:attribute name="format"><![CDATA[Method {0} is not allowed.]]></xsl:attribute>
																				<propertyReferenceExpression name="HttpMethod">
																					<propertyReferenceExpression name="Request">
																						<variableReferenceExpression name="context"/>
																					</propertyReferenceExpression>
																				</propertyReferenceExpression>
																			</stringFormatExpression>
																		</parameters>
																	</objectCreateExpression>
																</throwExceptionStatement>
															</trueStatements>
														</conditionStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanAnd">
																	<propertyReferenceExpression name="RequiresAuthentication">
																		<variableReferenceExpression name="handler"/>
																	</propertyReferenceExpression>
																	<unaryOperatorExpression operator="Not">
																		<propertyReferenceExpression name="IsAuthenticated">
																			<propertyReferenceExpression name="Request">
																				<variableReferenceExpression name="context"/>
																			</propertyReferenceExpression>
																		</propertyReferenceExpression>
																	</unaryOperatorExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<throwExceptionStatement>
																	<objectCreateExpression type="HttpException">
																		<parameters>
																			<primitiveExpression value="403"/>
																			<primitiveExpression value="Requires authentication."/>
																		</parameters>
																	</objectCreateExpression>
																</throwExceptionStatement>
															</trueStatements>
														</conditionStatement>
														<variableDeclarationStatement name="controllerService">
															<init>
																<objectCreateExpression type="DataControllerService"/>
															</init>
														</variableDeclarationStatement>
														<assignStatement>
															<variableReferenceExpression name="result"/>
															<methodInvokeExpression methodName="Validate">
																<target>
																	<variableReferenceExpression name="handler"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="controllerService"/>
																	<variableReferenceExpression name="args"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="IdentityEquality">
																	<variableReferenceExpression name="result"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="result"/>
																	<methodInvokeExpression methodName="HandleRequest">
																		<target>
																			<variableReferenceExpression name="handler"/>
																		</target>
																		<parameters>
																			<variableReferenceExpression name="controllerService"/>
																			<variableReferenceExpression name="args"/>
																		</parameters>
																	</methodInvokeExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
													</statements>
													<catch exceptionType="ServiceRequestRedirectException" localName="rex">
														<assignStatement>
															<variableReferenceExpression name="result"/>
															<objectCreateExpression type="JObject"/>
														</assignStatement>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<castExpression targetType="JObject">
																		<variableReferenceExpression name="result"/>
																	</castExpression>
																</target>
																<indices>
																	<primitiveExpression value="RedirectUrl"/>
																</indices>
															</arrayIndexerExpression>
															<propertyReferenceExpression name="RedirectUrl">
																<variableReferenceExpression name="rex"/>
															</propertyReferenceExpression>
														</assignStatement>
													</catch>
													<catch exceptionType="ThreadAbortException">
														<comment>The response was ended - do nothing</comment>
													</catch>
													<catch exceptionType="Exception" localName="ex">
														<assignStatement>
															<variableReferenceExpression name="result"/>
															<methodInvokeExpression methodName="HandleException">
																<target>
																	<variableReferenceExpression name="handler"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="args"/>
																	<variableReferenceExpression name="ex"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</catch>
												</tryStatement>
											</falseStatements>
										</conditionStatement>
										<methodInvokeExpression methodName="ClearHeaders">
											<target>
												<variableReferenceExpression name="handler"/>
											</target>
										</methodInvokeExpression>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="result"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement type="System.String" name="output" var="false"/>
												<variableDeclarationStatement name="contentType">
													<init>
														<methodInvokeExpression methodName="OutputContentType">
															<target>
																<variableReferenceExpression name="handler"/>
															</target>
														</methodInvokeExpression>
													</init>
												</variableDeclarationStatement>
												<assignStatement>
													<propertyReferenceExpression name="ContentType">
														<propertyReferenceExpression name="Response">
															<argumentReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
													<binaryOperatorExpression operator="Add">
														<variableReferenceExpression name="contentType"/>
														<primitiveExpression value="; charset=utf-8"/>
													</binaryOperatorExpression>
												</assignStatement>
												<variableDeclarationStatement type="System.Object" name="error" var="false">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<variableDeclarationStatement type="JObject" name="resultJson" var="false">
													<init>
														<primitiveExpression value="null"/>
													</init>
												</variableDeclarationStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IsTypeOf">
															<variableReferenceExpression name="result"/>
															<typeReferenceExpression type="JObject"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="resultJson"/>
															<castExpression targetType="JObject">
																<variableReferenceExpression name="result"/>
															</castExpression>
														</assignStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="ValueEquality">
																	<propertyReferenceExpression name="Count">
																		<variableReferenceExpression name="resultJson"/>
																	</propertyReferenceExpression>
																	<primitiveExpression value="0"/>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<propertyReferenceExpression name="StatusCode">
																		<propertyReferenceExpression name="Response">
																			<argumentReferenceExpression name="context"/>
																		</propertyReferenceExpression>
																	</propertyReferenceExpression>
																	<primitiveExpression value="204"/>
																</assignStatement>
																<methodInvokeExpression methodName="End">
																	<target>
																		<propertyReferenceExpression name="Response">
																			<argumentReferenceExpression name="context"/>
																		</propertyReferenceExpression>
																	</target>
																</methodInvokeExpression>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<variableReferenceExpression name="error"/>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="resultJson"/>
																</target>
																<indices>
																	<primitiveExpression value="error"/>
																</indices>
															</arrayIndexerExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<methodInvokeExpression methodName="Contains">
															<target>
																<variableReferenceExpression name="contentType"/>
															</target>
															<parameters>
																<primitiveExpression value="yaml"/>
															</parameters>
														</methodInvokeExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="output"/>
															<methodInvokeExpression methodName="ToYamlString">
																<target>
																	<typeReferenceExpression type="TextUtility"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="resultJson"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</trueStatements>
													<falseStatements>
														<variableDeclarationStatement name="jsonFormatting">
															<init>
																<propertyReferenceExpression name="None">
																	<typeReferenceExpression type="Formatting"/>
																</propertyReferenceExpression>
															</init>
														</variableDeclarationStatement>
														<conditionStatement>
															<condition>
																<binaryOperatorExpression operator="BooleanOr">
																	<binaryOperatorExpression operator="IdentityInequality">
																		<variableReferenceExpression name="error"/>
																		<primitiveExpression value="null"/>
																	</binaryOperatorExpression>
																	<convertExpression to="Boolean">
																		<methodInvokeExpression methodName="SettingsProperty">
																			<target>
																				<typeReferenceExpression type="ApplicationServicesBase"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="server.rest.output.json.indent"/>
																				<primitiveExpression value="false"/>
																			</parameters>
																		</methodInvokeExpression>
																	</convertExpression>
																</binaryOperatorExpression>
															</condition>
															<trueStatements>
																<assignStatement>
																	<variableReferenceExpression name="jsonFormatting"/>
																	<propertyReferenceExpression name="Indented">
																		<typeReferenceExpression type="Formatting"/>
																	</propertyReferenceExpression>
																</assignStatement>
															</trueStatements>
														</conditionStatement>
														<assignStatement>
															<variableReferenceExpression name="output"/>
															<methodInvokeExpression methodName="SerializeObject">
																<target>
																	<typeReferenceExpression type="JsonConvert"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="result"/>
																	<variableReferenceExpression name="jsonFormatting"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
														<conditionStatement>
															<condition>
																<methodInvokeExpression methodName="Contains">
																	<target>
																		<variableReferenceExpression name="contentType"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="xml"/>
																	</parameters>
																</methodInvokeExpression>
															</condition>
															<trueStatements>
																<variableDeclarationStatement name="rootName">
																	<init>
																		<castExpression targetType="System.String">
																			<arrayIndexerExpression>
																				<target>
																					<propertyReferenceExpression name="Items">
																						<propertyReferenceExpression name="Current">
																							<typeReferenceExpression type="HttpContext"/>
																						</propertyReferenceExpression>
																					</propertyReferenceExpression>
																				</target>
																				<indices>
																					<primitiveExpression value="RESTfulConfiguration_xmlRoot"/>
																				</indices>
																			</arrayIndexerExpression>
																		</castExpression>
																	</init>
																</variableDeclarationStatement>
																<conditionStatement>
																	<condition>
																		<unaryOperatorExpression operator="IsNullOrEmpty">
																			<variableReferenceExpression name="rootName"/>
																		</unaryOperatorExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="rootName"/>
																			<primitiveExpression value="data"/>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
																<assignStatement>
																	<variableReferenceExpression name="output"/>
																	<methodInvokeExpression methodName="ToString">
																		<target>
																			<methodInvokeExpression methodName="DeserializeXNode">
																				<target>
																					<typeReferenceExpression type="JsonConvert"/>
																				</target>
																				<parameters>
																					<variableReferenceExpression name="output"/>
																					<variableReferenceExpression name="rootName"/>
																				</parameters>
																			</methodInvokeExpression>
																		</target>
																	</methodInvokeExpression>
																</assignStatement>
															</trueStatements>
															<falseStatements>
																<conditionStatement>
																	<condition>
																		<propertyReferenceExpression name="WrapOutput">
																			<variableReferenceExpression name="handler"/>
																		</propertyReferenceExpression>
																	</condition>
																	<trueStatements>
																		<assignStatement>
																			<variableReferenceExpression name="output"/>
																			<stringFormatExpression>
																				<xsl:attribute name="format"><![CDATA[{{"d":{0}}}]]></xsl:attribute>
																				<variableReferenceExpression name="output"/>
																			</stringFormatExpression>
																		</assignStatement>
																	</trueStatements>
																</conditionStatement>
															</falseStatements>
														</conditionStatement>
													</falseStatements>
												</conditionStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<binaryOperatorExpression operator="ValueEquality">
																<variableReferenceExpression name="methodName"/>
																<primitiveExpression value="v2"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="BooleanAnd">
																<methodInvokeExpression methodName="IsMatch">
																	<target>
																		<typeReferenceExpression type="Regex"/>
																	</target>
																	<parameters>
																		<propertyReferenceExpression name="HttpMethod">
																			<propertyReferenceExpression name="Request">
																				<argumentReferenceExpression name="context"/>
																			</propertyReferenceExpression>
																		</propertyReferenceExpression>
																		<primitiveExpression value="GET|PUT|PATCH|POST|DELETE"/>
																	</parameters>
																</methodInvokeExpression>
																<binaryOperatorExpression operator="IdentityEquality">
																	<variableReferenceExpression name="error"/>
																	<primitiveExpression value="null"/>
																</binaryOperatorExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="SendETagIfNoneModified">
															<parameters>
																<methodInvokeExpression methodName="GetBytes">
																	<target>
																		<propertyReferenceExpression name="UTF8">
																			<typeReferenceExpression type="Encoding"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="output"/>
																	</parameters>
																</methodInvokeExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<methodInvokeExpression methodName="CompressOutput">
													<target>
														<typeReferenceExpression type="ApplicationServicesBase"/>
													</target>
													<parameters>
														<argumentReferenceExpression name="context"/>
														<methodInvokeExpression methodName="CompressViewPageJsonOutput">
															<parameters>
																<variableReferenceExpression name="output"/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
									<falseStatements>
										<throwExceptionStatement>
											<objectCreateExpression type="HttpException">
												<parameters>
													<primitiveExpression value="404"/>
													<primitiveExpression value="Endpoint not found."/>
												</parameters>
											</objectCreateExpression>
										</throwExceptionStatement>
									</falseStatements>
								</conditionStatement>
								<methodInvokeExpression methodName="End">
									<target>
										<propertyReferenceExpression name="Response">
											<argumentReferenceExpression name="context"/>
										</propertyReferenceExpression>
									</target>
								</methodInvokeExpression>
							</statements>
						</memberMethod>
						<!-- method SendETagIfNoneModified(byte[]) -->
						<memberMethod returnType="System.String" name="SendETagIfNoneModified">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.Byte[]" name="data"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="context">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="HttpContext"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="etag">
									<init>
										<methodInvokeExpression methodName="ToBase64UrlEncoded">
											<target>
												<typeReferenceExpression type="TextUtility"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="GetBytes">
													<target>
														<propertyReferenceExpression name="UTF8">
															<typeReferenceExpression type="Encoding"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<methodInvokeExpression methodName="Hash">
															<target>
																<typeReferenceExpression type="TextUtility"/>
															</target>
															<parameters>
																<argumentReferenceExpression name="data"/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="response">
									<init>
										<propertyReferenceExpression name="Response">
											<variableReferenceExpression name="context"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<methodInvokeExpression methodName="AddHeader">
									<target>
										<variableReferenceExpression name="response"/>
									</target>
									<parameters>
										<primitiveExpression value="ETag"/>
										<variableReferenceExpression name="etag"/>
									</parameters>
								</methodInvokeExpression>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="ValueEquality">
												<propertyReferenceExpression name="HttpMethod">
													<propertyReferenceExpression name="Request">
														<variableReferenceExpression name="context"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
												<primitiveExpression value="GET"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="ValueEquality">
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Headers">
															<propertyReferenceExpression name="Request">
																<variableReferenceExpression name="context"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="If-None-Match"/>
													</indices>
												</arrayIndexerExpression>
												<variableReferenceExpression name="etag"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertyReferenceExpression name="ContentType">
												<variableReferenceExpression name="response"/>
											</propertyReferenceExpression>
											<primitiveExpression value="null"/>
										</assignStatement>
										<methodInvokeExpression methodName="Clear">
											<target>
												<propertyReferenceExpression name="Cookies">
													<variableReferenceExpression name="response"/>
												</propertyReferenceExpression>
											</target>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Remove">
											<target>
												<propertyReferenceExpression name="Headers">
													<variableReferenceExpression name="response"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="Set-Cookie"/>
											</parameters>
										</methodInvokeExpression>
										<assignStatement>
											<propertyReferenceExpression name="StatusCode">
												<variableReferenceExpression name="response"/>
											</propertyReferenceExpression>
											<primitiveExpression value="304"/>
										</assignStatement>
										<methodInvokeExpression methodName="End">
											<target>
												<variableReferenceExpression name="response"/>
											</target>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="etag"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method CompressViewPageJsonOutput(string)-->
						<memberMethod returnType="System.String" name="CompressViewPageJsonOutput">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="output"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.Int32" name="lastIndex">
									<init>
										<primitiveExpression value="0"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Int32" name="lastLength">
									<init>
										<propertyReferenceExpression name="Length">
											<variableReferenceExpression name="output"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<whileStatement>
									<test>
										<primitiveExpression value="true"/>
									</test>
									<statements>
										<variableDeclarationStatement name="startIndex">
											<init>
												<methodInvokeExpression methodName="IndexOf">
													<target>
														<variableReferenceExpression name="output"/>
													</target>
													<parameters>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[{"Controller":]]></xsl:attribute>
														</primitiveExpression>
														<variableReferenceExpression name="lastIndex"/>
														<propertyReferenceExpression name="Ordinal">
															<typeReferenceExpression type="StringComparison"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="dataIndex">
											<init>
												<methodInvokeExpression methodName="IndexOf">
													<target>
														<variableReferenceExpression name="output"/>
													</target>
													<parameters>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[,"NewRow":]]></xsl:attribute>
														</primitiveExpression>
														<variableReferenceExpression name="lastIndex"/>
														<propertyReferenceExpression name="Ordinal">
															<typeReferenceExpression type="StringComparison"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanOr">
													<binaryOperatorExpression operator="LessThan">
														<variableReferenceExpression name="startIndex"/>
														<primitiveExpression value="0"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="LessThan">
														<variableReferenceExpression name="dataIndex"/>
														<primitiveExpression value="0"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<breakStatement/>
											</trueStatements>
										</conditionStatement>

										<variableDeclarationStatement type="System.String" name="metadata">
											<init>
												<binaryOperatorExpression operator="Add">
													<methodInvokeExpression methodName="Substring">
														<target>
															<variableReferenceExpression name="output"/>
														</target>
														<parameters>
															<primitiveExpression value="0"/>
															<variableReferenceExpression name="startIndex"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="Replace">
														<target>
															<propertyReferenceExpression name="ViewPageCompressRegex"/>
														</target>
														<parameters>
															<methodInvokeExpression methodName="Substring">
																<target>
																	<variableReferenceExpression name="output"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="startIndex"/>
																	<binaryOperatorExpression operator="Subtract">
																		<variableReferenceExpression name="dataIndex"/>
																		<variableReferenceExpression name="startIndex"/>
																	</binaryOperatorExpression>
																</parameters>
															</methodInvokeExpression>
															<stringEmptyExpression/>
														</parameters>
													</methodInvokeExpression>
												</binaryOperatorExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="EndsWith">
													<target>
														<variableReferenceExpression name="metadata"/>
													</target>
													<parameters>
														<primitiveExpression value=","/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="metadata"/>
													<methodInvokeExpression methodName="Substring">
														<target>
															<variableReferenceExpression name="metadata"/>
														</target>
														<parameters>
															<primitiveExpression value="0"/>
															<binaryOperatorExpression operator="Subtract">
																<propertyReferenceExpression name="Length">
																	<variableReferenceExpression name="metadata"/>
																</propertyReferenceExpression>
																<primitiveExpression value="1"/>
															</binaryOperatorExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<variableReferenceExpression name="output"/>
											<binaryOperatorExpression operator="Add">
												<methodInvokeExpression methodName="Replace">
													<target>
														<propertyReferenceExpression name="ViewPageCompress2Regex"/>
													</target>
													<parameters>
														<variableReferenceExpression name="metadata"/>
														<primitiveExpression>
															<xsl:attribute name="value"><![CDATA[}$1]]></xsl:attribute>
														</primitiveExpression>
													</parameters>
												</methodInvokeExpression>
												<methodInvokeExpression methodName="Substring">
													<target>
														<variableReferenceExpression name="output"/>
													</target>
													<parameters>
														<variableReferenceExpression name="dataIndex"/>
													</parameters>
												</methodInvokeExpression>
											</binaryOperatorExpression>
										</assignStatement>
										<assignStatement>
											<variableReferenceExpression name="lastIndex"/>
											<binaryOperatorExpression operator="Subtract">
												<binaryOperatorExpression operator="Add">
													<variableReferenceExpression name="dataIndex"/>
													<primitiveExpression value="10"/>
												</binaryOperatorExpression>
												<binaryOperatorExpression operator="Subtract">
													<variableReferenceExpression name="lastLength"/>
													<propertyReferenceExpression name="Length">
														<variableReferenceExpression name="output"/>
													</propertyReferenceExpression>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
										</assignStatement>
										<assignStatement>
											<variableReferenceExpression name="lastLength"/>
											<propertyReferenceExpression name="Length">
												<variableReferenceExpression name="output"/>
											</propertyReferenceExpression>
										</assignStatement>
									</statements>
								</whileStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="output"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property ViewPageCompressRegex -->
						<memberField type="Regex" name="ViewPageCompressRegex">
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[(("(DefaultValue)"\:("[\s\S]*?"))|("(Items|Pivots|Fields|Views|ActionGroups|Categories|Filter|Expressions|Errors)"\:(\[\]))|("(Len|CategoryIndex|Rows|Columns|Search|ItemsPageSize|Aggregate|OnDemandStyle|TextMode|MaskType|AutoCompletePrefixLength|DataViewPageSize|DataViewRefreshInterval|PageOffset)"\:(0))|("(CausesValidation|AllowQBE|AllowSorting|FormatOnClient|HtmlEncode|RequiresMetaData|RequiresRowCount|ShowInSelector|DataViewShow(ActionBar|Description|ViewSelector|PageSize|SearchBar|QuickFind))"\:(true))|("(IsPrimaryKey|ReadOnly|HasDefaultValue|Hidden|AllowLEV|AllowNulls|OnDemand|IsMirror|Calculated|CausesCalculate|IsVirtual|AutoSelect|SearchOnStart|ShowInSummary|ItemsLetters|WhenKeySelected|RequiresSiteContentText|RequiresPivot|RequiresAggregates|Floating|Collapsed|Label|SupportsCaching|AllowDistinctFieldInFilter|Flat|RequiresMetaData|RequiresRowCount|Distinct|(DataView(ShowInSummary|MultiSelect|ShowModalForms|SearchByFirstLetter|SearchOnStart|ShowRowNumber|AutoHighlightFirstRow|AutoSelectFirstRow)))"\:(false))|("(AliasName|Tag|FooterText|ToolTip|Watermark|DataFormatString|Copy|HyperlinkFormatString|SourceFields|SearchOptions|ItemsDataController|ItemsTargetController|ItemsDataView|ItemsDataValueField|ItemsDataTextField|ItemsStyle|ItemsNewDataView|OnDemandHandler|Mask|ContextFields|Formula|Flow|Label|Configuration|Editor|ItemsDescription|Group|CommandName|CommandArgument|HeaderText|Description|CssClass|Confirmation|Notify|Key|WhenLastCommandName|WhenLastCommandArgument|WhenClientScript|WhenTag|WhenHRef|WhenView|PivotDefinitions|Aggregates|PivotDefinitions|Aggregates|ViewType|LastView|StatusBar|Icons|LEVs|QuickFindHint|InnerJoinPrimaryKey|SystemFilter|DistinctValueFieldName|ClientScript|FirstLetters|SortExpression|Template|Tab|Wizard|InnerJoinForeignKey|Expressions|ViewHeaderText|ViewLayout|GroupExpression|FieldFilter|Wrap|Tags|Tag|Id|Filter|(DataView(Id|FilterSource|Controller|FilterFields|ShowActionButtons|ShowPager)))"\:("\s*"|null))|("Type":"String")),?]]></xsl:attribute>
										</primitiveExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- property ViewPageCompress2Regex -->
						<memberField type="Regex" name="ViewPageCompress2Regex">
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[,\}(,|])]]></xsl:attribute>
										</primitiveExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- method ResolveClientUrl(string)-->
						<memberMethod returnType="System.String" name="ResolveClientUrl">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativeUrl"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="HttpRequest" name="request">
									<init>
										<propertyReferenceExpression name="Request">
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="root">
									<init>
										<binaryOperatorExpression operator="Add">
											<propertyReferenceExpression name="Scheme">
												<propertyReferenceExpression name="Url">
													<variableReferenceExpression name="request"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
											<binaryOperatorExpression operator="Add">
												<propertyReferenceExpression name="SchemeDelimiter">
													<typeReferenceExpression type="Uri"/>
												</propertyReferenceExpression>
												<propertyReferenceExpression name="Host">
													<propertyReferenceExpression name="Url">
														<variableReferenceExpression name="request"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<propertyReferenceExpression name="IsDefaultPort">
												<propertyReferenceExpression name="Url">
													<variableReferenceExpression name="request"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="root"/>
											<binaryOperatorExpression operator="Add">
												<variableReferenceExpression name="root"/>
												<binaryOperatorExpression operator="Add">
													<primitiveExpression value=":"/>
													<convertExpression to="String">
														<propertyReferenceExpression name="Port">
															<propertyReferenceExpression name="Url">
																<variableReferenceExpression name="request"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</convertExpression>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="StartsWith">
											<target>
												<variableReferenceExpression name="relativeUrl"/>
											</target>
											<parameters>
												<primitiveExpression value="~/"/>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="relativeUrl"/>
											<methodInvokeExpression methodName="Substring">
												<target>
													<variableReferenceExpression name="relativeUrl"/>
												</target>
												<parameters>
													<primitiveExpression value="2"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="StartsWith">
													<target>
														<variableReferenceExpression name="relativeUrl"/>
													</target>
													<parameters>
														<primitiveExpression value="/"/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="relativeUrl"/>
													<methodInvokeExpression methodName="Substring">
														<target>
															<variableReferenceExpression name="relativeUrl"/>
														</target>
														<parameters>
															<primitiveExpression value="1"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<variableReferenceExpression name="relativeUrl"/>
													<binaryOperatorExpression operator="Add">
														<propertyReferenceExpression name="AbsolutePath">
															<propertyReferenceExpression name="Url">
																<variableReferenceExpression name="request"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
														<binaryOperatorExpression operator="Add">
															<primitiveExpression value="/"/>
															<variableReferenceExpression name="relativeUrl"/>
														</binaryOperatorExpression>
													</binaryOperatorExpression>
												</assignStatement>
											</falseStatements>
										</conditionStatement>
									</falseStatements>
								</conditionStatement>
								<variableDeclarationStatement type="System.String" name="appPath">
									<init>
										<propertyReferenceExpression name="ApplicationPath">
											<variableReferenceExpression name="request"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<methodInvokeExpression methodName="EndsWith">
												<target>
													<variableReferenceExpression name="appPath"/>
												</target>
												<parameters>
													<primitiveExpression value="/"/>
												</parameters>
											</methodInvokeExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="appPath"/>
											<binaryOperatorExpression operator="Add">
												<variableReferenceExpression name="appPath"/>
												<primitiveExpression value="/"/>
											</binaryOperatorExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="System.String" name="result">
									<init>
										<binaryOperatorExpression operator="Add">
											<binaryOperatorExpression operator="Add">
												<variableReferenceExpression name="root"/>
												<variableReferenceExpression name="appPath"/>
											</binaryOperatorExpression>
											<variableReferenceExpression name="relativeUrl"/>
										</binaryOperatorExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<variableReferenceExpression name="relativeUrl"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="result"/>
											<methodInvokeExpression methodName="Substring">
												<target>
													<variableReferenceExpression name="result"/>
												</target>
												<parameters>
													<primitiveExpression value="0"/>
													<binaryOperatorExpression operator="Subtract">
														<propertyReferenceExpression name="Length">
															<variableReferenceExpression name="result"/>
														</propertyReferenceExpression>
														<primitiveExpression value="1"/>
													</binaryOperatorExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property EnableCors-->
						<memberProperty type="System.Boolean" name="EnableCors">
							<attributes public="true"/>
							<getStatements>
								<methodReturnStatement>
									<xsl:choose>
										<xsl:when test="$MobileAppSupported">
											<primitiveExpression value="true"/>
										</xsl:when>
										<xsl:otherwise>
											<primitiveExpression value="false"/>
										</xsl:otherwise>
									</xsl:choose>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method CorsConfiguration(HttpRequest)-->
						<memberMethod returnType="SortedDictionary" name="CorsConfiguration">
							<typeArguments>
								<typeReference type="System.String"/>
								<typeReference type="System.String"/>
							</typeArguments>
							<attributes public="true"/>
							<parameters>
								<parameter type="HttpRequest" name="request"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="EnableCors"/>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="SortedDictionary" name="headers">
											<typeArguments>
												<typeReference type="System.String"/>
												<typeReference type="System.String"/>
											</typeArguments>
											<init>
												<objectCreateExpression type="SortedDictionary">
													<typeArguments>
														<typeReference type="System.String"/>
														<typeReference type="System.String"/>
													</typeArguments>
												</objectCreateExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="IsRequested">
													<typeReferenceExpression type="RESTfulResource"/>
												</propertyReferenceExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="CorsConfigurationRESTful">
													<parameters>
														<argumentReferenceExpression name="request"/>
														<variableReferenceExpression name="headers"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
											<falseStatements>
												<methodInvokeExpression methodName="CorsConfigurationTouchUI">
													<parameters>
														<argumentReferenceExpression name="request"/>
														<variableReferenceExpression name="headers"/>
													</parameters>
												</methodInvokeExpression>
											</falseStatements>
										</conditionStatement>
										<variableDeclarationStatement name="origin">
											<init>
												<stringEmptyExpression/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<unaryOperatorExpression operator="Not">
														<methodInvokeExpression methodName="ContainsKey">
															<target>
																<variableReferenceExpression name="headers"/>
															</target>
															<parameters>
																<primitiveExpression value="Vary"/>
															</parameters>
														</methodInvokeExpression>
													</unaryOperatorExpression>
													<methodInvokeExpression methodName="TryGetValue">
														<target>
															<variableReferenceExpression name="headers"/>
														</target>
														<parameters>
															<primitiveExpression value="Access-Control-Allow-Origin"/>
															<directionExpression direction="Out">
																<variableReferenceExpression name="origin"/>
															</directionExpression>
														</parameters>
													</methodInvokeExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanAnd">
															<unaryOperatorExpression operator="IsNotNullOrEmpty">
																<variableReferenceExpression name="origin"/>
															</unaryOperatorExpression>
															<binaryOperatorExpression operator="ValueInequality">
																<variableReferenceExpression name="origin"/>
																<primitiveExpression value="*"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="headers"/>
																</target>
																<indices>
																	<primitiveExpression value="Vary"/>
																</indices>
															</arrayIndexerExpression>
															<primitiveExpression value="Origin"/>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
										<methodReturnStatement>
											<variableReferenceExpression name="headers"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<primitiveExpression value="null"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method CorsConfigurationRESTful(HttpRequest, SortedDictionary<string, string>) -->
						<memberMethod name="CorsConfigurationRESTful">
							<attributes family="true"/>
							<parameters>
								<parameter type="HttpRequest" name="request"/>
								<parameter type="SortedDictionary" name="headers">
									<typeArguments>
										<typeReference type="System.String"/>
										<typeReference type="System.String"/>
									</typeArguments>
								</parameter>
							</parameters>
							<statements>
								<variableDeclarationStatement name="origin">
									<init>
										<arrayIndexerExpression>
											<target>
												<propertyReferenceExpression name="Headers">
													<argumentReferenceExpression name="request"/>
												</propertyReferenceExpression>
											</target>
											<indices>
												<primitiveExpression value="Origin"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="corsKey">
									<init>
										<binaryOperatorExpression operator="Add">
											<primitiveExpression value="cors_origin_"/>
											<variableReferenceExpression name="origin"/>
										</binaryOperatorExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="appCache">
									<init>
										<propertyReferenceExpression name="Cache">
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="allow">
									<init>
										<binaryOperatorExpression operator="IdentityInequality">
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="appCache"/>
												</target>
												<indices>
													<variableReferenceExpression name="corsKey"/>
												</indices>
											</arrayIndexerExpression>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="accessControlCacheDuration">
									<init>
										<binaryOperatorExpression operator="Multiply">
											<primitiveExpression value="60"/>
											<primitiveExpression value="60"/>
										</binaryOperatorExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<variableReferenceExpression name="allow"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="allow"/>
											<binaryOperatorExpression operator="GreaterThan">
												<propertyReferenceExpression name="Length">
													<methodInvokeExpression methodName="AppDataSearch">
														<parameters>
															<stringFormatExpression>
																<xsl:attribute name="format"><![CDATA[sys/cors/{0}]]></xsl:attribute>
																<methodInvokeExpression methodName="ToUrlEncodedToken">
																	<target>
																		<typeReferenceExpression type="TextUtility"/>
																	</target>
																	<parameters>
																		<variableReferenceExpression name="origin"/>
																	</parameters>
																</methodInvokeExpression>
															</stringFormatExpression>
															<primitiveExpression value="%.json"/>
														</parameters>
													</methodInvokeExpression>
												</propertyReferenceExpression>
												<primitiveExpression value="0"/>
											</binaryOperatorExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<variableReferenceExpression name="allow"/>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="appCache"/>
													</target>
													<parameters>
														<variableReferenceExpression name="corsKey"/>
														<variableReferenceExpression name="corsKey"/>
														<primitiveExpression value="null"/>
														<methodInvokeExpression methodName="AddSeconds">
															<target>
																<propertyReferenceExpression name="Now">
																	<typeReferenceExpression type="DateTime"/>
																</propertyReferenceExpression>
															</target>
															<parameters>
																<variableReferenceExpression name="accessControlCacheDuration"/>
															</parameters>
														</methodInvokeExpression>
														<propertyReferenceExpression name="NoSlidingExpiration">
															<typeReferenceExpression type="Cache"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="Normal">
															<typeReferenceExpression type="CacheItemPriority"/>
														</propertyReferenceExpression>
														<primitiveExpression value="null"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<variableReferenceExpression name="origin"/>
											</unaryOperatorExpression>
											<variableReferenceExpression name="allow"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="headers"/>
												</target>
												<indices>
													<primitiveExpression value="Access-Control-Allow-Origin"/>
												</indices>
											</arrayIndexerExpression>
											<variableReferenceExpression name="origin"/>
										</assignStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="headers"/>
												</target>
												<indices>
													<primitiveExpression value="Access-Control-Allow-Methods"/>
												</indices>
											</arrayIndexerExpression>
											<methodInvokeExpression methodName="Join">
												<target>
													<typeReferenceExpression type="System.String"/>
												</target>
												<parameters>
													<primitiveExpression value=","/>
													<propertyReferenceExpression name="SupportedMethods">
														<typeReferenceExpression type="V2ServiceRequestHandlerBase"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="headers"/>
												</target>
												<indices>
													<primitiveExpression value="Access-Control-Allow-Credentials"/>
												</indices>
											</arrayIndexerExpression>
											<primitiveExpression value="true" convertTo="String"/>
										</assignStatement>
										<variableDeclarationStatement name="requestHeaders">
											<init>
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Headers">
															<argumentReferenceExpression name="request"/>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="Access-Control-Request-Headers"/>
													</indices>
												</arrayIndexerExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<unaryOperatorExpression operator="IsNotNullOrEmpty">
													<variableReferenceExpression name="requestHeaders"/>
												</unaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<argumentReferenceExpression name="headers"/>
														</target>
														<indices>
															<primitiveExpression value="Access-Control-Allow-Headers"/>
														</indices>
													</arrayIndexerExpression>
													<variableReferenceExpression name="requestHeaders"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="headers"/>
												</target>
												<indices>
													<primitiveExpression value="Access-Control-Expose-Headers"/>
												</indices>
											</arrayIndexerExpression>
											<primitiveExpression value="content-disposition,etag"/>
										</assignStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<argumentReferenceExpression name="headers"/>
												</target>
												<indices>
													<primitiveExpression value="Access-Control-Max-Age"/>
												</indices>
											</arrayIndexerExpression>
											<convertExpression to="String">
												<variableReferenceExpression name="accessControlCacheDuration"/>
											</convertExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method CorsConfigurationTouchUI(HttpRequest, SortedDictionary<string, string>) -->
						<memberMethod name="CorsConfigurationTouchUI">
							<attributes family="true"/>
							<parameters>
								<parameter type="HttpRequest" name="request"/>
								<parameter type="SortedDictionary" name="headers">
									<typeArguments>
										<typeReference type="System.String"/>
										<typeReference type="System.String"/>
									</typeArguments>
								</parameter>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="origin">
									<init>
										<arrayIndexerExpression>
											<target>
												<propertyReferenceExpression name="Headers">
													<variableReferenceExpression name="request"/>
												</propertyReferenceExpression>
											</target>
											<indices>
												<primitiveExpression value="Origin"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<variableReferenceExpression name="origin"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="origin"/>
											<primitiveExpression value="*"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<argumentReferenceExpression name="headers"/>
										</target>
										<indices>
											<primitiveExpression value="Access-Control-Allow-Origin"/>
										</indices>
									</arrayIndexerExpression>
									<variableReferenceExpression name="origin"/>
								</assignStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<argumentReferenceExpression name="headers"/>
										</target>
										<indices>
											<primitiveExpression value="Access-Control-Allow-Methods"/>
										</indices>
									</arrayIndexerExpression>
									<primitiveExpression value="GET,POST"/>
								</assignStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<argumentReferenceExpression name="headers"/>
										</target>
										<indices>
											<primitiveExpression value="Access-Control-Allow-Credentials"/>
										</indices>
									</arrayIndexerExpression>
									<primitiveExpression value="true" convertTo="String"/>
								</assignStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<argumentReferenceExpression name="headers"/>
										</target>
										<indices>
											<primitiveExpression value="Access-Control-Allow-Headers"/>
										</indices>
									</arrayIndexerExpression>
									<primitiveExpression value="content-type,authorization"/>
								</assignStatement>
							</statements>
						</memberMethod>
						<!-- method EnsureJsonProperty(JObject, string, object)-->
						<memberMethod name="EnsureJsonProperty">
							<attributes private="true" static="true"/>
							<parameters>
								<parameter type="JObject" name="ptr"/>
								<parameter type="System.String" name="path"/>
								<parameter  type="System.Object" name="defaultValue"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityEquality">
											<argumentReferenceExpression name="defaultValue"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<argumentReferenceExpression name="defaultValue"/>
											<stringEmptyExpression/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement type="System.String[]" name="parts">
									<init>
										<methodInvokeExpression methodName="Split">
											<target>
												<variableReferenceExpression name="path"/>
											</target>
											<parameters>
												<primitiveExpression value="." convertTo="Char"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Int32" name="counter">
									<init>
										<propertyReferenceExpression name="Length">
											<variableReferenceExpression name="parts"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="System.String" name="part"/>
									<target>
										<variableReferenceExpression name="parts"/>
									</target>
									<statements>
										<decrementStatement>
											<variableReferenceExpression name="counter"/>
										</decrementStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityEquality">
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="ptr"/>
														</target>
														<indices>
															<variableReferenceExpression name="part"/>
														</indices>
													</arrayIndexerExpression>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="ValueInequality">
															<variableReferenceExpression name="counter"/>
															<primitiveExpression value="0"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="ptr"/>
																</target>
																<indices>
																	<variableReferenceExpression name="part"/>
																</indices>
															</arrayIndexerExpression>
															<objectCreateExpression type="JObject"/>
														</assignStatement>
													</trueStatements>
													<falseStatements>
														<assignStatement>
															<arrayIndexerExpression>
																<target>
																	<variableReferenceExpression name="ptr"/>
																</target>
																<indices>
																	<variableReferenceExpression name="part"/>
																</indices>
															</arrayIndexerExpression>
															<methodInvokeExpression methodName="FromObject">
																<target>
																	<typeReferenceExpression type="JToken"/>
																</target>
																<parameters>
																	<argumentReferenceExpression name="defaultValue"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</falseStatements>
												</conditionStatement>
											</trueStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueInequality">
													<variableReferenceExpression name="counter"/>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="ptr"/>
													<castExpression targetType="JObject">
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="ptr"/>
															</target>
															<indices>
																<variableReferenceExpression name="part"/>
															</indices>
														</arrayIndexerExpression>
													</castExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
							</statements>
						</memberMethod>
						<!-- method SettingsProperty(string) -->
						<memberMethod returnType="JToken" name="SettingsProperty">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="path"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="TryGetJsonProperty">
										<parameters>
											<propertyReferenceExpression name="DefaultSettings">
												<propertyReferenceExpression name="Current"/>
											</propertyReferenceExpression>
											<argumentReferenceExpression name="path"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method SettingsProperty(string, object) -->
						<memberMethod returnType="JToken" name="SettingsProperty">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="path"/>
								<parameter type="System.Object" name="defaultValue"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="result">
									<init>
										<methodInvokeExpression methodName="TryGetJsonProperty">
											<parameters>
												<propertyReferenceExpression name="DefaultSettings">
													<propertyReferenceExpression name="Current"/>
												</propertyReferenceExpression>
												<argumentReferenceExpression name="path"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityEquality">
												<variableReferenceExpression name="result"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="IdentityInequality">
												<argumentReferenceExpression name="defaultValue"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="result"/>
											<methodInvokeExpression methodName="FromObject">
												<target>
													<typeReferenceExpression type="JToken"/>
												</target>
												<parameters>
													<argumentReferenceExpression name="defaultValue"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method TryGetJsonProperty(JObject, string)-->
						<memberMethod returnType="JToken" name="TryGetJsonProperty">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="JObject" name="ptr"/>
								<parameter type="System.String" name="path"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String[]" name="parts">
									<init>
										<methodInvokeExpression methodName="Split">
											<target>
												<variableReferenceExpression name="path"/>
											</target>
											<parameters>
												<primitiveExpression value="." convertTo="Char"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="JToken" name="temp">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<forStatement>
									<variable type="System.Int32" name="i">
										<init>
											<primitiveExpression value="0"/>
										</init>
									</variable>
									<test>
										<binaryOperatorExpression operator="LessThan">
											<variableReferenceExpression name="i"/>
											<binaryOperatorExpression operator="Subtract">
												<propertyReferenceExpression name="Length">
													<variableReferenceExpression name="parts"/>
												</propertyReferenceExpression>
												<primitiveExpression value="1"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</test>
									<increment>
										<variableReferenceExpression name="i"/>
									</increment>
									<statements>
										<assignStatement>
											<variableReferenceExpression name="temp"/>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="ptr"/>
												</target>
												<indices>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="parts"/>
														</target>
														<indices>
															<variableReferenceExpression name="i"/>
														</indices>
													</arrayIndexerExpression>
												</indices>
											</arrayIndexerExpression>
										</assignStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IdentityInequality">
													<variableReferenceExpression name="temp"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="ptr"/>
													<castExpression targetType="JObject">
														<variableReferenceExpression name="temp"/>
													</castExpression>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<methodReturnStatement>
													<primitiveExpression value="null"/>
												</methodReturnStatement>
											</falseStatements>
										</conditionStatement>
									</statements>
								</forStatement>
								<methodReturnStatement>
									<arrayIndexerExpression>
										<target>
											<variableReferenceExpression name="ptr"/>
										</target>
										<indices>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="parts"/>
												</target>
												<indices>
													<binaryOperatorExpression operator="Subtract">
														<propertyReferenceExpression name="Length">
															<variableReferenceExpression name="parts"/>
														</propertyReferenceExpression>
														<primitiveExpression value="1"/>
													</binaryOperatorExpression>
												</indices>
											</arrayIndexerExpression>
										</indices>
									</arrayIndexerExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method OAuthSetState(string, string) -->
						<memberMethod name="OAuthSetState">
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="name"/>
								<parameter type="System.String" name="value"/>
							</parameters>
						</memberMethod>
						<!-- method OAuthSetUserObject(string, string) -->
						<memberMethod name="OAuthSetUserObject">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="user"/>
							</parameters>
						</memberMethod>
						<!-- method OAuthSyncUser(string, string) -->
						<memberMethod name="OAuthSyncUser">
							<attributes public="true"/>
							<parameters>
								<parameter type="MembershipUser" name="user"/>
							</parameters>
						</memberMethod>
						<!-- method ValidateBlobAccess(BlobHandlerInfo, string)-->
						<memberMethod name="ValidateBlobAccess" returnType="System.Boolean">
							<attributes public="true"/>
							<parameters>
								<parameter type="HttpContext" name="context"/>
								<parameter type="BlobHandlerInfo" name="handler"/>
								<parameter type="BlobAdapter" name="ba"/>
								<parameter type="System.String" name="val"/>
							</parameters>
							<statements>
								<comment>allow access to a requests from CMS</comment>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="DirectAccessMode">
											<typeReferenceExpression type="Blob"/>
										</propertyReferenceExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="true"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<xsl:if test="$MembershipEnabled or $CustomSecurity='true'">
									<variableDeclarationStatement type="System.String" name="key">
										<init>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Params">
														<propertyReferenceExpression name="Request">
															<variableReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="_validationKey"/>
												</indices>
											</arrayIndexerExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="BooleanAnd">
												<binaryOperatorExpression operator="BooleanOr">
													<binaryOperatorExpression operator="IdentityEquality">
														<variableReferenceExpression name="ba"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<unaryOperatorExpression operator="Not">
														<propertyReferenceExpression name="IsPublic">
															<variableReferenceExpression name="ba"/>
														</propertyReferenceExpression>
													</unaryOperatorExpression>
												</binaryOperatorExpression>
												<binaryOperatorExpression operator="BooleanAnd">
													<unaryOperatorExpression operator="Not">
														<propertyReferenceExpression name="IsAuthenticated">
															<propertyReferenceExpression name="Identity">
																<propertyReferenceExpression name="User">
																	<variableReferenceExpression name="context"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</unaryOperatorExpression>
													<binaryOperatorExpression operator="ValueInequality">
														<variableReferenceExpression name="key"/>
														<propertyReferenceExpression name="ValidationKey">
															<typeReferenceExpression type="ApplicationServices"/>
														</propertyReferenceExpression>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<methodReturnStatement>
												<unaryOperatorExpression operator="Not">
													<propertyReferenceExpression name="AuthorizationIsSupported">
														<typeReferenceExpression type="ApplicationServicesBase"/>
													</propertyReferenceExpression>
												</unaryOperatorExpression>
											</methodReturnStatement>
										</trueStatements>
									</conditionStatement>
								</xsl:if>
								<comment>allow access to a request received from ReportViewer</comment>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<variableReferenceExpression name="key"/>
											<propertyReferenceExpression name="ValidationKey">
												<typeReferenceExpression type="ApplicationServices"/>
											</propertyReferenceExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="true"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<comment>confirm that the user is allowed to see the corresponding data row</comment>
								<variableDeclarationStatement type="PageRequest" name="pr">
									<init>
										<objectCreateExpression type="PageRequest">
											<parameters>
												<primitiveExpression value="0"/>
												<primitiveExpression value="1"/>
												<stringEmptyExpression/>
												<primitiveExpression value="null"/>
											</parameters>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="ControllerConfiguration" name="config">
									<init>
										<methodInvokeExpression methodName="CreateConfigurationInstance">
											<target>
												<typeReferenceExpression type="Controller"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="GetType"/>
												<propertyReferenceExpression name="DataController">
													<variableReferenceExpression name="handler"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="XPathNodeIterator" name="iterator">
									<init>
										<methodInvokeExpression methodName="Select">
											<target>
												<variableReferenceExpression name="config"/>
											</target>
											<parameters>
												<primitiveExpression value="/c:dataController/c:fields/c:field[@isPrimaryKey='true']"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="List" name="filter">
									<typeArguments>
										<typeReference type="System.String"/>
									</typeArguments>
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String[]" name="vals">
									<init>
										<methodInvokeExpression methodName="Split">
											<target>
												<variableReferenceExpression name="val"/>
											</target>
											<parameters>
												<primitiveExpression value="|" convertTo="Char"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Int32" name="count">
									<init>
										<primitiveExpression value="0"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="fieldFilter">
									<init>
										<objectCreateExpression type="List">
											<typeArguments>
												<typeReference type="System.String"/>
											</typeArguments>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<whileStatement>
									<test>
										<methodInvokeExpression methodName="MoveNext">
											<target>
												<variableReferenceExpression name="iterator"/>
											</target>
										</methodInvokeExpression>
									</test>
									<statements>
										<variableDeclarationStatement name="pk">
											<init>
												<methodInvokeExpression methodName="GetAttribute">
													<target>
														<propertyReferenceExpression name="Current">
															<variableReferenceExpression name="iterator"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<primitiveExpression value="name"/>
														<stringEmptyExpression/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="filter"/>
											</target>
											<parameters>
												<stringFormatExpression format="{{0}}:={{1}}">
													<variableReferenceExpression name="pk"/>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="vals"/>
														</target>
														<indices>
															<variableReferenceExpression name="count"/>
														</indices>
													</arrayIndexerExpression>
												</stringFormatExpression>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="fieldFilter"/>
											</target>
											<parameters>
												<variableReferenceExpression name="pk"/>
											</parameters>
										</methodInvokeExpression>
										<incrementStatement>
											<variableReferenceExpression name="count"/>
										</incrementStatement>
									</statements>
								</whileStatement>
								<assignStatement>
									<propertyReferenceExpression name="Filter">
										<variableReferenceExpression name="pr"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="ToArray">
										<target>
											<variableReferenceExpression name="filter"/>
										</target>
									</methodInvokeExpression>
								</assignStatement>
								<variableDeclarationStatement type="System.String" name="fieldName">
									<init>
										<propertyReferenceExpression name="Value">
											<methodInvokeExpression methodName="SelectSingleNode">
												<target>
													<variableReferenceExpression name="config"/>
												</target>
												<parameters>
													<primitiveExpression value="/c:dataController/c:fields/c:field[@onDemandHandler='{{0}}']/@name"/>
													<propertyReferenceExpression name="Key">
														<variableReferenceExpression name="handler"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<variableReferenceExpression name="iterator"/>
									<methodInvokeExpression methodName="Select">
										<target>
											<variableReferenceExpression name="config"/>
										</target>
										<parameters>
											<stringFormatExpression format="/c:dataController/c:views/c:view[c:dataFields/c:dataField/@fieldName='{{0}}' or c:categories/c:category/c:dataFields/c:dataField/@fieldName='{{0}}']">
												<variableReferenceExpression name="fieldName"/>
											</stringFormatExpression>
											<stringEmptyExpression/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<variableDeclarationStatement type="System.String" name="view"/>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="MoveNext">
											<target>
												<variableReferenceExpression name="iterator"/>
											</target>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="view"/>
											<methodInvokeExpression methodName="GetAttribute">
												<target>
													<propertyReferenceExpression name="Current">
														<variableReferenceExpression name="iterator"/>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<primitiveExpression value="id"/>
													<stringEmptyExpression/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<assignStatement>
											<variableReferenceExpression name="view"/>
											<methodInvokeExpression methodName="GetSelectView">
												<target>
													<typeReferenceExpression type="Controller"/>
												</target>
												<parameters>
													<propertyReferenceExpression name="DataController">
														<variableReferenceExpression name="handler"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</falseStatements>
								</conditionStatement>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="fieldFilter"/>
									</target>
									<parameters>
										<variableReferenceExpression name="fieldName"/>
									</parameters>
								</methodInvokeExpression>
								<assignStatement>
									<propertyReferenceExpression name="FieldFilter">
										<variableReferenceExpression name="pr"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="ToArray">
										<target>
											<variableReferenceExpression name="fieldFilter"/>
										</target>
									</methodInvokeExpression>
								</assignStatement>
								<!-- 
            pr.RequiresMetaData = true;
            pr.MetadataFilter = new string[] { "fields" };                -->
								<assignStatement>
									<propertyReferenceExpression name="RequiresMetaData">
										<variableReferenceExpression name="pr"/>
									</propertyReferenceExpression>
									<primitiveExpression value="true"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MetadataFilter">
										<variableReferenceExpression name="pr"/>
									</propertyReferenceExpression>
									<arrayCreateExpression>
										<createType type="System.String"/>
										<initializers>
											<primitiveExpression value="fields"/>
										</initializers>
									</arrayCreateExpression>
								</assignStatement>
								<variableDeclarationStatement type="ViewPage" name="page">
									<init>
										<methodInvokeExpression methodName="GetPage">
											<target>
												<methodInvokeExpression methodName="CreateDataController">
													<target>
														<typeReferenceExpression type="ControllerFactory"/>
													</target>
												</methodInvokeExpression>
											</target>
											<parameters>
												<propertyReferenceExpression name="DataController">
													<variableReferenceExpression name="handler"/>
												</propertyReferenceExpression>
												<variableReferenceExpression name="view"/>
												<variableReferenceExpression name="pr"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<comment>make sure that exactly one row is returned and the number of fields in the output is exactly equal to the number of PK fields plus 1 (blob field)</comment>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanOr">
											<binaryOperatorExpression operator="ValueEquality">
												<propertyReferenceExpression name="Count">
													<propertyReferenceExpression name="Rows">
														<variableReferenceExpression name="page"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
												<primitiveExpression value="0"/>
											</binaryOperatorExpression>
											<binaryOperatorExpression operator="IdentityEquality">
												<methodInvokeExpression methodName="FindField">
													<target>
														<variableReferenceExpression name="page"/>
													</target>
													<parameters>
														<variableReferenceExpression name="fieldName"/>
													</parameters>
												</methodInvokeExpression>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="false"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<primitiveExpression value="true"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method JsonError(string, string, params object[]) -->
						<memberMethod returnType="JObject" name="JsonError">
							<attributes public="true" />
							<parameters>
								<parameter type="System.String" name="error"/>
								<parameter type="System.String" name="description"/>
								<parameter type="params System.Object[]" name="args"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="JsonError">
										<parameters>
											<primitiveExpression value="null"/>
											<primitiveExpression value="null"/>
											<argumentReferenceExpression name="error"/>
											<argumentReferenceExpression name="description"/>
											<argumentReferenceExpression name="args"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method JsonError(Exception, JObject, string, string, params object[]) -->
						<memberMethod returnType="JObject" name="JsonError">
							<attributes public="true" />
							<parameters>
								<parameter type="Exception" name="ex"/>
								<parameter type="JObject" name="exInfo"/>
								<parameter type="System.String" name="error"/>
								<parameter type="System.String" name="description"/>
								<parameter type="params System.Object[]" name="args"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="isInternalError">
									<init>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="IdentityInequality">
												<argumentReferenceExpression name="ex"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
											<unaryOperatorExpression operator="Not">
												<binaryOperatorExpression operator="IsTypeOf">
													<argumentReferenceExpression name="ex"/>
													<typeReferenceExpression type="RESTfulResourceException"/>
												</binaryOperatorExpression>
											</unaryOperatorExpression>
										</binaryOperatorExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="context">
									<init>
										<propertyReferenceExpression name="Current">
											<typeReferenceExpression type="HttpContext"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="response">
									<init>
										<propertyReferenceExpression name="Response">
											<variableReferenceExpression name="context"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="GreaterThan">
											<propertyReferenceExpression name="Length">
												<argumentReferenceExpression name="args"/>
											</propertyReferenceExpression>
											<primitiveExpression value="0"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<argumentReferenceExpression name="description"/>
											<methodInvokeExpression methodName="Format">
												<target>
													<typeReferenceExpression type="System.String"/>
												</target>
												<parameters>
													<argumentReferenceExpression name="description"/>
													<argumentReferenceExpression name="args"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="details">
									<init>
										<objectCreateExpression type="JObject">
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="reason"/>
														<argumentReferenceExpression name="error"/>
													</parameters>
												</objectCreateExpression>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="message"/>
														<argumentReferenceExpression name="description"/>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<variableReferenceExpression name="isInternalError"/>
									</condition>
									<trueStatements>
										<assignStatement>
											<propertyReferenceExpression name="StatusCode">
												<variableReferenceExpression name="response"/>
											</propertyReferenceExpression>
											<primitiveExpression value="500"/>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="StatusCode">
														<variableReferenceExpression name="response"/>
													</propertyReferenceExpression>
													<primitiveExpression value="200"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<propertyReferenceExpression name="StatusCode">
														<variableReferenceExpression name="response"/>
													</propertyReferenceExpression>
													<primitiveExpression value="400"/>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</falseStatements>
								</conditionStatement>
								<variableDeclarationStatement name="errors">
									<init>
										<objectCreateExpression type="JArray">
											<parameters>
												<variableReferenceExpression name="details"/>
											</parameters>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="result">
									<init>
										<objectCreateExpression type="JObject">
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="error"/>
														<objectCreateExpression type="JObject">
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<primitiveExpression value="errors"/>
																		<variableReferenceExpression name="errors"/>
																	</parameters>
																</objectCreateExpression>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<primitiveExpression value="code"/>
																		<propertyReferenceExpression name="StatusCode">
																			<variableReferenceExpression name="response"/>
																		</propertyReferenceExpression>
																	</parameters>
																</objectCreateExpression>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<primitiveExpression value="message"/>
																		<propertyReferenceExpression name="StatusDescription">
																			<variableReferenceExpression name="response"/>
																		</propertyReferenceExpression>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</objectCreateExpression>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</objectCreateExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<variableReferenceExpression name="isInternalError"/>
									</condition>
									<trueStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="IsTypeOf">
													<argumentReferenceExpression name="ex"/>
													<typeReferenceExpression type="RESTfulResourceException"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="error"/>
													<propertyReferenceExpression name="Error">
														<castExpression targetType="RESTfulResourceException">
															<argumentReferenceExpression name="ex"/>
														</castExpression>
													</propertyReferenceExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<variableDeclarationStatement name="originalException">
											<init>
												<argumentReferenceExpression name="ex"/>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="stackTrace">
											<init>
												<propertyReferenceExpression name="StackTrace">
													<argumentReferenceExpression name="ex"/>
												</propertyReferenceExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement name="errorStack">
											<init>
												<objectCreateExpression type="Stack">
													<typeArguments>
														<typeReference type="System.String"/>
													</typeArguments>
												</objectCreateExpression>
											</init>
										</variableDeclarationStatement>
										<whileStatement>
											<test>
												<binaryOperatorExpression operator="IdentityInequality">
													<argumentReferenceExpression name="ex"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</test>
											<statements>
												<conditionStatement>
													<condition>
														<unaryOperatorExpression operator="Not">
															<binaryOperatorExpression operator="IsTypeOf">
																<argumentReferenceExpression name="ex"/>
																<typeReferenceExpression type="TargetInvocationException"/>
															</binaryOperatorExpression>
														</unaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="Push">
															<target>
																<variableReferenceExpression name="errorStack"/>
															</target>
															<parameters>
																<propertyReferenceExpression name="Message">
																	<argumentReferenceExpression name="ex"/>
																</propertyReferenceExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
												<assignStatement>
													<argumentReferenceExpression name="ex"/>
													<propertyReferenceExpression name="InnerException">
														<argumentReferenceExpression name="ex"/>
													</propertyReferenceExpression>
												</assignStatement>
											</statements>
										</whileStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="Count">
														<variableReferenceExpression name="errorStack"/>
													</propertyReferenceExpression>
													<primitiveExpression value="0"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<methodInvokeExpression methodName="Push">
													<target>
														<variableReferenceExpression name="errorStack"/>
													</target>
													<parameters>
														<primitiveExpression value="Unable to process this request."/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="details"/>
												</target>
												<indices>
													<primitiveExpression value="reason"/>
												</indices>
											</arrayIndexerExpression>
											<variableReferenceExpression name="error"/>
										</assignStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<variableReferenceExpression name="details"/>
												</target>
												<indices>
													<primitiveExpression value="message"/>
												</indices>
											</arrayIndexerExpression>
											<methodInvokeExpression methodName="Join">
												<target>
													<typeReferenceExpression type="System.String"/>
												</target>
												<parameters>
													<primitiveExpression value="&#10;"/>
													<methodInvokeExpression methodName="ToArray">
														<target>
															<variableReferenceExpression name="errorStack"/>
														</target>
													</methodInvokeExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="details"/>
											</target>
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="date"/>
														<propertyReferenceExpression name="UtcNow">
															<typeReferenceExpression type="DateTime"/>
														</propertyReferenceExpression>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="details"/>
											</target>
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="username"/>
														<propertyReferenceExpression name="Name">
															<propertyReferenceExpression name="Identity">
																<propertyReferenceExpression name="User">
																	<argumentReferenceExpression name="context"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="details"/>
											</target>
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="stackTrace"/>
														<methodInvokeExpression methodName="Split">
															<target>
																<typeReferenceExpression type="Regex"/>
															</target>
															<parameters>
																<propertyReferenceExpression name="StackTrace">
																	<variableReferenceExpression name="originalException"/>
																</propertyReferenceExpression>
																<primitiveExpression value="&#13;&#10;"/>
															</parameters>
														</methodInvokeExpression>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="details"/>
											</target>
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="url"/>
														<propertyReferenceExpression name="RawUrl">
															<propertyReferenceExpression name="Request">
																<argumentReferenceExpression name="context"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</methodInvokeExpression>
										<methodInvokeExpression methodName="Add">
											<target>
												<variableReferenceExpression name="details"/>
											</target>
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="arguments"/>
														<methodInvokeExpression methodName="DeepClone">
															<target>
																<variableReferenceExpression name="exInfo"/>
															</target>
														</methodInvokeExpression>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<variableDeclarationStatement name="errorId">
									<init>
										<methodInvokeExpression methodName="JsonErrorId">
											<parameters>
												<variableReferenceExpression name="details"/>
												<argumentReferenceExpression name="ex"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="errorId"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="AddFirst">
											<target>
												<variableReferenceExpression name="details"/>
											</target>
											<parameters>
												<objectCreateExpression type="JProperty">
													<parameters>
														<primitiveExpression value="id"/>
														<variableReferenceExpression name="errorId"/>
													</parameters>
												</objectCreateExpression>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IsTypeOf">
											<argumentReferenceExpression name="ex"/>
											<typeReferenceExpression type="RESTfulResourceException"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<foreachStatement>
											<variable name="related"/>
											<target>
												<propertyReferenceExpression name="Related">
													<castExpression targetType="RESTfulResourceException">
														<argumentReferenceExpression name="ex"/>
													</castExpression>
												</propertyReferenceExpression>
											</target>
											<statements>
												<variableDeclarationStatement name="relatedDetails">
													<init>
														<objectCreateExpression type="JObject">
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<primitiveExpression value="reason"/>
																		<propertyReferenceExpression name="Error">
																			<variableReferenceExpression name="related"/>
																		</propertyReferenceExpression>
																	</parameters>
																</objectCreateExpression>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<primitiveExpression value="description"/>
																		<propertyReferenceExpression name="Message">
																			<variableReferenceExpression name="related"/>
																		</propertyReferenceExpression>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</objectCreateExpression>
													</init>
												</variableDeclarationStatement>
												<methodInvokeExpression methodName="Add">
													<target>
														<variableReferenceExpression name="errors"/>
													</target>
													<parameters>
														<variableReferenceExpression name="relatedDetails"/>
													</parameters>
												</methodInvokeExpression>
												<assignStatement>
													<variableReferenceExpression name="errorId"/>
													<methodInvokeExpression methodName="JsonErrorId">
														<parameters>
															<variableReferenceExpression name="relatedDetails"/>
															<argumentReferenceExpression name="ex"/>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="IdentityInequality">
															<variableReferenceExpression name="errorId"/>
															<primitiveExpression value="null"/>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<methodInvokeExpression methodName="AddFirst">
															<target>
																<variableReferenceExpression name="relatedDetails"/>
															</target>
															<parameters>
																<objectCreateExpression type="JProperty">
																	<parameters>
																		<primitiveExpression value="id"/>
																		<variableReferenceExpression name="errorId"/>
																	</parameters>
																</objectCreateExpression>
															</parameters>
														</methodInvokeExpression>
													</trueStatements>
												</conditionStatement>
											</statements>
										</foreachStatement>
									</trueStatements>
								</conditionStatement>
								<methodInvokeExpression methodName="JsonErrorLog">
									<parameters>
										<variableReferenceExpression name="result"/>
									</parameters>
								</methodInvokeExpression>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<methodInvokeExpression methodName="JsonErrorStackTraceAllowed"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodInvokeExpression methodName="Remove">
											<target>
												<variableReferenceExpression name="details"/>
											</target>
											<parameters>
												<primitiveExpression value="stackTrace"/>
											</parameters>
										</methodInvokeExpression>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method JsonErrorStackTraceAllowed() -->
						<memberMethod returnType="System.Boolean" name="JsonErrorStackTraceAllowed">
							<attributes public="true"/>
							<statements>
								<methodReturnStatement>
									<propertyReferenceExpression name="IsLocal">
										<propertyReferenceExpression name="Request">
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</propertyReferenceExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method JsonErrorId(JObject, Exception) -->
						<memberMethod returnType ="System.Object" name="JsonErrorId">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="detail"/>
								<parameter type="Exception" name="ex"/>
							</parameters>
							<statements>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ToString">
										<target>
											<methodInvokeExpression methodName="NewGuid">
												<target>
													<typeReferenceExpression type="Guid"/>
												</target>
											</methodInvokeExpression>
										</target>"
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method JsonErrorLog(JObject) -->
						<memberMethod name="JsonErrorLog">
							<attributes public="true"/>
							<parameters>
								<parameter type="JObject" name="error"/>
							</parameters>
							<statements></statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class AnonymousUserIdentity -->
				<typeDeclaration name="AnonymousUserIdentity">
					<baseTypes>
						<typeReference type="System.Object"/>
						<typeReference type="IIdentity"/>
					</baseTypes>
					<members>
						<!-- property AuthenticationType -->
						<memberProperty type="System.String" name="AuthenticationType" privateImplementationType="IIdentity">
							<attributes/>
							<getStatements>
								<methodReturnStatement>
									<primitiveExpression value="None"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property IsAuthenticated -->
						<memberProperty type="System.Boolean" name="IsAuthenticated" privateImplementationType="IIdentity">
							<attributes/>
							<getStatements>
								<methodReturnStatement>
									<primitiveExpression value="false"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property Name -->
						<memberProperty type="System.String" name="Name" privateImplementationType="IIdentity">
							<attributes/>
							<getStatements>
								<methodReturnStatement>
									<stringEmptyExpression/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
					</members>
				</typeDeclaration>
				<!-- class ApplicationSiteMapProvider -->
				<typeDeclaration isPartial="true" name="ApplicationSiteMapProvider">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="ApplicationSiteMapProviderBase"/>
					</baseTypes>
				</typeDeclaration>
				<!-- class ApplicationSiteMapProviderBase -->
				<typeDeclaration name="ApplicationSiteMapProviderBase">
					<attributes public="true"/>
					<baseTypes>
						<typeReference type="System.Web.XmlSiteMapProvider"/>
					</baseTypes>
					<members>
						<!-- IsAccessibleToUser(HttpContext, SiteMapNode) -->
						<memberMethod returnType="System.Boolean" name="IsAccessibleToUser">
							<attributes public="true" override="true"/>
							<parameters>
								<parameter type="HttpContext" name="context"/>
								<parameter type="SiteMapNode" name="node"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="device">
									<init>
										<arrayIndexerExpression>
											<target>
												<argumentReferenceExpression name="node"/>
											</target>
											<indices>
												<primitiveExpression value="Device"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Boolean" name="isTouchUI">
									<init>
										<propertyReferenceExpression name="IsTouchClient">
											<typeReferenceExpression type="ApplicationServices"/>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="ValueEquality">
												<variableReferenceExpression name="device"/>
												<primitiveExpression value="touch"/>
											</binaryOperatorExpression>
											<unaryOperatorExpression operator="Not">
												<variableReferenceExpression name="isTouchUI"/>
											</unaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="false"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<binaryOperatorExpression operator="ValueEquality">
												<variableReferenceExpression name="device"/>
												<primitiveExpression value="desktop"/>
											</binaryOperatorExpression>
											<variableReferenceExpression name="isTouchUI"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<primitiveExpression value="false"/>
										</methodReturnStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="IsAccessibleToUser">
										<target>
											<baseReferenceExpression/>
										</target>
										<parameters>
											<argumentReferenceExpression name="context"/>
											<argumentReferenceExpression name="node"/>
										</parameters>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<xsl:if test="a:project/a:connectionString/@sessionStateMode='Custom'">
					<!-- class ApplicationSessionState -->
					<typeDeclaration name="ApplicationSessionState" isPartial="true">
						<attributes public="true"/>
						<baseTypes>
							<typeReference type="ApplicationSessionStateBase"/>
						</baseTypes>
					</typeDeclaration>
					<!-- class ApplicationSessionStateBase-->
					<typeDeclaration name="ApplicationSessionStateBase">
						<attributes public="true"/>
						<baseTypes>
							<typeReference type="SessionStateStoreProviderBase"/>
						</baseTypes>
						<members>
							<!-- property Current-->
							<memberField type="ApplicationSessionStateBase" name="Current">
								<attributes public="true" static="true"/>
							</memberField>
							<!-- field _config -->
							<memberField type="SessionStateSection" name="config">
								<attributes private="true"/>
								<init>
									<primitiveExpression value="null"/>
								</init>
							</memberField>
							<!-- field _connectionStringName -->
							<memberField type="System.String" name="connectionStringName">
								<attributes private="true"/>
							</memberField>
							<!-- property ApplicationName-->
							<memberProperty type="System.String" name="ApplicationName">
								<attributes public="true"/>
							</memberProperty>
							<!-- property WriteExceptionsToEventLog-->
							<memberProperty type="System.Boolean" name="WriteExceptionsToEventLog">
								<attributes public="true"/>
							</memberProperty>
							<!-- method DeleteExpiredSessions()-->
							<memberMethod name="DeleteExpiredSessions">
								<attributes public="true"/>
								<statements>
									<usingStatement>
										<xsl:variable name="DeleteExpiredSessions" xml:space="preserve">
                      <![CDATA[DELETE FROM [aspnet_Sessions] WHERE [aspnet_Sessions.Expires] < @Expires]]>
                    </xsl:variable>
										<variable type="SqlText" name="cmd">
											<init>
												<methodInvokeExpression methodName="CreateSqlText">
													<parameters>
														<primitiveExpression value="{codeontime:NormalizeLineEndings($DeleteExpiredSessions)}"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variable>
										<statements>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="Expires"/>
													<propertyReferenceExpression name="Now">
														<typeReferenceExpression type="DateTime"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="ExecuteNonQuery">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
											</methodInvokeExpression>
										</statements>
									</usingStatement>
								</statements>
							</memberMethod>
							<!-- method Initialize(string, NameValueCollection)-->
							<memberMethod name="Initialize">
								<attributes override="true" public="true"/>
								<parameters>
									<parameter type="System.String" name="name"/>
									<parameter type="NameValueCollection" name="config"/>
								</parameters>
								<statements>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="IdentityEquality">
												<argumentReferenceExpression name="config"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<throwExceptionStatement>
												<objectCreateExpression type="ArgumentNullException">
													<parameters>
														<primitiveExpression value="config"/>
													</parameters>
												</objectCreateExpression>
											</throwExceptionStatement>
										</trueStatements>
									</conditionStatement>
									<conditionStatement>
										<condition>
											<unaryOperatorExpression operator="IsNullOrEmpty">
												<argumentReferenceExpression name="name"/>
											</unaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<argumentReferenceExpression name="name"/>
												<primitiveExpression value="ApplicationSessionState"/>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<conditionStatement>
										<condition>
											<unaryOperatorExpression operator="IsNullOrEmpty">
												<arrayIndexerExpression>
													<target>
														<argumentReferenceExpression name="config"/>
													</target>
													<indices>
														<primitiveExpression value="description"/>
													</indices>
												</arrayIndexerExpression>
											</unaryOperatorExpression>
										</condition>
										<trueStatements>
											<methodInvokeExpression methodName="Remove">
												<target>
													<argumentReferenceExpression name="config"/>
												</target>
												<parameters>
													<primitiveExpression value="description"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="Add">
												<target>
													<argumentReferenceExpression name="config"/>
												</target>
												<parameters>
													<primitiveExpression value="description"/>
													<primitiveExpression value="Custom Session State Store Provider"/>
												</parameters>
											</methodInvokeExpression>
										</trueStatements>
									</conditionStatement>
									<methodInvokeExpression methodName="Initialize">
										<target>
											<baseReferenceExpression />
										</target>
										<parameters>
											<argumentReferenceExpression name="name"/>
											<argumentReferenceExpression name="config"/>
										</parameters>
									</methodInvokeExpression>
									<assignStatement>
										<fieldReferenceExpression name="applicationName"/>
										<propertyReferenceExpression name="ApplicationVirtualPath">
											<typeReferenceExpression type="System.Web.Hosting.HostingEnvironment"/>
										</propertyReferenceExpression>
									</assignStatement>
									<variableDeclarationStatement type="System.Configuration.Configuration" name="cfg">
										<init>
											<methodInvokeExpression methodName="OpenWebConfiguration">
												<target>
													<typeReferenceExpression type="WebConfigurationManager"/>
												</target>
												<parameters>
													<propertyReferenceExpression name="ApplicationName"/>
												</parameters>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<assignStatement>
										<fieldReferenceExpression name="config"/>
										<castExpression targetType="SessionStateSection">
											<methodInvokeExpression methodName="GetSection">
												<target>
													<variableReferenceExpression name="cfg"/>
												</target>
												<parameters>
													<primitiveExpression value="system.web/sessionState"/>
												</parameters>
											</methodInvokeExpression>
										</castExpression>
									</assignStatement>
									<variableDeclarationStatement type="ConnectionStringSettings" name="settings">
										<init>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="ConnectionStrings">
														<typeReferenceExpression type="ConfigurationManager"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<arrayIndexerExpression>
														<target>
															<variableReferenceExpression name="config"/>
														</target>
														<indices>
															<primitiveExpression value="connectionStringName"/>
														</indices>
													</arrayIndexerExpression>
												</indices>
											</arrayIndexerExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="IdentityInequality">
												<variableReferenceExpression name="settings"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<fieldReferenceExpression name="connectionStringName"/>
												<propertyReferenceExpression name="Name">
													<variableReferenceExpression name="settings"/>
												</propertyReferenceExpression>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<assignStatement>
										<fieldReferenceExpression name="writeExceptionsToEventLog"/>
										<primitiveExpression value="false"/>
									</assignStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="IdentityInequality">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="config"/>
													</target>
													<indices>
														<primitiveExpression value="writeExceptionsToEventLog"/>
													</indices>
												</arrayIndexerExpression>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="ValueEquality">
														<methodInvokeExpression methodName="ToUpper">
															<target>
																<arrayIndexerExpression>
																	<target>
																		<variableReferenceExpression name="config"/>
																	</target>
																	<indices>
																		<primitiveExpression value="writeExceptionsToEventLog"/>
																	</indices>
																</arrayIndexerExpression>
															</target>
														</methodInvokeExpression>
														<primitiveExpression value="TRUE" convertTo="String"/>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<assignStatement>
														<fieldReferenceExpression name="writeExceptionsToEventLog"/>
														<primitiveExpression value="true"/>
													</assignStatement>
												</trueStatements>
											</conditionStatement>
										</trueStatements>
									</conditionStatement>
									<assignStatement>
										<propertyReferenceExpression name="Current"/>
										<thisReferenceExpression/>
									</assignStatement>
								</statements>
							</memberMethod>
							<!-- method Dispose-->
							<memberMethod name="Dispose">
								<attributes public="true" override="true"/>
								<statements></statements>
							</memberMethod>
							<!-- method SetItemExpireCallback(SessionStateItemExpireCallback)-->
							<memberMethod returnType="System.Boolean" name="SetItemExpireCallback">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="SessionStateItemExpireCallback" name="expireCallback"/>
								</parameters>
								<statements>
									<methodReturnStatement>
										<primitiveExpression value="false"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method SetAndReleaseItemExclusive(HttpContext, string, SessionStateStoreData, object, bool)-->
							<memberMethod name="SetAndReleaseItemExclusive">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
									<parameter type="System.String" name="id"/>
									<parameter type="SessionStateStoreData" name="item"/>
									<parameter type="System.Object" name="lockId"/>
									<parameter type="System.Boolean" name="newItem"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="System.Byte[]" name="sessItems">
										<init>
											<methodInvokeExpression methodName="Serialize">
												<parameters>
													<castExpression targetType="SessionStateItemCollection">
														<propertyReferenceExpression name="Items">
															<argumentReferenceExpression name="item"/>
														</propertyReferenceExpression>
													</castExpression>
												</parameters>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<argumentReferenceExpression name="newItem"/>
										</condition>
										<trueStatements>
											<methodInvokeExpression methodName="DeleteExpiredSessions"/>
											<xsl:variable name="SetAndReleaseItemExclusive" xml:space="preserve">
                        <![CDATA[INSERT INTO [aspnet_Sessions] ([aspnet_Sessions.SessionId], [aspnet_Sessions.ApplicationName], [aspnet_Sessions.Created], [aspnet_Sessions.Expires], [aspnet_Sessions.LockDate], [aspnet_Sessions.LockId], [aspnet_Sessions.Timeout], [aspnet_Sessions.Locked], [aspnet_Sessions.SessionItems], [aspnet_Sessions.Flags]) Values(@SessionId, @ApplicationName, @Created, @Expires, @LockDate, @LockId , @Timeout, @Locked, @SessionItems, @Flags)]]>
                      </xsl:variable>
											<usingStatement>
												<variable type="SqlText" name="cmd">
													<init>
														<methodInvokeExpression methodName="CreateSqlText">
															<parameters>
																<primitiveExpression value="{codeontime:NormalizeLineEndings($SetAndReleaseItemExclusive)}"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variable>
												<statements>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="SessionId"/>
															<argumentReferenceExpression name="id"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="Expires"/>
															<methodInvokeExpression methodName="AddMinutes">
																<target>
																	<propertyReferenceExpression name="Now">
																		<typeReferenceExpression type="DateTime"/>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<castExpression targetType="System.Double">
																		<propertyReferenceExpression name="Timeout">
																			<argumentReferenceExpression name="item"/>
																		</propertyReferenceExpression>
																	</castExpression>
																</parameters>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="Created"/>
															<propertyReferenceExpression name="Now">
																<typeReferenceExpression type="DateTime"/>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="LockDate"/>
															<propertyReferenceExpression name="Now">
																<typeReferenceExpression type="DateTime"/>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="LockId"/>
															<primitiveExpression value="0"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="Timeout"/>
															<propertyReferenceExpression name="Timeout">
																<argumentReferenceExpression name="item"/>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="Locked"/>
															<primitiveExpression value="0"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="SessionItems"/>
															<variableReferenceExpression name="sessItems"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="Flags"/>
															<primitiveExpression value="0"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="ExecuteNonQuery">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
													</methodInvokeExpression>
												</statements>
											</usingStatement>
										</trueStatements>
										<falseStatements>
											<xsl:variable name="SetAndReleaseItemExclusiveUpdate" xml:space="preserve"><![CDATA[UPDATE [aspnet_Sessions] SET [aspnet_Sessions.Expires] = @Expires, [aspnet_Sessions.SessionItems] = @SessionItems, [aspnet_Sessions.Locked] = @Locked WHERE [aspnet_Sessions.SessionId] = @SessionId AND [aspnet_Sessions.ApplicationName] = @ApplicationName AND [aspnet_Sessions.LockId] = @LockId]]></xsl:variable>
											<usingStatement>
												<variable type="SqlText" name="cmd">
													<init>
														<methodInvokeExpression methodName="CreateSqlText">
															<parameters>
																<primitiveExpression value="{codeontime:NormalizeLineEndings($SetAndReleaseItemExclusiveUpdate)}"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variable>
												<statements>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="SessionId"/>
															<argumentReferenceExpression name="id"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="Expires"/>
															<methodInvokeExpression methodName="AddMinutes">
																<target>
																	<propertyReferenceExpression name="Now">
																		<typeReferenceExpression type="DateTime"/>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<castExpression targetType="System.Double">
																		<propertyReferenceExpression name="Timeout">
																			<argumentReferenceExpression name="item"/>
																		</propertyReferenceExpression>
																	</castExpression>
																</parameters>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="SessionItems"/>
															<variableReferenceExpression name="sessItems"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="Locked"/>
															<primitiveExpression value="0"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="LockId"/>
															<variableReferenceExpression name="lockId"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="ExecuteNonQuery">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
													</methodInvokeExpression>
												</statements>
											</usingStatement>
										</falseStatements>
									</conditionStatement>
								</statements>
							</memberMethod>
							<!-- method GetItem(HttpContext, string, out bool, out TimeSpan, out object, out SessionStateActions)-->
							<memberMethod returnType="SessionStateStoreData" name="GetItem">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
									<parameter type="System.String" name="id"/>
									<parameter direction="Out" type="System.Boolean" name="locked"/>
									<parameter direction="Out" type="TimeSpan" name="lockAge"/>
									<parameter direction="Out" type="System.Object" name="lockId"/>
									<parameter direction="Out" type="SessionStateActions" name="actionFlags"/>
								</parameters>
								<statements>
									<methodReturnStatement>
										<methodInvokeExpression methodName="GetSessionStoreItem">
											<parameters>
												<primitiveExpression value="false"/>
												<argumentReferenceExpression name="context"/>
												<argumentReferenceExpression name="id"/>
												<directionExpression direction="Out">
													<argumentReferenceExpression name="locked"/>
												</directionExpression>
												<directionExpression direction="Out">
													<argumentReferenceExpression name="lockAge"/>
												</directionExpression>
												<directionExpression direction="Out">
													<argumentReferenceExpression name="lockId"/>
												</directionExpression>
												<directionExpression direction="Out">
													<argumentReferenceExpression name="actionFlags"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method GetItemExclusive(HttpContext, string, out bool, out TimeSpan, out object, out SessionStateActions)-->
							<memberMethod returnType="SessionStateStoreData" name="GetItemExclusive">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
									<parameter type="System.String" name="id"/>
									<parameter direction="Out" type="System.Boolean" name="locked"/>
									<parameter direction="Out" type="TimeSpan" name="lockAge"/>
									<parameter direction="Out" type="System.Object" name="lockId"/>
									<parameter direction="Out" type="SessionStateActions" name="actionFlags"/>
								</parameters>
								<statements>
									<methodReturnStatement>
										<methodInvokeExpression methodName="GetSessionStoreItem">
											<parameters>
												<primitiveExpression value="true"/>
												<argumentReferenceExpression name="context"/>
												<argumentReferenceExpression name="id"/>
												<directionExpression direction="Out">
													<argumentReferenceExpression name="locked"/>
												</directionExpression>
												<directionExpression direction="Out">
													<argumentReferenceExpression name="lockAge"/>
												</directionExpression>
												<directionExpression direction="Out">
													<argumentReferenceExpression name="lockId"/>
												</directionExpression>
												<directionExpression direction="Out">
													<argumentReferenceExpression name="actionFlags"/>
												</directionExpression>
											</parameters>
										</methodInvokeExpression>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method GetSessionStoreItem(bool, HttpContext, string, out bool, out TimeSpan, out object, out SessionStateActions)-->
							<memberMethod returnType="SessionStateStoreData" name="GetSessionStoreItem">
								<attributes private="true"/>
								<parameters>
									<parameter type="System.Boolean" name="lockRecord"/>
									<parameter type="HttpContext" name="context"/>
									<parameter type="System.String" name="id"/>
									<parameter direction="Out" type="System.Boolean" name="locked"/>
									<parameter direction="Out" type="TimeSpan" name="lockAge"/>
									<parameter direction="Out" type="System.Object" name="lockId"/>
									<parameter direction="Out" type="SessionStateActions" name="actionFlags"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="SessionStateStoreData" name="item">
										<init>
											<primitiveExpression value="null"/>
										</init>
									</variableDeclarationStatement>
									<assignStatement>
										<argumentReferenceExpression name="lockAge"/>
										<propertyReferenceExpression name="Zero">
											<typeReferenceExpression type="TimeSpan"/>
										</propertyReferenceExpression>
									</assignStatement>
									<assignStatement>
										<argumentReferenceExpression name="lockId"/>
										<primitiveExpression value="null"/>
									</assignStatement>
									<assignStatement>
										<argumentReferenceExpression name="locked"/>
										<primitiveExpression value="false"/>
									</assignStatement>
									<assignStatement>
										<argumentReferenceExpression name="actionFlags"/>
										<primitiveExpression value="0"/>
									</assignStatement>
									<variableDeclarationStatement type="DbDataReader" name="reader">
										<init>
											<primitiveExpression value="null"/>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="DateTime" name="expires"/>
									<variableDeclarationStatement type="System.Byte[]" name="serializedItems">
										<init>
											<primitiveExpression value="null"/>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="System.Boolean" name="foundRecord">
										<init>
											<primitiveExpression value="false"/>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="System.Boolean" name="deleteData">
										<init>
											<primitiveExpression value="false"/>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="System.Int32" name="timeout">
										<init>
											<primitiveExpression value="0"/>
										</init>
									</variableDeclarationStatement>
									<tryStatement>
										<statements>
											<comment>Obtain a lock if possible. Ignore the record if it is expired.</comment>
											<conditionStatement>
												<condition>
													<argumentReferenceExpression name="lockRecord"/>
												</condition>
												<trueStatements>
													<xsl:variable name="ObtainLock" xml:space="preserve"><![CDATA[UPDATE [aspnet_Sessions] SET [aspnet_Sessions.Locked] = @LockedTrue, [aspnet_Sessions.LockDate] = @LockDate WHERE [aspnet_Sessions.SessionId] = @SessionId AND [aspnet_Sessions.ApplicationName] = @ApplicationName AND [aspnet_Sessions.Locked] = @LockedFalse AND [aspnet_Sessions.Expires] > @Expires]]></xsl:variable>
													<usingStatement>
														<variable type="SqlText" name="cmd">
															<init>
																<methodInvokeExpression methodName="CreateSqlText">
																	<parameters>
																		<primitiveExpression value="{codeontime:NormalizeLineEndings($ObtainLock)}"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variable>
														<statements>
															<methodInvokeExpression methodName="AddParameter">
																<target>
																	<variableReferenceExpression name="cmd"/>
																</target>
																<parameters>
																	<primitiveExpression value="LockedTrue"/>
																	<primitiveExpression value="1"/>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="AddParameter">
																<target>
																	<variableReferenceExpression name="cmd"/>
																</target>
																<parameters>
																	<primitiveExpression value="LockDate"/>
																	<propertyReferenceExpression name="Now">
																		<typeReferenceExpression type="DateTime"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="AddParameter">
																<target>
																	<variableReferenceExpression name="cmd"/>
																</target>
																<parameters>
																	<primitiveExpression value="SessionId"/>
																	<argumentReferenceExpression name="id"/>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="AddParameter">
																<target>
																	<variableReferenceExpression name="cmd"/>
																</target>
																<parameters>
																	<primitiveExpression value="LockedFalse"/>
																	<primitiveExpression value="0"/>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="AddParameter">
																<target>
																	<variableReferenceExpression name="cmd"/>
																</target>
																<parameters>
																	<primitiveExpression value="Expires"/>
																	<propertyReferenceExpression name="Now">
																		<typeReferenceExpression type="DateTime"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
															<conditionStatement>
																<condition>
																	<binaryOperatorExpression operator="ValueEquality">
																		<methodInvokeExpression methodName="ExecuteNonQuery">
																			<target>
																				<variableReferenceExpression name="cmd"/>
																			</target>
																		</methodInvokeExpression>
																		<primitiveExpression value="0"/>
																	</binaryOperatorExpression>
																</condition>
																<trueStatements>
																	<comment>No record was updated because the record was locked or not found.</comment>
																	<assignStatement>
																		<variableReferenceExpression name="locked"/>
																		<primitiveExpression value="true"/>
																	</assignStatement>
																</trueStatements>
																<falseStatements>
																	<comment>The record was updated.</comment>
																	<assignStatement>
																		<variableReferenceExpression name="locked"/>
																		<primitiveExpression value="false"/>
																	</assignStatement>
																</falseStatements>
															</conditionStatement>
														</statements>
													</usingStatement>
												</trueStatements>
											</conditionStatement>
											<comment>Retrieve the current session item information.</comment>
											<xsl:variable name="RetrieveSessionItem" xml:space="preserve"><![CDATA[SELECT [aspnet_Sessions.Expires], [aspnet_Sessions.SessionItems], [aspnet_Sessions.LockId], [aspnet_Sessions.LockDate], [aspnet_Sessions.Flags], [aspnet_Sessions.Timeout] FROM [aspnet_Sessions] WHERE [aspnet_Sessions.SessionId] = @SessionId AND [aspnet_Sessions.ApplicationName] = @ApplicationName]]></xsl:variable>
											<usingStatement>
												<variable type="SqlText" name="cmd">
													<init>
														<methodInvokeExpression methodName="CreateSqlText">
															<parameters>
																<primitiveExpression value="{codeontime:NormalizeLineEndings($RetrieveSessionItem)}"/>
															</parameters>
														</methodInvokeExpression>
													</init>
												</variable>
												<statements>
													<methodInvokeExpression methodName="AddParameter">
														<target>
															<variableReferenceExpression name="cmd"/>
														</target>
														<parameters>
															<primitiveExpression value="SessionId"/>
															<argumentReferenceExpression name="id"/>
														</parameters>
													</methodInvokeExpression>
													<comment>Retrieve session item data from the data source.</comment>
													<assignStatement>
														<variableReferenceExpression name="reader"/>
														<methodInvokeExpression methodName="ExecuteReader">
															<target>
																<variableReferenceExpression name="cmd"/>
															</target>
														</methodInvokeExpression>
													</assignStatement>
													<whileStatement>
														<test>
															<methodInvokeExpression methodName="Read">
																<target>
																	<variableReferenceExpression name="cmd"/>
																</target>
															</methodInvokeExpression>
														</test>
														<statements>
															<assignStatement>
																<variableReferenceExpression name="expires"/>
																<methodInvokeExpression methodName="GetDateTime">
																	<target>
																		<variableReferenceExpression name="reader"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="0"/>
																	</parameters>
																</methodInvokeExpression>
															</assignStatement>
															<conditionStatement>
																<condition>
																	<binaryOperatorExpression operator="LessThan">
																		<variableReferenceExpression name="expires"/>
																		<propertyReferenceExpression name="Now">
																			<typeReferenceExpression type="DateTime"/>
																		</propertyReferenceExpression>
																	</binaryOperatorExpression>
																</condition>
																<trueStatements>
																	<comment>The record was expired. Mark it as not locked.</comment>
																	<assignStatement>
																		<variableReferenceExpression name="locked"/>
																		<primitiveExpression value="false"/>
																	</assignStatement>
																	<comment>The session was expired. Mark the data for deletion.</comment>
																	<assignStatement>
																		<variableReferenceExpression name="deleteData"/>
																		<primitiveExpression value="true"/>
																	</assignStatement>
																</trueStatements>
																<falseStatements>
																	<assignStatement>
																		<variableReferenceExpression name="foundRecord"/>
																		<primitiveExpression value="true"/>
																	</assignStatement>
																</falseStatements>
															</conditionStatement>
															<conditionStatement>
																<condition>
																	<binaryOperatorExpression operator="IdentityEquality">
																		<arrayIndexerExpression>
																			<target>
																				<variableReferenceExpression name="reader"/>
																			</target>
																			<indices>
																				<primitiveExpression value="1"/>
																			</indices>
																		</arrayIndexerExpression>
																		<propertyReferenceExpression name="Value">
																			<typeReferenceExpression type="DBNull"/>
																		</propertyReferenceExpression>
																	</binaryOperatorExpression>
																</condition>
																<trueStatements>
																	<assignStatement>
																		<variableReferenceExpression name="serializedItems"/>
																		<arrayCreateExpression>
																			<createType type="System.Byte"/>
																			<sizeExpression>
																				<primitiveExpression value="0"/>
																			</sizeExpression>
																		</arrayCreateExpression>
																	</assignStatement>
																</trueStatements>
																<falseStatements>
																	<assignStatement>
																		<variableReferenceExpression name="serializedItems"/>
																		<castExpression targetType="System.Byte[]">
																			<arrayIndexerExpression>
																				<target>
																					<variableReferenceExpression name="reader"/>
																				</target>
																				<indices>
																					<primitiveExpression value="1"/>
																				</indices>
																			</arrayIndexerExpression>
																		</castExpression>
																	</assignStatement>
																</falseStatements>
															</conditionStatement>
															<assignStatement>
																<variableReferenceExpression name="lockId"/>
																<methodInvokeExpression methodName="GetInt32">
																	<target>
																		<variableReferenceExpression name="reader"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="2"/>
																	</parameters>
																</methodInvokeExpression>
															</assignStatement>
															<assignStatement>
																<variableReferenceExpression name="lockAge"/>
																<methodInvokeExpression methodName="Subtract">
																	<target>
																		<propertyReferenceExpression name="Now">
																			<typeReferenceExpression type="DateTime"/>
																		</propertyReferenceExpression>
																	</target>
																	<parameters>
																		<methodInvokeExpression methodName="GetDateTime">
																			<target>
																				<variableReferenceExpression name="reader"/>
																			</target>
																			<parameters>
																				<primitiveExpression value="3"/>
																			</parameters>
																		</methodInvokeExpression>
																	</parameters>
																</methodInvokeExpression>
															</assignStatement>
															<assignStatement>
																<variableReferenceExpression name="actionFlags"/>
																<castExpression targetType="SessionStateActions">
																	<methodInvokeExpression methodName="GetInt32">
																		<target>
																			<variableReferenceExpression name="reader"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="4"/>
																		</parameters>
																	</methodInvokeExpression>
																</castExpression>
															</assignStatement>
															<assignStatement>
																<variableReferenceExpression name="timeout"/>
																<methodInvokeExpression methodName="GetInt32">
																	<target>
																		<variableReferenceExpression name="reader"/>
																	</target>
																	<parameters>
																		<primitiveExpression value="5"/>
																	</parameters>
																</methodInvokeExpression>
															</assignStatement>
														</statements>
													</whileStatement>
													<methodInvokeExpression methodName="Close">
														<target>
															<variableReferenceExpression name="reader"/>
														</target>
													</methodInvokeExpression>
												</statements>
											</usingStatement>
											<comment>If the return session item is expired, delete the record from the data source.</comment>
											<conditionStatement>
												<condition>
													<variableReferenceExpression name="deleteData"/>
												</condition>
												<trueStatements>
													<xsl:variable name="DeleteSessionItem" xml:space="preserve"><![CDATA[DELETE FROM [aspnet_Sessions] WHERE [aspnet_Sessions.SessionId] = @SessionId AND [aspnet_Sessions.ApplicationName] = @ApplicationName]]></xsl:variable>
													<usingStatement>
														<variable type="SqlText" name="cmd">
															<init>
																<methodInvokeExpression methodName="CreateSqlText">
																	<parameters>
																		<primitiveExpression value="{codeontime:NormalizeLineEndings($DeleteSessionItem)}"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variable>
														<statements>
															<methodInvokeExpression methodName="AddParameter">
																<target>
																	<variableReferenceExpression name="cmd"/>
																</target>
																<parameters>
																	<primitiveExpression value="SessionId"/>
																	<argumentReferenceExpression name="id"/>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="ExecuteNonQuery">
																<target>
																	<variableReferenceExpression name="cmd"/>
																</target>
															</methodInvokeExpression>
														</statements>
													</usingStatement>
												</trueStatements>
											</conditionStatement>
											<comment>The record was not found. Ensure that locked is false.</comment>
											<conditionStatement>
												<condition>
													<unaryOperatorExpression operator="Not">
														<variableReferenceExpression name="foundRecord"/>
													</unaryOperatorExpression>
												</condition>
												<trueStatements>
													<assignStatement>
														<variableReferenceExpression name="locked"/>
														<primitiveExpression value="false"/>
													</assignStatement>
												</trueStatements>
											</conditionStatement>
											<comment>
												If the record was found and you obtain a lock, then set
												the lockId, clear the actionFlags, and create the SessionStateSToreItem to return.
											</comment>
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="BooleanAnd">
														<variableReferenceExpression name="foundRecord"/>
														<unaryOperatorExpression operator="Not">
															<variableReferenceExpression name="locked"/>
														</unaryOperatorExpression>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<assignStatement>
														<variableReferenceExpression name="lockId"/>
														<binaryOperatorExpression operator="Add">
															<castExpression targetType="System.Int32">
																<variableReferenceExpression name="lockId"/>
															</castExpression>
															<primitiveExpression value="1"/>
														</binaryOperatorExpression>
													</assignStatement>
													<xsl:variable name="SetLock" xml:space="preserve"><![CDATA[UPDATE [aspnet_Sessions] SET [aspnet_Sessions.LockId] = @LockId, [aspnet_Sessions.Flags] = 0 WHERE [aspnet_Sessions.SessionId] = @SessionId AND [aspnet_Sessions.ApplicationName] = @ApplicationName]]></xsl:variable>
													<usingStatement>
														<variable type="SqlText" name="cmd">
															<init>
																<methodInvokeExpression methodName="CreateSqlText">
																	<parameters>
																		<primitiveExpression value="{codeontime:NormalizeLineEndings($SetLock)}"/>
																	</parameters>
																</methodInvokeExpression>
															</init>
														</variable>
														<statements>
															<methodInvokeExpression methodName="AddParameter">
																<target>
																	<variableReferenceExpression name="cmd"/>
																</target>
																<parameters>
																	<primitiveExpression value="lockId"/>
																	<variableReferenceExpression name="lockId"/>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="AddParameter">
																<target>
																	<variableReferenceExpression name="cmd"/>
																</target>
																<parameters>
																	<primitiveExpression value="SessionId"/>
																	<variableReferenceExpression name="id"/>
																</parameters>
															</methodInvokeExpression>
															<methodInvokeExpression methodName="ExecuteNonQuery">
																<target>
																	<variableReferenceExpression name="cmd"/>
																</target>
															</methodInvokeExpression>
														</statements>
													</usingStatement>
													<comment>
														If the actionFlags parameter is not InitializeItem
														deserialize the stored SessionStateItemCollection.
													</comment>
													<conditionStatement>
														<condition>
															<binaryOperatorExpression operator="ValueEquality">
																<variableReferenceExpression name="actionFlags"/>
																<propertyReferenceExpression name="InitializeItem">
																	<typeReferenceExpression type="SessionStateActions"/>
																</propertyReferenceExpression>
															</binaryOperatorExpression>
														</condition>
														<trueStatements>
															<assignStatement>
																<variableReferenceExpression name="item"/>
																<methodInvokeExpression methodName="CreateNewStoreData">
																	<parameters>
																		<variableReferenceExpression name="context"/>
																		<convertExpression to="Int32">
																			<propertyReferenceExpression name="TotalMinutes">
																				<propertyReferenceExpression name="Timeout">
																					<fieldReferenceExpression name="config"/>
																				</propertyReferenceExpression>
																			</propertyReferenceExpression>
																		</convertExpression>
																	</parameters>
																</methodInvokeExpression>
															</assignStatement>
														</trueStatements>
														<falseStatements>
															<assignStatement>
																<variableReferenceExpression name="item"/>
																<methodInvokeExpression methodName="Deserialize">
																	<parameters>
																		<variableReferenceExpression name="context"/>
																		<variableReferenceExpression name="serializedItems"/>
																		<variableReferenceExpression name="timeout"/>
																	</parameters>
																</methodInvokeExpression>
															</assignStatement>
														</falseStatements>
													</conditionStatement>
												</trueStatements>
											</conditionStatement>
										</statements>
										<finally>
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="IdentityInequality">
														<variableReferenceExpression name="reader"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<methodInvokeExpression methodName="Close">
														<target>
															<variableReferenceExpression name="reader"/>
														</target>
													</methodInvokeExpression>
												</trueStatements>
											</conditionStatement>
										</finally>
									</tryStatement>
									<methodReturnStatement>
										<variableReferenceExpression name="item"/>
									</methodReturnStatement>

								</statements>
							</memberMethod>
							<!-- method Serialize(SessionStateItemCollection)-->
							<memberMethod returnType="System.Byte[]" name="Serialize">
								<attributes private="true"/>
								<parameters>
									<parameter type="SessionStateItemCollection" name="items"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="MemoryStream" name="ms">
										<init>
											<objectCreateExpression type="MemoryStream"/>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="BinaryWriter" name="writer">
										<init>
											<objectCreateExpression type="BinaryWriter">
												<parameters>
													<variableReferenceExpression name="ms"/>
												</parameters>
											</objectCreateExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="IdentityInequality">
												<argumentReferenceExpression name="items"/>
												<primitiveExpression value="null"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<methodInvokeExpression methodName="Serialize">
												<target>
													<variableReferenceExpression name="items"/>
												</target>
												<parameters>
													<variableReferenceExpression name="writer"/>
												</parameters>
											</methodInvokeExpression>
										</trueStatements>
									</conditionStatement>
									<methodInvokeExpression methodName="Close">
										<target>
											<variableReferenceExpression name="writer"/>
										</target>
									</methodInvokeExpression>
									<methodReturnStatement>
										<methodInvokeExpression methodName="ToArray">
											<target>
												<variableReferenceExpression name="ms"/>
											</target>
										</methodInvokeExpression>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method Deserialize(HttpContext, byte[], int)-->
							<memberMethod returnType="SessionStateStoreData" name="Deserialize">
								<attributes private="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
									<parameter type="System.Byte[]" name="serializedItems"/>
									<parameter type="System.Int32" name="timeout"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="MemoryStream" name="ms">
										<init>
											<objectCreateExpression type="MemoryStream">
												<parameters>
													<argumentReferenceExpression name="serializedItems"/>
												</parameters>
											</objectCreateExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="SessionStateItemCollection" name="sessionItems">
										<init>
											<objectCreateExpression type="SessionStateItemCollection"/>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="GreaterThan">
												<propertyReferenceExpression name="Length">
													<variableReferenceExpression name="ms"/>
												</propertyReferenceExpression>
												<primitiveExpression value="0"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<variableDeclarationStatement type="BinaryReader"  name="reader">
												<init>
													<objectCreateExpression type="BinaryReader">
														<parameters>
															<variableReferenceExpression name="ms"/>
														</parameters>
													</objectCreateExpression>
												</init>
											</variableDeclarationStatement>
											<assignStatement>
												<variableReferenceExpression name="sessionItems"/>
												<methodInvokeExpression methodName="Deserialize">
													<target>
														<typeReferenceExpression type="SessionStateItemCollection"/>
													</target>
													<parameters>
														<variableReferenceExpression name="reader"/>
													</parameters>
												</methodInvokeExpression>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<methodReturnStatement>
										<objectCreateExpression type="SessionStateStoreData">
											<parameters>
												<variableReferenceExpression name="sessionItems"/>
												<methodInvokeExpression methodName="GetSessionStaticObjects">
													<target>
														<typeReferenceExpression type="SessionStateUtility"/>
													</target>
													<parameters>
														<variableReferenceExpression name="context"/>
													</parameters>
												</methodInvokeExpression>
												<argumentReferenceExpression name="timeout"/>
											</parameters>
										</objectCreateExpression>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method CreateSqlText(string)-->
							<memberMethod returnType="SqlText" name="CreateSqlText">
								<attributes public="true" final="true"/>
								<parameters>
									<parameter type="System.String" name="sql"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="SqlText" name="cmd">
										<init>
											<objectCreateExpression type="SqlText">
												<parameters>
													<argumentReferenceExpression name="sql"/>
													<fieldReferenceExpression name="connectionStringName"/>
												</parameters>
											</objectCreateExpression>
										</init>
									</variableDeclarationStatement>
									<assignStatement>
										<propertyReferenceExpression name="CommandText">
											<propertyReferenceExpression name="Command">
												<variableReferenceExpression name="cmd"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
										<methodInvokeExpression methodName="Replace">
											<target>
												<propertyReferenceExpression name="CommandText">
													<propertyReferenceExpression name="Command">
														<variableReferenceExpression name="cmd"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="@"/>
												<propertyReferenceExpression name="ParameterMarker">
													<variableReferenceExpression name="cmd"/>
												</propertyReferenceExpression>
											</parameters>
										</methodInvokeExpression>
									</assignStatement>
									<conditionStatement>
										<condition>
											<methodInvokeExpression methodName="Contains">
												<target>
													<propertyReferenceExpression name="CommandText">
														<propertyReferenceExpression name="Command">
															<variableReferenceExpression name="cmd"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<binaryOperatorExpression operator="Add">
														<propertyReferenceExpression name="ParameterMarker">
															<variableReferenceExpression name="cmd"/>
														</propertyReferenceExpression>
														<primitiveExpression value="ApplicationName"/>
													</binaryOperatorExpression>
												</parameters>
											</methodInvokeExpression>
										</condition>
										<trueStatements>
											<methodInvokeExpression methodName="AssignParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="ApplicationName"/>
													<propertyReferenceExpression name="ApplicationName"/>
												</parameters>
											</methodInvokeExpression>
										</trueStatements>
									</conditionStatement>
									<assignStatement>
										<propertyReferenceExpression name="Name">
											<variableReferenceExpression name="cmd"/>
										</propertyReferenceExpression>
										<primitiveExpression value="{$Namespace} Session State Provider"/>
									</assignStatement>
									<assignStatement>
										<propertyReferenceExpression name="WriteExceptionsToEventLog">
											<variableReferenceExpression name="cmd"/>
										</propertyReferenceExpression>
										<fieldReferenceExpression name="writeExceptionsToEventLog"/>
									</assignStatement>
									<methodReturnStatement>
										<variableReferenceExpression name="cmd"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method ReleaseItemExclusive(HttpContext, string, object)-->
							<memberMethod name="ReleaseItemExclusive">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
									<parameter type="System.String" name="id"/>
									<parameter type="System.Object" name="lockId"/>
								</parameters>
								<statements>
									<xsl:variable name="ReleaseItemExclusive" xml:space="preserve"><![CDATA[UPDATE [aspnet_Sessions] SET [aspnet_Sessions.Locked] = 0, [aspnet_Sessions.Expires] = @Expires WHERE [aspnet_Sessions.SessionId] = @SessionId AND [aspnet_Sessions.ApplicationName] = @ApplicationName AND [aspnet_Sessions.LockId] = @LockId]]></xsl:variable>
									<usingStatement>
										<variable type="SqlText" name="cmd">
											<init>
												<methodInvokeExpression methodName="CreateSqlText">
													<parameters>
														<primitiveExpression value="{codeontime:NormalizeLineEndings($ReleaseItemExclusive)}"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variable>
										<statements>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="Expires"/>
													<methodInvokeExpression methodName="AddMinutes">
														<target>
															<propertyReferenceExpression name="Now">
																<typeReferenceExpression type="DateTime"/>
															</propertyReferenceExpression>
														</target>
														<parameters>
															<propertyReferenceExpression name="TotalMinutes">
																<propertyReferenceExpression name="Timeout">
																	<fieldReferenceExpression name="config"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="SessionId"/>
													<variableReferenceExpression name="id"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="LockId"/>
													<argumentReferenceExpression name="lockId"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="ExecuteNonQuery">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
											</methodInvokeExpression>
										</statements>
									</usingStatement>
								</statements>
							</memberMethod>
							<!-- method RemoveItem(HttpContext, string, object, SessionStateStoreData)-->
							<memberMethod name="RemoveItem">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
									<parameter type="System.String" name="id"/>
									<parameter type="System.Object" name="lockId"/>
									<parameter type="SessionStateStoreData" name="item"/>
								</parameters>
								<statements>
									<xsl:variable name="RemoveItem" xml:space="preserve"><![CDATA[DELETE FROM [aspnet_Sessions] WHERE [aspnet_Sessions.SessionId] = @SessionId AND [aspnet_Sessions.ApplicationName] = @ApplicationName AND [aspnet_Sessions.LockId] = @LockId]]></xsl:variable>
									<usingStatement>
										<variable type="SqlText" name="cmd">
											<init>
												<methodInvokeExpression methodName="CreateSqlText">
													<parameters>
														<primitiveExpression value="{codeontime:NormalizeLineEndings($RemoveItem)}"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variable>
										<statements>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="SessionId"/>
													<variableReferenceExpression name="id"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="LockId"/>
													<argumentReferenceExpression name="lockId"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="ExecuteNonQuery">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
											</methodInvokeExpression>
										</statements>
									</usingStatement>
								</statements>
							</memberMethod>
							<!-- method CreateUninitializedItem(HttpContext, string, int)-->
							<memberMethod name="CreateUninitializedItem">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
									<parameter type="System.String" name="id"/>
									<parameter type="System.Int32" name="timeout"/>
								</parameters>
								<statements>
									<xsl:variable name="CreateUninitializedItem" xml:space="preserve"><![CDATA[INSERT INTO [aspnet_Sessions] ([aspnet_Sessions.SessionId], [aspnet_Sessions.ApplicationName], [aspnet_Sessions.Created], [aspnet_Sessions.Expires], [aspnet_Sessions.LockDate], [aspnet_Sessions.LockId], [aspnet_Sessions.Timeout], [aspnet_Sessions.Locked], [aspnet_Sessions.Flags]) Values(@SessionId, @ApplicationName, @Created, @Expires, @LockDate, @LockId, @Timeout, @Locked, @Flags)]]></xsl:variable>
									<usingStatement>
										<variable type="SqlText" name="cmd">
											<init>
												<methodInvokeExpression methodName="CreateSqlText">
													<parameters>
														<primitiveExpression value="{codeontime:NormalizeLineEndings($CreateUninitializedItem)}"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variable>
										<statements>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="SessionId"/>
													<variableReferenceExpression name="id"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="Created"/>
													<propertyReferenceExpression name="Now">
														<typeReferenceExpression type="DateTime"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="Expires"/>
													<methodInvokeExpression methodName="AddMinutes">
														<target>
															<propertyReferenceExpression name="Now">
																<typeReferenceExpression type="DateTime"/>
															</propertyReferenceExpression>
														</target>
														<parameters>
															<castExpression targetType="System.Double">
																<argumentReferenceExpression name="timeout"/>
															</castExpression>
														</parameters>
													</methodInvokeExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="LockDate"/>
													<propertyReferenceExpression name="Now">
														<typeReferenceExpression type="DateTime"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="LockId"/>
													<primitiveExpression value="0"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="Timeout"/>
													<variableReferenceExpression name="timeout"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="Locked"/>
													<primitiveExpression value="0"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="Flags"/>
													<primitiveExpression value="1"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="ExecuteNonQuery">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
											</methodInvokeExpression>
										</statements>
									</usingStatement>
								</statements>
							</memberMethod>
							<!-- method CreateNewStoreData(HttpContext, int)-->
							<memberMethod returnType="SessionStateStoreData" name="CreateNewStoreData">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
									<parameter type="System.Int32" name="timeout"/>
								</parameters>
								<statements>
									<methodReturnStatement>
										<objectCreateExpression type="SessionStateStoreData">
											<parameters>
												<objectCreateExpression type="SessionStateItemCollection"/>
												<methodInvokeExpression methodName="GetSessionStaticObjects">
													<target>
														<typeReferenceExpression type="SessionStateUtility"/>
													</target>
													<parameters>
														<argumentReferenceExpression name="context"/>
													</parameters>
												</methodInvokeExpression>
												<argumentReferenceExpression name="timeout"/>
											</parameters>
										</objectCreateExpression>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method ResetItemTimeout(HttpContext, id)-->
							<memberMethod name="ResetItemTimeout">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
									<parameter type="System.String" name="id"/>
								</parameters>
								<statements>
									<xsl:variable name="ResetItemTimeout" xml:space="preserve"><![CDATA[UPDATE [aspnet_Sessions] SET [aspnet_Sessions.Expires] = @Expires WHERE [aspnet_Sessions.SessionId] = @SessionId AND [aspnet_Sessions.ApplicationName] = @ApplicationName]]></xsl:variable>
									<usingStatement>
										<variable type="SqlText" name="cmd">
											<init>
												<methodInvokeExpression methodName="CreateSqlText">
													<parameters>
														<primitiveExpression value="{codeontime:NormalizeLineEndings($ResetItemTimeout)}"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variable>
										<statements>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="Expires"/>
													<methodInvokeExpression methodName="AddMinutes">
														<target>
															<propertyReferenceExpression name="Now">
																<typeReferenceExpression type="DateTime"/>
															</propertyReferenceExpression>
														</target>
														<parameters>
															<propertyReferenceExpression name="TotalMinutes">
																<propertyReferenceExpression name="Timeout">
																	<fieldReferenceExpression name="config"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="AddParameter">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
												<parameters>
													<primitiveExpression value="SessionId"/>
													<variableReferenceExpression name="id"/>
												</parameters>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="ExecuteNonQuery">
												<target>
													<variableReferenceExpression name="cmd"/>
												</target>
											</methodInvokeExpression>
										</statements>
									</usingStatement>
								</statements>
							</memberMethod>
							<!-- method InitializeRequest(HttpContext)-->
							<memberMethod name="InitializeRequest">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
								</parameters>
							</memberMethod>
							<!-- method EndRequest(HttpContext)-->
							<memberMethod name="EndRequest">
								<attributes public="true" override="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
								</parameters>
							</memberMethod>
						</members>
					</typeDeclaration>
				</xsl:if>
				<xsl:if test="$TargetFramework != '3.5' and not($ProjectId='Sharepoint Factory') and not($ProjectId='DotNetNuke Factory')">
					<!-- class PlaceholderHandler -->
					<typeDeclaration isPartial="true" name="PlaceholderHandler">
						<attributes public="true"/>
						<baseTypes>
							<typeReference type="PlaceholderHandlerBase"/>
						</baseTypes>
					</typeDeclaration>
					<!-- class PlaceholderHandlerBase -->
					<typeDeclaration name="PlaceholderHandlerBase">
						<baseTypes>
							<typeReference type="System.Object"/>
							<typeReference type="IHttpHandler" />
						</baseTypes>
						<members>
							<!-- property IsReusable -->
							<memberProperty type="System.Boolean" privateImplementationType="IHttpHandler" name="IsReusable">
								<attributes family="true"/>
								<getStatements>
									<methodReturnStatement>
										<primitiveExpression value="true"/>
									</methodReturnStatement>
								</getStatements>
							</memberProperty>
							<!-- field ImageSizeRegex -->
							<memberField type="Regex" name="ImageSizeRegex">
								<attributes private="true" static="true"/>
								<init>
									<objectCreateExpression type="Regex">
										<parameters>
											<primitiveExpression value="((?'background'[a-zA-Z0-9]+?)-((?'textcolor'[a-zA-Z0-9]+?)-)?)?(?'width'[0-9]+?)(x(?'height'[0-9]*))?\.[a-zA-Z][a-zA-Z][a-zA-Z]"/>
										</parameters>
									</objectCreateExpression>
								</init>
							</memberField>
							<!-- method ProcessRequest-->
							<memberMethod privateImplementationType="IHttpHandler" name="ProcessRequest">
								<attributes family="true"/>
								<parameters>
									<parameter type="HttpContext" name="context"/>
								</parameters>
								<statements>
									<comment>Get file name</comment>
									<variableDeclarationStatement type="RouteValueDictionary" name="routeValues">
										<init>
											<propertyReferenceExpression name="Values">
												<propertyReferenceExpression name="RouteData">
													<propertyReferenceExpression name="RequestContext">
														<propertyReferenceExpression name="Request">
															<argumentReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="System.String" name="fileName">
										<init>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<variableReferenceExpression name="routeValues"/>
													</target>
													<indices>
														<primitiveExpression value="FileName"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</init>
									</variableDeclarationStatement>
									<comment>Get extension</comment>
									<variableDeclarationStatement type="System.String" name="ext">
										<init>
											<methodInvokeExpression methodName="GetExtension">
												<target>
													<typeReferenceExpression type="Path"/>
												</target>
												<parameters>
													<variableReferenceExpression name="fileName"/>
												</parameters>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="ImageFormat" name="format">
										<init>
											<propertyReferenceExpression name="Png">
												<typeReferenceExpression type="ImageFormat"/>
											</propertyReferenceExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="System.String" name="contentType">
										<init>
											<primitiveExpression value="image/png"/>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="ValueEquality">
												<variableReferenceExpression name="ext"/>
												<primitiveExpression value=".jpg"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<variableReferenceExpression name="format"/>
												<propertyReferenceExpression name="Jpeg">
													<typeReferenceExpression type="ImageFormat"/>
												</propertyReferenceExpression>
											</assignStatement>
											<assignStatement>
												<variableReferenceExpression name="contentType"/>
												<primitiveExpression value="image/jpg"/>
											</assignStatement>
										</trueStatements>
										<falseStatements>
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="ValueEquality">
														<variableReferenceExpression name="ext"/>
														<primitiveExpression value=".gif"/>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<assignStatement>
														<variableReferenceExpression name="format"/>
														<propertyReferenceExpression name="Gif">
															<typeReferenceExpression type="ImageFormat"/>
														</propertyReferenceExpression>
													</assignStatement>
													<assignStatement>
														<variableReferenceExpression name="contentType"/>
														<primitiveExpression value="image/jpg"/>
													</assignStatement>
												</trueStatements>
											</conditionStatement>
										</falseStatements>
									</conditionStatement>
									<comment>get width and height</comment>
									<variableDeclarationStatement type="Match" name="regexMatch">
										<init>
											<arrayIndexerExpression>
												<target>
													<methodInvokeExpression methodName="Matches">
														<target>
															<fieldReferenceExpression name="ImageSizeRegex"/>
														</target>
														<parameters>
															<variableReferenceExpression name="fileName"/>
														</parameters>
													</methodInvokeExpression>
												</target>
												<indices>
													<primitiveExpression value="0"/>
												</indices>
											</arrayIndexerExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="Capture" name="widthCapture">
										<init>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Groups">
														<variableReferenceExpression name="regexMatch"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="width"/>
												</indices>
											</arrayIndexerExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="System.Int32" name="width">
										<init>
											<primitiveExpression value="500"/>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="ValueInequality">
												<propertyReferenceExpression name="Length">
													<variableReferenceExpression name="widthCapture"/>
												</propertyReferenceExpression>
												<primitiveExpression value="0"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<variableReferenceExpression name="width"/>
												<methodInvokeExpression methodName="ToInt32">
													<target>
														<typeReferenceExpression type="Convert"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="Value">
															<variableReferenceExpression name="widthCapture"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="ValueEquality">
												<variableReferenceExpression name="width"/>
												<primitiveExpression value="0"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<variableReferenceExpression name="width"/>
												<primitiveExpression value="500"/>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="GreaterThan">
												<variableReferenceExpression name="width"/>
												<primitiveExpression value="4096"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<variableReferenceExpression name="width"/>
												<primitiveExpression value="4096"/>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<variableDeclarationStatement type="Capture" name="heightCapture">
										<init>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Groups">
														<variableReferenceExpression name="regexMatch"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="height"/>
												</indices>
											</arrayIndexerExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="System.Int32" name="height">
										<init>
											<variableReferenceExpression name="width"/>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="ValueInequality">
												<propertyReferenceExpression name="Length">
													<variableReferenceExpression name="heightCapture"/>
												</propertyReferenceExpression>
												<primitiveExpression value="0"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<variableReferenceExpression name="height"/>
												<methodInvokeExpression methodName="ToInt32">
													<target>
														<typeReferenceExpression type="Convert"/>
													</target>
													<parameters>
														<propertyReferenceExpression name="Value">
															<variableReferenceExpression name="heightCapture"/>
														</propertyReferenceExpression>
													</parameters>
												</methodInvokeExpression>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="ValueEquality">
												<variableReferenceExpression name="height"/>
												<primitiveExpression value="0"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<variableReferenceExpression name="height"/>
												<primitiveExpression value="500"/>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="GreaterThan">
												<variableReferenceExpression name="height"/>
												<primitiveExpression value="4096"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<variableReferenceExpression name="height"/>
												<primitiveExpression value="4096"/>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<comment>Get background and text colors</comment>
									<variableDeclarationStatement type="Color" name="background">
										<init>
											<methodInvokeExpression methodName="GetColor">
												<parameters>
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Groups">
																<variableReferenceExpression name="regexMatch"/>
															</propertyReferenceExpression>
														</target>
														<indices>
															<primitiveExpression value="background"/>
														</indices>
													</arrayIndexerExpression>
													<propertyReferenceExpression name="LightGray">
														<typeReferenceExpression type="Color"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="Color" name="textColor">
										<init>
											<methodInvokeExpression methodName="GetColor">
												<parameters>
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Groups">
																<variableReferenceExpression name="regexMatch"/>
															</propertyReferenceExpression>
														</target>
														<indices>
															<primitiveExpression value="textcolor"/>
														</indices>
													</arrayIndexerExpression>
													<propertyReferenceExpression name="Black">
														<typeReferenceExpression type="Color"/>
													</propertyReferenceExpression>
												</parameters>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<variableDeclarationStatement type="System.Int32" name="fontSize">
										<init>
											<binaryOperatorExpression operator="Divide">
												<binaryOperatorExpression operator="Add">
													<variableReferenceExpression name="width"/>
													<variableReferenceExpression name="height"/>
												</binaryOperatorExpression>
												<primitiveExpression value="50"/>
											</binaryOperatorExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<binaryOperatorExpression operator="LessThan">
												<variableReferenceExpression name="fontSize"/>
												<primitiveExpression value="10"/>
											</binaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<variableReferenceExpression name="fontSize"/>
												<primitiveExpression value="10"/>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<variableDeclarationStatement type="Font" name="font">
										<init>
											<objectCreateExpression type="Font">
												<parameters>
													<propertyReferenceExpression name="GenericSansSerif">
														<typeReferenceExpression type="FontFamily"/>
													</propertyReferenceExpression>
													<variableReferenceExpression name="fontSize"/>
												</parameters>
											</objectCreateExpression>
										</init>
									</variableDeclarationStatement>
									<comment>Get text</comment>
									<variableDeclarationStatement type="System.String" name="text">
										<init>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="QueryString">
														<propertyReferenceExpression name="Request">
															<argumentReferenceExpression name="context"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="text"/>
												</indices>
											</arrayIndexerExpression>
										</init>
									</variableDeclarationStatement>
									<conditionStatement>
										<condition>
											<unaryOperatorExpression operator="IsNullOrEmpty">
												<variableReferenceExpression name="text"/>
											</unaryOperatorExpression>
										</condition>
										<trueStatements>
											<assignStatement>
												<variableReferenceExpression name="text"/>
												<methodInvokeExpression methodName="Format">
													<target>
														<typeReferenceExpression type="System.String"/>
													</target>
													<parameters>
														<primitiveExpression value="{{0}} x {{1}}"/>
														<variableReferenceExpression name="width"/>
														<variableReferenceExpression name="height"/>
													</parameters>
												</methodInvokeExpression>
											</assignStatement>
										</trueStatements>
									</conditionStatement>
									<comment>Get position for text</comment>
									<variableDeclarationStatement type="SizeF" name="textSize"/>
									<usingStatement>
										<variable type="Image" name="img">
											<init>
												<objectCreateExpression type="Bitmap">
													<parameters>
														<primitiveExpression value="1"/>
														<primitiveExpression value="1"/>
													</parameters>
												</objectCreateExpression>
											</init>
										</variable>
										<statements>
											<variableDeclarationStatement type="Graphics" name="textDrawing">
												<init>
													<methodInvokeExpression methodName="FromImage">
														<target>
															<typeReferenceExpression type="Graphics"/>
														</target>
														<parameters>
															<variableReferenceExpression name="img"/>
														</parameters>
													</methodInvokeExpression>
												</init>
											</variableDeclarationStatement>
											<assignStatement>
												<variableReferenceExpression name="textSize"/>
												<methodInvokeExpression methodName="MeasureString">
													<target>
														<variableReferenceExpression name="textDrawing"/>
													</target>
													<parameters>
														<variableReferenceExpression name="text"/>
														<variableReferenceExpression name="font"/>
													</parameters>
												</methodInvokeExpression>
											</assignStatement>
										</statements>
									</usingStatement>
									<comment>Draw the image</comment>
									<usingStatement>
										<variable type="Image" name="image">
											<init>
												<objectCreateExpression type="Bitmap">
													<parameters>
														<variableReferenceExpression name="width"/>
														<variableReferenceExpression name="height"/>
													</parameters>
												</objectCreateExpression>
											</init>
										</variable>
										<statements>
											<variableDeclarationStatement type="Graphics" name="drawing">
												<init>
													<methodInvokeExpression methodName="FromImage">
														<target>
															<typeReferenceExpression type="Graphics"/>
														</target>
														<parameters>
															<variableReferenceExpression name="image"/>
														</parameters>
													</methodInvokeExpression>
												</init>
											</variableDeclarationStatement>
											<methodInvokeExpression methodName="Clear">
												<target>
													<variableReferenceExpression name="drawing"/>
												</target>
												<parameters>
													<variableReferenceExpression name="background"/>
												</parameters>
											</methodInvokeExpression>
											<usingStatement>
												<variable type="Brush" name="textBrush">
													<init>
														<objectCreateExpression type="SolidBrush">
															<parameters>
																<variableReferenceExpression name="textColor"/>
															</parameters>
														</objectCreateExpression>
													</init>
												</variable>
												<statements>
													<methodInvokeExpression methodName="DrawString">
														<target>
															<variableReferenceExpression name="drawing"/>
														</target>
														<parameters>
															<variableReferenceExpression name="text"/>
															<variableReferenceExpression name="font"/>
															<variableReferenceExpression name="textBrush"/>
															<binaryOperatorExpression operator="Divide">
																<binaryOperatorExpression operator="Subtract">
																	<variableReferenceExpression name="width"/>
																	<propertyReferenceExpression name="Width">
																		<variableReferenceExpression name="textSize"/>
																	</propertyReferenceExpression>
																</binaryOperatorExpression>
																<primitiveExpression value="2"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="Divide">
																<binaryOperatorExpression operator="Subtract">
																	<variableReferenceExpression name="height"/>
																	<propertyReferenceExpression name="Height">
																		<variableReferenceExpression name="textSize"/>
																	</propertyReferenceExpression>
																</binaryOperatorExpression>
																<primitiveExpression value="2"/>
															</binaryOperatorExpression>
														</parameters>
													</methodInvokeExpression>
												</statements>
											</usingStatement>
											<methodInvokeExpression methodName="Save">
												<target>
													<variableReferenceExpression name="drawing"/>
												</target>
											</methodInvokeExpression>
											<methodInvokeExpression methodName="Dispose">
												<target>
													<variableReferenceExpression name="drawing"/>
												</target>
											</methodInvokeExpression>
											<comment>Return image</comment>
											<usingStatement>
												<variable type="MemoryStream" name="stream">
													<init>
														<objectCreateExpression type="MemoryStream"/>
													</init>
												</variable>
												<statements>
													<methodInvokeExpression methodName="Save">
														<target>
															<variableReferenceExpression name="image"/>
														</target>
														<parameters>
															<variableReferenceExpression name="stream"/>
															<variableReferenceExpression name="format"/>
														</parameters>
													</methodInvokeExpression>
													<variableDeclarationStatement type="HttpCachePolicy" name="cache">
														<init>
															<propertyReferenceExpression name="Cache">
																<propertyReferenceExpression name="Response">
																	<argumentReferenceExpression name="context"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</init>
													</variableDeclarationStatement>
													<methodInvokeExpression methodName="SetCacheability">
														<target>
															<variableReferenceExpression name="cache"/>
														</target>
														<parameters>
															<propertyReferenceExpression name="Public">
																<typeReferenceExpression type="HttpCacheability"/>
															</propertyReferenceExpression>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="SetOmitVaryStar">
														<target>
															<variableReferenceExpression name="cache"/>
														</target>
														<parameters>
															<primitiveExpression value="true"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="SetExpires">
														<target>
															<variableReferenceExpression name="cache"/>
														</target>
														<parameters>
															<methodInvokeExpression methodName="AddDays">
																<target>
																	<propertyReferenceExpression name="Now">
																		<typeReferenceExpression type="DateTime"/>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<primitiveExpression value="365"/>
																</parameters>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="SetValidUntilExpires">
														<target>
															<variableReferenceExpression name="cache"/>
														</target>
														<parameters>
															<primitiveExpression value="true"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="SetLastModifiedFromFileDependencies">
														<target>
															<variableReferenceExpression name="cache"/>
														</target>
													</methodInvokeExpression>
													<assignStatement>
														<propertyReferenceExpression name="ContentType">
															<propertyReferenceExpression name="Response">
																<argumentReferenceExpression name="context"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
														<variableReferenceExpression name="contentType"/>
													</assignStatement>
													<methodInvokeExpression methodName="AppendHeader">
														<target>
															<propertyReferenceExpression name="Response">
																<argumentReferenceExpression name="context"/>
															</propertyReferenceExpression>
														</target>
														<parameters>
															<primitiveExpression value="Content-Length"/>
															<methodInvokeExpression methodName="ToString">
																<target>
																	<typeReferenceExpression type="Convert"/>
																</target>
																<parameters>
																	<propertyReferenceExpression name="Length">
																		<variableReferenceExpression name="stream"/>
																	</propertyReferenceExpression>
																</parameters>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="AppendHeader">
														<target>
															<propertyReferenceExpression name="Response">
																<argumentReferenceExpression name="context"/>
															</propertyReferenceExpression>
														</target>
														<parameters>
															<primitiveExpression value="File-Name"/>
															<variableReferenceExpression name="fileName"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="BinaryWrite">
														<target>
															<propertyReferenceExpression name="Response">
																<argumentReferenceExpression name="context"/>
															</propertyReferenceExpression>
														</target>
														<parameters>
															<methodInvokeExpression methodName="ToArray">
																<target>
																	<variableReferenceExpression name="stream"/>
																</target>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="Flush">
														<target>
															<propertyReferenceExpression name="OutputStream">
																<propertyReferenceExpression name="Response">
																	<argumentReferenceExpression name="context"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</target>
													</methodInvokeExpression>
												</statements>
											</usingStatement>
										</statements>
									</usingStatement>
								</statements>
							</memberMethod>
							<!-- method GetColor -->
							<memberMethod returnType="Color" name="GetColor">
								<attributes private="true" static="true"/>
								<parameters>
									<parameter type="Capture" name="colorName"/>
									<parameter type="Color" name="defaultColor"/>
								</parameters>
								<statements>
									<tryStatement>
										<statements>
											<conditionStatement>
												<condition>
													<binaryOperatorExpression operator="GreaterThan">
														<propertyReferenceExpression name="Length">
															<argumentReferenceExpression name="colorName"/>
														</propertyReferenceExpression>
														<primitiveExpression value="0"/>
													</binaryOperatorExpression>
												</condition>
												<trueStatements>
													<variableDeclarationStatement type="System.String" name="s">
														<init>
															<propertyReferenceExpression name="Value">
																<argumentReferenceExpression name="colorName"/>
															</propertyReferenceExpression>
														</init>
													</variableDeclarationStatement>
													<conditionStatement>
														<condition>
															<methodInvokeExpression methodName="IsMatch">
																<target>
																	<typeReferenceExpression type="Regex"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="s"/>
																	<primitiveExpression value="^[0-9abcdef]{{3,6}}$"/>
																</parameters>
															</methodInvokeExpression>
														</condition>
														<trueStatements>
															<assignStatement>
																<variableReferenceExpression name="s"/>
																<binaryOperatorExpression operator="Add">
																	<primitiveExpression value="#"/>
																	<variableReferenceExpression name="s"/>
																</binaryOperatorExpression>
															</assignStatement>
														</trueStatements>
													</conditionStatement>

													<methodReturnStatement>
														<methodInvokeExpression methodName="FromHtml">
															<target>
																<typeReferenceExpression type="ColorTranslator"/>
															</target>
															<parameters>
																<variableReferenceExpression name="s"/>
															</parameters>
														</methodInvokeExpression>
													</methodReturnStatement>
												</trueStatements>
											</conditionStatement>
										</statements>
										<catch exceptionType="Exception"></catch>
									</tryStatement>
									<methodReturnStatement>
										<argumentReferenceExpression name="defaultColor"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
						</members>
					</typeDeclaration>
					<!-- class GenericRoute -->
					<typeDeclaration name="GenericRoute">
						<baseTypes>
							<typeReference type="System.Object"/>
							<typeReference type="IRouteHandler"/>
						</baseTypes>
						<members>
							<memberField type="IHttpHandler" name="handler"/>
							<!-- constructor -->
							<constructor>
								<attributes public="true"/>
								<parameters>
									<parameter type="IHttpHandler" name="handler"/>
								</parameters>
								<statements>
									<assignStatement>
										<fieldReferenceExpression name="handler"/>
										<argumentReferenceExpression name="handler"/>
									</assignStatement>
								</statements>
							</constructor>
							<!-- method IRouteHandler.GetHttpHandler(RequestContext) -->
							<memberMethod returnType="IHttpHandler" name="GetHttpHandler" privateImplementationType="IRouteHandler">
								<attributes public="true" final="true"/>
								<parameters>
									<parameter type="RequestContext" name="context"/>
								</parameters>
								<statements>
									<methodReturnStatement>
										<fieldReferenceExpression name="handler"/>
									</methodReturnStatement>
								</statements>
							</memberMethod>
							<!-- method Map(RouteCollection, IHttpHandler, string) -->
							<memberMethod name="Map">
								<attributes public="true" static="true"/>
								<parameters>
									<parameter type="RouteCollection" name="routes"/>
									<parameter type="IHttpHandler" name="handler"/>
									<parameter type="System.String" name="url"/>
								</parameters>
								<statements>
									<variableDeclarationStatement type="Route" name="r">
										<init>
											<objectCreateExpression type="Route">
												<parameters>
													<argumentReferenceExpression name="url"/>
													<objectCreateExpression type="GenericRoute">
														<parameters>
															<argumentReferenceExpression name="handler"/>
														</parameters>
													</objectCreateExpression>
												</parameters>
											</objectCreateExpression>
										</init>
									</variableDeclarationStatement>
									<assignStatement>
										<propertyReferenceExpression name="Defaults">
											<variableReferenceExpression name="r"/>
										</propertyReferenceExpression>
										<objectCreateExpression type="RouteValueDictionary"/>
									</assignStatement>
									<assignStatement>
										<propertyReferenceExpression name="Constraints">
											<variableReferenceExpression name="r"/>
										</propertyReferenceExpression>
										<objectCreateExpression type="RouteValueDictionary"/>
									</assignStatement>
									<methodInvokeExpression methodName="Add">
										<target>
											<argumentReferenceExpression name="routes"/>
										</target>
										<parameters>
											<variableReferenceExpression name="r"/>
										</parameters>
									</methodInvokeExpression>
								</statements>
							</memberMethod>
						</members>
					</typeDeclaration>
				</xsl:if>
				<!-- class ManifestFile-->
				<typeDeclaration name="ManifestFile">
					<attributes public="true"/>
					<members>
						<!-- properties-->
						<memberProperty type="System.String" name="Name">
							<attributes public="true" final="true"/>
						</memberProperty>
						<memberProperty type="System.String" name="Path">
							<attributes public="true" final="true"/>
						</memberProperty>
						<memberProperty type="System.String" name="MD5">
							<attributes public="true" final="true"/>
						</memberProperty>
						<memberProperty type="System.Int32" name="Length">
							<attributes public="true" final="true"/>
						</memberProperty>
						<!-- method FromPath(string)-->
						<memberMethod returnType="ManifestFile" name="FromPath">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="relativePath"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="ManifestFile" name="f">
									<init>
										<objectCreateExpression type="ManifestFile"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="Contains">
											<target>
												<variableReferenceExpression name="relativePath"/>
											</target>
											<parameters>
												<primitiveExpression value="?"/>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="relativePath"/>
											<methodInvokeExpression methodName="Substring">
												<target>
													<variableReferenceExpression name="relativePath"/>
												</target>
												<parameters>
													<primitiveExpression value="0"/>
													<methodInvokeExpression methodName="IndexOf">
														<target>
															<variableReferenceExpression name="relativePath"/>
														</target>
														<parameters>
															<primitiveExpression value="?"/>
														</parameters>
													</methodInvokeExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<propertyReferenceExpression name="Path">
										<variableReferenceExpression name="f"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="Replace">
										<target>
											<methodInvokeExpression methodName="Replace">
												<target>
													<variableReferenceExpression name="relativePath"/>
												</target>
												<parameters>
													<primitiveExpression value="\" convertTo="Char"/>
													<primitiveExpression value="/" convertTo="Char"/>
												</parameters>
											</methodInvokeExpression>
										</target>
										<parameters>
											<primitiveExpression value="~/"/>
											<stringEmptyExpression/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="f"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="GetFileName">
										<target>
											<typeReferenceExpression type="System.IO.Path"/>
										</target>
										<parameters>
											<propertyReferenceExpression name="Path">
												<variableReferenceExpression name="f"/>
											</propertyReferenceExpression>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<variableDeclarationStatement type="System.Byte[]" name="fileBytes">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<propertyReferenceExpression name="Path">
												<variableReferenceExpression name="f"/>
											</propertyReferenceExpression>
											<primitiveExpression value="js/daf/add.min.js"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="fileBytes"/>
											<methodInvokeExpression methodName="GetBytes">
												<target>
													<propertyReferenceExpression name="UTF8">
														<typeReferenceExpression type="Encoding"/>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<methodInvokeExpression methodName="AddScripts">
														<target>
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="ApplicationServices"/>
															</propertyReferenceExpression>
														</target>
													</methodInvokeExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
									<falseStatements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="ValueEquality">
													<propertyReferenceExpression name="Path">
														<variableReferenceExpression name="f"/>
													</propertyReferenceExpression>
													<primitiveExpression value="css/daf/add.min.css"/>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="fileBytes"/>
													<methodInvokeExpression methodName="GetBytes">
														<target>
															<propertyReferenceExpression name="UTF8">
																<typeReferenceExpression type="Encoding"/>
															</propertyReferenceExpression>
														</target>
														<parameters>
															<methodInvokeExpression methodName="AddStyleSheets">
																<target>
																	<propertyReferenceExpression name="Current">
																		<typeReferenceExpression type="ApplicationServices"/>
																	</propertyReferenceExpression>
																</target>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<variableReferenceExpression name="fileBytes"/>
													<methodInvokeExpression methodName="ReadAllBytes">
														<target>
															<typeReferenceExpression type="File"/>
														</target>
														<parameters>
															<methodInvokeExpression methodName="MapPath">
																<target>
																	<propertyReferenceExpression name="Server">
																		<propertyReferenceExpression name="Current">
																			<typeReferenceExpression type="HttpContext"/>
																		</propertyReferenceExpression>
																	</propertyReferenceExpression>
																</target>
																<parameters>
																	<binaryOperatorExpression operator="Add">
																		<primitiveExpression value="~/"/>
																		<propertyReferenceExpression name="Path">
																			<variableReferenceExpression name="f"/>
																		</propertyReferenceExpression>
																	</binaryOperatorExpression>
																</parameters>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</falseStatements>
										</conditionStatement>
									</falseStatements>
								</conditionStatement>
								<assignStatement>
									<propertyReferenceExpression name="MD5">
										<variableReferenceExpression name="f"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="ComputeHash">
										<parameters>
											<variableReferenceExpression name="fileBytes"/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Length">
										<variableReferenceExpression name="f"/>
									</propertyReferenceExpression>
									<propertyReferenceExpression name="Length">
										<variableReferenceExpression name="fileBytes"/>
									</propertyReferenceExpression>
								</assignStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="f"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method FromResource(string)-->
						<memberMethod returnType="ManifestFile" name="FromResource">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="resourceName"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="ManifestFile" name="file">
									<init>
										<objectCreateExpression type="ManifestFile"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="file"/>
									</propertyReferenceExpression>
									<argumentReferenceExpression name="resourceName"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Path">
										<variableReferenceExpression name="file"/>
									</propertyReferenceExpression>
									<binaryOperatorExpression operator="Add">
										<primitiveExpression value="_resources/"/>
										<argumentReferenceExpression name="resourceName"/>
									</binaryOperatorExpression>
								</assignStatement>
								<usingStatement>
									<variable type="Stream" name="s">
										<init>
											<methodInvokeExpression methodName="GetResourceStream">
												<target>
													<typeReferenceExpression type="ControllerConfigurationUtility"/>
												</target>
												<parameters>
													<argumentReferenceExpression name="resourceName"/>
												</parameters>
											</methodInvokeExpression>
										</init>
									</variable>
									<statements>
										<usingStatement>
											<variable type="MemoryStream" name="ms">
												<init>
													<objectCreateExpression type="MemoryStream"/>
												</init>
											</variable>
											<statements>
												<methodInvokeExpression methodName="CopyTo">
													<target>
														<variableReferenceExpression name="s"/>
													</target>
													<parameters>
														<variableReferenceExpression name="ms"/>
													</parameters>
												</methodInvokeExpression>
												<assignStatement>
													<propertyReferenceExpression name="MD5">
														<variableReferenceExpression name="file"/>
													</propertyReferenceExpression>
													<methodInvokeExpression methodName="ComputeHash">
														<parameters>
															<methodInvokeExpression methodName="ToArray">
																<target>
																	<variableReferenceExpression name="ms"/>
																</target>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<assignStatement>
													<propertyReferenceExpression name="Length">
														<variableReferenceExpression name="file"/>
													</propertyReferenceExpression>
													<convertExpression to="Int32">
														<propertyReferenceExpression name="Length">
															<variableReferenceExpression name="ms"/>
														</propertyReferenceExpression>
													</convertExpression>
												</assignStatement>
											</statements>
										</usingStatement>
									</statements>
								</usingStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="file"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method FromUrl(string)-->
						<memberMethod returnType="ManifestFile" name="FromUrl">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="url"/>
							</parameters>
							<statements>
								<assignStatement>
									<variableReferenceExpression name="url"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<methodInvokeExpression methodName="Replace">
												<target>
													<variableReferenceExpression name="url"/>
												</target>
												<parameters>
													<primitiveExpression value="\" convertTo="Char"/>
													<primitiveExpression value="/" convertTo="Char"/>
												</parameters>
											</methodInvokeExpression>
										</target>
										<parameters>
											<primitiveExpression value="~/"/>
											<stringEmptyExpression/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<variableDeclarationStatement type="ManifestFile" name="file">
									<init>
										<objectCreateExpression type="ManifestFile"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="Path">
										<variableReferenceExpression name="file"/>
									</propertyReferenceExpression>
									<variableReferenceExpression name="url"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="file"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="GetFileName">
										<target>
											<typeReferenceExpression type="System.IO.Path"/>
										</target>
										<parameters>
											<argumentReferenceExpression name="url"/>
											<!--<propertyReferenceExpression name="Path">
												<variableReferenceExpression name="file"/>
											</propertyReferenceExpression>-->
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<usingStatement>
									<variable type="StringWriter" name="sw">
										<init>
											<objectCreateExpression type="StringWriter"/>
										</init>
									</variable>
									<statements>
										<variableDeclarationStatement type="System.String" name="handlerUrl">
											<init>
												<binaryOperatorExpression operator="Add">
													<primitiveExpression value="/"/>
													<methodInvokeExpression methodName="Replace">
														<target>
															<methodInvokeExpression methodName="Replace">
																<target>
																	<variableReferenceExpression name="url"/>
																</target>
																<parameters>
																	<primitiveExpression value=".html"/>
																	<stringEmptyExpression/>
																</parameters>
															</methodInvokeExpression>
														</target>
														<parameters>
															<primitiveExpression value=".htm"/>
															<stringEmptyExpression/>
														</parameters>
													</methodInvokeExpression>
												</binaryOperatorExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.String" name="page">
											<init>
												<methodInvokeExpression methodName="GetContent">
													<parameters>
														<variableReferenceExpression name="handlerUrl"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<foreachStatement>
											<variable name="addon"/>
											<target>
												<propertyReferenceExpression name="Addons">
													<typeReferenceExpression type="ApplicationServicesBase"/>
												</propertyReferenceExpression>
											</target>
											<statements>
												<assignStatement>
													<variableReferenceExpression name="page"/>
													<castExpression targetType="System.String">
														<methodInvokeExpression methodName="Invoke">
															<target>
																<methodInvokeExpression methodName="GetMethod">
																	<target>
																		<methodInvokeExpression methodName="GetType">
																			<target>
																				<variableReferenceExpression name="addon"/>
																			</target>
																		</methodInvokeExpression>
																	</target>
																	<parameters>
																		<primitiveExpression value="Content"/>
																	</parameters>
																</methodInvokeExpression>
															</target>
															<parameters>
																<variableReferenceExpression name="addon"/>
																<arrayCreateExpression>
																	<createType type="System.Object"/>
																	<initializers>
																		<variableReferenceExpression name="handlerUrl"/>
																		<variableReferenceExpression name="page"/>
																	</initializers>
																</arrayCreateExpression>
															</parameters>
														</methodInvokeExpression>
													</castExpression>
												</assignStatement>
											</statements>
										</foreachStatement>
										<variableDeclarationStatement type="System.Byte[]" name="bytes">
											<init>
												<methodInvokeExpression methodName="GetBytes">
													<target>
														<propertyReferenceExpression name="UTF8">
															<typeReferenceExpression type="Encoding"/>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<variableReferenceExpression name="page"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<assignStatement>
											<propertyReferenceExpression name="MD5">
												<variableReferenceExpression name="file"/>
											</propertyReferenceExpression>
											<methodInvokeExpression methodName="ComputeHash">
												<parameters>
													<variableReferenceExpression name="bytes"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<assignStatement>
											<propertyReferenceExpression name="Length">
												<variableReferenceExpression name="file"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="Length">
												<variableReferenceExpression name="bytes"/>
											</propertyReferenceExpression>
										</assignStatement>
									</statements>
								</usingStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="file"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method GetConfig(string)-->
						<memberMethod returnType="ManifestFile" name="GetConfig">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="config"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.Byte[]" name="configBytes">
									<init>
										<methodInvokeExpression methodName="GetBytes">
											<target>
												<propertyReferenceExpression name="UTF8">
													<typeReferenceExpression type="Encoding"/>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<variableReferenceExpression name="config"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="ManifestFile" name="configFile">
									<init>
										<objectCreateExpression type="ManifestFile"/>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="Path">
										<variableReferenceExpression name="configFile"/>
									</propertyReferenceExpression>
									<primitiveExpression value="js/host/config.js"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Name">
										<variableReferenceExpression name="configFile"/>
									</propertyReferenceExpression>
									<primitiveExpression value="config.js"/>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="Length">
										<variableReferenceExpression name="configFile"/>
									</propertyReferenceExpression>
									<propertyReferenceExpression name="Length">
										<variableReferenceExpression name="configBytes"/>
									</propertyReferenceExpression>
								</assignStatement>
								<assignStatement>
									<propertyReferenceExpression name="MD5">
										<variableReferenceExpression name="configFile"/>
									</propertyReferenceExpression>
									<methodInvokeExpression methodName="ComputeHash">
										<parameters>
											<variableReferenceExpression name="configBytes"/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="configFile"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ComputeHash(byte[])-->
						<memberMethod returnType="System.String" name="ComputeHash">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.Byte[]" name="data"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="MD5" name="prov">
									<init>
										<objectCreateExpression type="MD5CryptoServiceProvider"/>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.Byte[]" name="hashData">
									<init>
										<methodInvokeExpression methodName="ComputeHash">
											<target>
												<variableReferenceExpression name="prov"/>
											</target>
											<parameters>
												<variableReferenceExpression name="data"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="StringBuilder" name="sb">
									<init>
										<objectCreateExpression type="StringBuilder"/>
									</init>
								</variableDeclarationStatement>
								<forStatement>
									<variable type="System.Int32" name="i">
										<init>
											<primitiveExpression value="0"/>
										</init>
									</variable>
									<test>
										<binaryOperatorExpression operator="LessThan">
											<variableReferenceExpression name="i"/>
											<propertyReferenceExpression name="Length">
												<variableReferenceExpression name="hashData"/>
											</propertyReferenceExpression>
										</binaryOperatorExpression>
									</test>
									<increment>
										<variableReferenceExpression name="i"/>
									</increment>
									<statements>
										<methodInvokeExpression methodName="Append">
											<target>
												<variableReferenceExpression name="sb"/>
											</target>
											<parameters>
												<methodInvokeExpression methodName="ToString">
													<target>
														<arrayIndexerExpression>
															<target>
																<variableReferenceExpression name="hashData"/>
															</target>
															<indices>
																<variableReferenceExpression name="i"/>
															</indices>
														</arrayIndexerExpression>
													</target>
													<parameters>
														<primitiveExpression value="x2"/>
													</parameters>
												</methodInvokeExpression>
											</parameters>
										</methodInvokeExpression>
									</statements>
								</forStatement>
								<methodReturnStatement>
									<methodInvokeExpression methodName="ToString">
										<target>
											<variableReferenceExpression name="sb"/>
										</target>
									</methodInvokeExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method GetContent()-->
						<memberMethod returnType="System.String" name="GetContent">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="url"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="HttpRequest" name="original">
									<init>
										<propertyReferenceExpression name="Request">
											<propertyReferenceExpression name="Current">
												<typeReferenceExpression type="HttpContext"/>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="homePage">
									<init>
										<methodInvokeExpression methodName="ResolveClientUrl">
											<target>
												<typeReferenceExpression type="ApplicationServices"/>
											</target>
											<parameters>
												<argumentReferenceExpression name="url"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="HttpWebRequest" name="request">
									<init>
										<methodInvokeExpression methodName="CreateHttp">
											<target>
												<typeReferenceExpression type="WebRequest"/>
											</target>
											<parameters>
												<variableReferenceExpression name="homePage"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<assignStatement>
									<propertyReferenceExpression name="AutomaticDecompression">
										<variableReferenceExpression name="request"/>
									</propertyReferenceExpression>
									<binaryOperatorExpression operator="BitwiseOr">
										<propertyReferenceExpression name="Deflate">
											<typeReferenceExpression type="DecompressionMethods"/>
										</propertyReferenceExpression>
										<propertyReferenceExpression name="GZip">
											<typeReferenceExpression type="DecompressionMethods"/>
										</propertyReferenceExpression>
									</binaryOperatorExpression>
								</assignStatement>
								<foreachStatement>
									<variable type="System.String" name="header" var="false"/>
									<target>
										<propertyReferenceExpression name="Headers">
											<variableReferenceExpression name="original"/>
										</propertyReferenceExpression>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<unaryOperatorExpression operator="Not">
														<methodInvokeExpression methodName="IsRestricted">
															<target>
																<typeReferenceExpression type="WebHeaderCollection"/>
															</target>
															<parameters>
																<variableReferenceExpression name="header"/>
															</parameters>
														</methodInvokeExpression>
													</unaryOperatorExpression>
													<binaryOperatorExpression operator="ValueInequality">
														<variableReferenceExpression name="header"/>
														<primitiveExpression value="Cookie"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Headers">
																<variableReferenceExpression name="request"/>
															</propertyReferenceExpression>
														</target>
														<indices>
															<variableReferenceExpression name="header"/>
														</indices>
													</arrayIndexerExpression>
													<arrayIndexerExpression>
														<target>
															<propertyReferenceExpression name="Headers">
																<variableReferenceExpression name="original"/>
															</propertyReferenceExpression>
														</target>
														<indices>
															<variableReferenceExpression name="header"/>
														</indices>
													</arrayIndexerExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="Headers">
												<variableReferenceExpression name="request"/>
											</propertyReferenceExpression>
										</target>
										<indices>
											<primitiveExpression value="X-Cot-Manifest-Request"/>
										</indices>
									</arrayIndexerExpression>
									<primitiveExpression value="true" convertTo="String"/>
								</assignStatement>
								<variableDeclarationStatement name="args">
									<init>
										<arrayIndexerExpression>
											<target>
												<propertyReferenceExpression name="Items">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<indices>
												<primitiveExpression value="ServiceRequestHandler_args"/>
											</indices>
										</arrayIndexerExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="IdentityInequality">
											<variableReferenceExpression name="args"/>
											<primitiveExpression value="null"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Headers">
														<variableReferenceExpression name="request"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="X-Device-Id"/>
												</indices>
											</arrayIndexerExpression>
											<castExpression targetType="System.String">
												<arrayIndexerExpression>
													<target>
														<castExpression targetType="JObject">
															<variableReferenceExpression name="args"/>
														</castExpression>
													</target>
													<indices>
														<primitiveExpression value="deviceId"/>
													</indices>
												</arrayIndexerExpression>
											</castExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<usingStatement>
									<variable type="StreamReader" name="sr">
										<init>
											<objectCreateExpression type="StreamReader">
												<parameters>
													<methodInvokeExpression methodName="GetResponseStream">
														<target>
															<methodInvokeExpression methodName="GetResponse">
																<target>
																	<variableReferenceExpression name="request"/>
																</target>
															</methodInvokeExpression>
														</target>
													</methodInvokeExpression>
												</parameters>
											</objectCreateExpression>
										</init>
									</variable>
									<statements>
										<methodReturnStatement>
											<methodInvokeExpression methodName="ReadToEnd">
												<target>
													<variableReferenceExpression name="sr"/>
												</target>
											</methodInvokeExpression>
										</methodReturnStatement>
									</statements>
								</usingStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
				<!-- class StylesheetGenerator-->
				<typeDeclaration name="StylesheetGenerator">
					<attributes public="true"/>
					<members>
						<!-- field _template-->
						<memberField type="System.String" name="template"/>
						<!-- field _theme-->
						<memberField type="JObject" name="theme"/>
						<!-- field _accent-->
						<memberField type="JObject" name="accent"/>
						<!-- field ThemeVariables-->
						<memberField type="SortedDictionary" name="themeVariables">
							<typeArguments>
								<typeReference type="System.String"/>
								<typeReference type="System.String"/>
							</typeArguments>
							<attributes private="true"/>
							<init>
								<objectCreateExpression type="SortedDictionary">
									<typeArguments>
										<typeReference type="System.String"/>
										<typeReference type="System.String"/>
									</typeArguments>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- field ThemeStylesheetRegex-->
						<memberField type="Regex" name="ThemeStylesheetRegex">
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[^touch-theme\.(?'Theme'\w+)\.((?'Accent'\w+)\.)?css$]]></xsl:attribute>
										</primitiveExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- field ThemeVariableRegex-->
						<memberField type="Regex" name="ThemeVariableRegex">
							<attributes public="true" static="true"/>
							<init>
								<objectCreateExpression type="Regex">
									<parameters>
										<primitiveExpression>
											<xsl:attribute name="value"><![CDATA[(?'Item'(?'Before'\w+:\s*)\/\*\s*(?'Name'(@[\w\.]+(,\s*)?)+)\s*\*\/(?'Value'.+?))(?'After'(!important)?;\s*)$]]></xsl:attribute>
										</primitiveExpression>
										<propertyReferenceExpression name="Multiline">
											<typeReferenceExpression type="RegexOptions"/>
										</propertyReferenceExpression>
									</parameters>
								</objectCreateExpression>
							</init>
						</memberField>
						<!-- field dependencies -->
						<memberField type="System.String[]" name="dependencies"/>
						<!-- constructor StylesheetGenerator(string,string)-->
						<constructor>
							<attributes public="true"/>
							<parameters>
								<parameter type="System.String" name="theme"/>
								<parameter type="System.String" name="accent"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="touchPath">
									<init>
										<methodInvokeExpression methodName="MapPath">
											<target>
												<propertyReferenceExpression name="Server">
													<propertyReferenceExpression name="Current">
														<typeReferenceExpression type="HttpContext"/>
													</propertyReferenceExpression>
												</propertyReferenceExpression>
											</target>
											<parameters>
												<primitiveExpression value="~/css"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="css">
									<init>
										<methodInvokeExpression methodName="Combine">
											<target>
												<typeReferenceExpression type="Path"/>
											</target>
											<parameters>
												<variableReferenceExpression name="touchPath"/>
												<primitiveExpression value="daf"/>
												<primitiveExpression value="touch-theme.css"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<methodInvokeExpression methodName="Exists">
											<target>
												<typeReferenceExpression type="File"/>
											</target>
											<parameters>
												<variableReferenceExpression name="css"/>
											</parameters>
										</methodInvokeExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<fieldReferenceExpression name="template"/>
											<methodInvokeExpression methodName="ReadAllText">
												<target>
													<typeReferenceExpression type="File"/>
												</target>
												<parameters>
													<variableReferenceExpression name="css"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
										<variableDeclarationStatement type="System.String" name="themeFile">
											<init>
												<methodInvokeExpression methodName="Combine">
													<target>
														<typeReferenceExpression type="Path"/>
													</target>
													<parameters>
														<variableReferenceExpression name="touchPath"/>
														<primitiveExpression value="themes"/>
														<binaryOperatorExpression operator="Add">
															<primitiveExpression value="touch-theme."/>
															<binaryOperatorExpression operator="Add">
																<variableReferenceExpression name="theme"/>
																<primitiveExpression value=".json"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<variableDeclarationStatement type="System.String" name="accentFile">
											<init>
												<methodInvokeExpression methodName="Combine">
													<target>
														<typeReferenceExpression type="Path"/>
													</target>
													<parameters>
														<variableReferenceExpression name="touchPath"/>
														<primitiveExpression value="themes"/>
														<binaryOperatorExpression operator="Add">
															<primitiveExpression value="touch-accent."/>
															<binaryOperatorExpression operator="Add">
																<variableReferenceExpression name="accent"/>
																<primitiveExpression value=".json"/>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<methodInvokeExpression methodName="Exists">
														<target>
															<typeReferenceExpression type="File"/>
														</target>
														<parameters>
															<variableReferenceExpression name="themeFile"/>
														</parameters>
													</methodInvokeExpression>
													<methodInvokeExpression methodName="Exists">
														<target>
															<typeReferenceExpression type="File"/>
														</target>
														<parameters>
															<variableReferenceExpression name="accentFile"/>
														</parameters>
													</methodInvokeExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<fieldReferenceExpression name="accent"/>
													<methodInvokeExpression methodName="Parse">
														<target>
															<typeReferenceExpression type="JObject"/>
														</target>
														<parameters>
															<methodInvokeExpression methodName="ReadAllText">
																<target>
																	<typeReferenceExpression type="File"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="accentFile"/>
																</parameters>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<assignStatement>
													<fieldReferenceExpression name="theme"/>
													<methodInvokeExpression methodName="Parse">
														<target>
															<typeReferenceExpression type="JObject"/>
														</target>
														<parameters>
															<methodInvokeExpression methodName="ReadAllText">
																<target>
																	<typeReferenceExpression type="File"/>
																</target>
																<parameters>
																	<variableReferenceExpression name="themeFile"/>
																</parameters>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<fieldReferenceExpression name="dependencies"/>
											<arrayCreateExpression >
												<createType type="System.String"/>
												<initializers>
													<variableReferenceExpression name="css"/>
													<variableReferenceExpression name="themeFile"/>
													<variableReferenceExpression name="accentFile"/>
													<methodInvokeExpression methodName="MapPath">
														<target>
															<propertyReferenceExpression name="Server">
																<propertyReferenceExpression name="Current">
																	<typeReferenceExpression type="HttpContext"/>
																</propertyReferenceExpression>
															</propertyReferenceExpression>
														</target>
														<parameters>
															<primitiveExpression value="~/touch-settings.json"/>
														</parameters>
													</methodInvokeExpression>
												</initializers>
											</arrayCreateExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
							</statements>
						</constructor>
						<!-- method Compile(string)-->
						<memberMethod returnType="System.String" name="Compile">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="fileName"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="outputKey">
									<init>
										<propertyReferenceExpression name="RawUrl">
											<propertyReferenceExpression name="Request">
												<propertyReferenceExpression name="Current">
													<typeReferenceExpression type="HttpContext"/>
												</propertyReferenceExpression>
											</propertyReferenceExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="output">
									<init>
										<castExpression targetType="System.String">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Cache">
														<propertyReferenceExpression name="Current">
															<typeReferenceExpression type="HttpContext"/>
														</propertyReferenceExpression>
													</propertyReferenceExpression>
												</target>
												<indices>
													<argumentReferenceExpression name="outputKey"/>
												</indices>
											</arrayIndexerExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<variableReferenceExpression name="output"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="Match" name="m">
											<init>
												<methodInvokeExpression methodName="Match">
													<target>
														<propertyReferenceExpression name="ThemeStylesheetRegex"/>
													</target>
													<parameters>
														<variableReferenceExpression name="fileName"/>
													</parameters>
												</methodInvokeExpression>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<propertyReferenceExpression name="Success">
													<variableReferenceExpression name="m"/>
												</propertyReferenceExpression>
											</condition>
											<trueStatements>
												<variableDeclarationStatement name="generator">
													<init>
														<objectCreateExpression type="StylesheetGenerator">
															<parameters>
																<propertyReferenceExpression name="Value">
																	<arrayIndexerExpression>
																		<target>
																			<propertyReferenceExpression name="Groups">
																				<variableReferenceExpression name="m"/>
																			</propertyReferenceExpression>
																		</target>
																		<indices>
																			<primitiveExpression value="Theme"/>
																		</indices>
																	</arrayIndexerExpression>
																</propertyReferenceExpression>
																<propertyReferenceExpression name="Value">
																	<arrayIndexerExpression>
																		<target>
																			<propertyReferenceExpression name="Groups">
																				<variableReferenceExpression name="m"/>
																			</propertyReferenceExpression>
																		</target>
																		<indices>
																			<primitiveExpression value="Accent"/>
																		</indices>
																	</arrayIndexerExpression>
																</propertyReferenceExpression>
															</parameters>
														</objectCreateExpression>
													</init>
												</variableDeclarationStatement>
												<assignStatement>
													<variableReferenceExpression name="output"/>
													<methodInvokeExpression methodName="ToString">
														<target>
															<variableReferenceExpression name="generator"/>
														</target>
													</methodInvokeExpression>
												</assignStatement>
												<methodInvokeExpression methodName="Add">
													<target>
														<propertyReferenceExpression name="Cache">
															<propertyReferenceExpression name="Current">
																<typeReferenceExpression type="HttpContext"/>
															</propertyReferenceExpression>
														</propertyReferenceExpression>
													</target>
													<parameters>
														<argumentReferenceExpression name="outputKey"/>
														<variableReferenceExpression name="output"/>
														<objectCreateExpression type="CacheDependency">
															<parameters>
																<fieldReferenceExpression name="dependencies">
																	<variableReferenceExpression name="generator"/>
																</fieldReferenceExpression>
															</parameters>
														</objectCreateExpression>
														<propertyReferenceExpression name="NoAbsoluteExpiration">
															<typeReferenceExpression type="Cache"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="NoSlidingExpiration">
															<typeReferenceExpression type="Cache"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="Normal">
															<typeReferenceExpression type="CacheItemPriority"/>
														</propertyReferenceExpression>
														<primitiveExpression value="null"/>
													</parameters>
												</methodInvokeExpression>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<variableReferenceExpression name="output"/>
													<stringEmptyExpression/>
												</assignStatement>
											</falseStatements>
										</conditionStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="output"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method Minify(string)-->
						<memberMethod returnType="System.String" name="Minify">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="css"/>
							</parameters>
							<statements>
								<assignStatement>
									<variableReferenceExpression name="css"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<typeReferenceExpression type="Regex"/>
										</target>
										<parameters>
											<variableReferenceExpression name="css"/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[[a-zA-Z]+#]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression value="#"/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<assignStatement>
									<variableReferenceExpression name="css"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<typeReferenceExpression type="Regex"/>
										</target>
										<parameters>
											<variableReferenceExpression name="css"/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[[\n\r]+\s*]]></xsl:attribute>
											</primitiveExpression>
											<stringEmptyExpression/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<assignStatement>
									<variableReferenceExpression name="css"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<typeReferenceExpression type="Regex"/>
										</target>
										<parameters>
											<variableReferenceExpression name="css"/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[\s\s+]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression value=" "/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<assignStatement>
									<variableReferenceExpression name="css"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<typeReferenceExpression type="Regex"/>
										</target>
										<parameters>
											<variableReferenceExpression name="css"/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[\s?([:,;{}])\s?]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression value="$1"/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<assignStatement>
									<variableReferenceExpression name="css"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<variableReferenceExpression name="css"/>
										</target>
										<parameters>
											<primitiveExpression value=";}}"/>
											<primitiveExpression value="}}"/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<assignStatement>
									<variableReferenceExpression name="css"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<typeReferenceExpression type="Regex"/>
										</target>
										<parameters>
											<variableReferenceExpression name="css"/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[([\s:]0)(px|pt|%|em)]]></xsl:attribute>
											</primitiveExpression>
											<primitiveExpression value="$1"/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<assignStatement>
									<variableReferenceExpression name="css"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<typeReferenceExpression type="Regex"/>
										</target>
										<parameters>
											<variableReferenceExpression name="css"/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[/\*[\d\D]*?\*/]]></xsl:attribute>
											</primitiveExpression>
											<stringEmptyExpression/>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="css"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- property ThemeIconsQueryParameter -->
						<memberProperty type="System.String" name="ThemeIconsQueryParameter">
							<attributes public="true" static="true"/>
							<getStatements>
								<variableDeclarationStatement name="icons">
									<init>
										<propertyReferenceExpression name="ThemeIcons"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNotNullOrEmpty">
											<variableReferenceExpression name="icons"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="icons"/>
											<binaryOperatorExpression operator="Add">
												<primitiveExpression value="&amp;_icons="/>
												<variableReferenceExpression name="icons"/>
											</binaryOperatorExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="icons"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- property ThemeIcons -->
						<memberProperty type="System.String" name="ThemeIcons">
							<attributes public="true" static="true"/>
							<getStatements>
								<variableDeclarationStatement name="icons">
									<init>
										<castExpression targetType="System.String">
											<methodInvokeExpression methodName="Settings">
												<target>
													<typeReferenceExpression type="ApplicationServices"/>
												</target>
												<parameters>
													<primitiveExpression value="ui.theme.icons"/>
												</parameters>
											</methodInvokeExpression>
										</castExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="ValueEquality">
											<variableReferenceExpression name="icons"/>
											<primitiveExpression value="filled"/>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="icons"/>
											<primitiveExpression value="null"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="icons"/>
								</methodReturnStatement>
							</getStatements>
						</memberProperty>
						<!-- method ConfigureMaterialIconFont(string) -->
						<memberMethod returnType="System.String" name="ConfigureMaterialIconFont">
							<attributes public="true" static="true"/>
							<parameters>
								<parameter type="System.String" name="css"/>
							</parameters>
							<statements>
								<variableDeclarationStatement name="iconsFont">
									<init>
										<propertyReferenceExpression name="ThemeIcons"/>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<variableReferenceExpression name="iconsFont"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="iconsFont"/>
											<primitiveExpression value="Regular"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<variableReferenceExpression name="css"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<typeReferenceExpression type="Regex"/>
										</target>
										<parameters>
											<variableReferenceExpression name="css"/>
											<primitiveExpression>
												<xsl:attribute name="value"><![CDATA[MaterialIcons-\w+.woff2]]></xsl:attribute>
											</primitiveExpression>
											<stringFormatExpression format="MaterialIcons-{{0}}.woff2?{{1}}">
												<variableReferenceExpression name="iconsFont"/>
												<propertyReferenceExpression name="Version">
													<typeReferenceExpression type="ApplicationServices"/>
												</propertyReferenceExpression>
											</stringFormatExpression>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<methodReturnStatement>
									<argumentReferenceExpression name="css"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method ToString()-->
						<memberMethod returnType="System.String" name="ToString">
							<attributes public="true" override="true"/>
							<statements>
								<variableDeclarationStatement type="System.String" name="result">
									<init>
										<methodInvokeExpression methodName="ConfigureMaterialIconFont">
											<parameters>
												<fieldReferenceExpression name="template"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<conditionStatement>
									<condition>
										<binaryOperatorExpression operator="BooleanAnd">
											<unaryOperatorExpression operator="IsNotNullOrEmpty">
												<fieldReferenceExpression name="template"/>
											</unaryOperatorExpression>
											<binaryOperatorExpression operator="BooleanAnd">
												<binaryOperatorExpression operator="IdentityInequality">
													<fieldReferenceExpression name="theme"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
												<binaryOperatorExpression operator="IdentityInequality">
													<fieldReferenceExpression name="accent"/>
													<primitiveExpression value="null"/>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
										</binaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="result"/>
											<methodInvokeExpression methodName="Replace">
												<target>
													<propertyReferenceExpression name="ThemeVariableRegex"/>
												</target>
												<parameters>
													<variableReferenceExpression name="result"/>
													<addressOfExpression>
														<methodReferenceExpression methodName="DoReplaceThemeVariables"/>
													</addressOfExpression>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="EnableMinifiedCss">
											<typeReferenceExpression type="ApplicationServicesBase"/>
										</propertyReferenceExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="result"/>
											<methodInvokeExpression methodName="Minify">
												<parameters>
													<variableReferenceExpression name="result"/>
												</parameters>
											</methodInvokeExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<assignStatement>
									<variableReferenceExpression name="result"/>
									<methodInvokeExpression methodName="Replace">
										<target>
											<propertyReferenceExpression name="CssUrlRegex">
												<typeReferenceExpression type="ApplicationServicesBase"/>
											</propertyReferenceExpression>
										</target>
										<parameters>
											<variableReferenceExpression name="result"/>
											<addressOfExpression>
												<methodReferenceExpression methodName="DoReplaceCssUrl">
													<typeReferenceExpression type="ApplicationServicesBase"/>
												</methodReferenceExpression>
											</addressOfExpression>
										</parameters>
									</methodInvokeExpression>
								</assignStatement>
								<methodReturnStatement>
									<variableReferenceExpression name="result"/>
								</methodReturnStatement>
							</statements>
						</memberMethod>
						<!-- method DoReplaceThemeVariables(Match)-->
						<memberMethod returnType="System.String" name="DoReplaceThemeVariables">
							<attributes family="true" final="true" />
							<parameters>
								<parameter type="Match" name="m"/>
							</parameters>
							<statements>
								<variableDeclarationStatement type="System.String" name="variable">
									<init>
										<propertyReferenceExpression name="Value">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Groups">
														<variableReferenceExpression name="m"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="Name"/>
												</indices>
											</arrayIndexerExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="before">
									<init>
										<propertyReferenceExpression name="Value">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Groups">
														<variableReferenceExpression name="m"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="Before"/>
												</indices>
											</arrayIndexerExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String" name="after">
									<init>
										<propertyReferenceExpression name="Value">
											<arrayIndexerExpression>
												<target>
													<propertyReferenceExpression name="Groups">
														<variableReferenceExpression name="m"/>
													</propertyReferenceExpression>
												</target>
												<indices>
													<primitiveExpression value="After"/>
												</indices>
											</arrayIndexerExpression>
										</propertyReferenceExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement type="System.String[]" name="parts">
									<init>
										<methodInvokeExpression methodName="Split">
											<target>
												<variableReferenceExpression name="variable"/>
											</target>
											<parameters>
												<primitiveExpression value="," convertTo="Char"/>
											</parameters>
										</methodInvokeExpression>
									</init>
								</variableDeclarationStatement>
								<variableDeclarationStatement name="value" type="System.String">
									<init>
										<primitiveExpression value="null"/>
									</init>
								</variableDeclarationStatement>
								<foreachStatement>
									<variable type="System.String" name="part"/>
									<target>
										<variableReferenceExpression name="parts"/>
									</target>
									<statements>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="TryGetThemeVariable">
													<parameters>
														<methodInvokeExpression methodName="Substring">
															<target>
																<methodInvokeExpression methodName="Trim">
																	<target>
																		<variableReferenceExpression name="part"/>
																	</target>
																</methodInvokeExpression>
															</target>
															<parameters>
																<primitiveExpression value="1"/>
															</parameters>
														</methodInvokeExpression>
														<directionExpression direction="Out">
															<variableReferenceExpression name="value"/>
														</directionExpression>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<breakStatement/>
											</trueStatements>
										</conditionStatement>
									</statements>
								</foreachStatement>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="IsNullOrEmpty">
											<variableReferenceExpression name="value"/>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<assignStatement>
											<variableReferenceExpression name="value"/>
											<propertyReferenceExpression name="Value">
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Groups">
															<variableReferenceExpression name="m"/>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="Value"/>
													</indices>
												</arrayIndexerExpression>
											</propertyReferenceExpression>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<conditionStatement>
									<condition>
										<propertyReferenceExpression name="EnableMinifiedCss">
											<typeReferenceExpression type="ApplicationServices"/>
										</propertyReferenceExpression>
									</condition>
									<trueStatements>
										<methodReturnStatement>
											<binaryOperatorExpression operator="Add">
												<binaryOperatorExpression operator="Add">
													<variableReferenceExpression name="before"/>
													<variableReferenceExpression name="value"/>
												</binaryOperatorExpression>
												<variableReferenceExpression name="after"/>
											</binaryOperatorExpression>
										</methodReturnStatement>
									</trueStatements>
									<falseStatements>
										<methodReturnStatement>
											<binaryOperatorExpression operator="Add">
												<binaryOperatorExpression operator="Add">
													<variableReferenceExpression name="before"/>
													<binaryOperatorExpression operator="Add">
														<primitiveExpression value=" /*"/>
														<variableReferenceExpression name="variable"/>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
												<binaryOperatorExpression operator="Add">
													<binaryOperatorExpression operator="Add">
														<primitiveExpression value="*/ "/>
														<variableReferenceExpression name="value"/>
													</binaryOperatorExpression>
													<variableReferenceExpression name="after"/>
												</binaryOperatorExpression>
											</binaryOperatorExpression>
										</methodReturnStatement>
									</falseStatements>
								</conditionStatement>
							</statements>
						</memberMethod>
						<!-- method TryGetThemeVariable(string)-->
						<memberMethod returnType="System.Boolean" name="TryGetThemeVariable">
							<attributes family="true" final="true"/>
							<parameters>
								<parameter type="System.String" name="name"/>
								<parameter type="System.String" name="value" direction="Out"/>
							</parameters>
							<statements>
								<conditionStatement>
									<condition>
										<unaryOperatorExpression operator="Not">
											<methodInvokeExpression methodName="TryGetValue">
												<target>
													<fieldReferenceExpression name="themeVariables"/>
												</target>
												<parameters>
													<variableReferenceExpression name="name"/>
													<directionExpression direction="Out">
														<variableReferenceExpression name="value"/>
													</directionExpression>
												</parameters>
											</methodInvokeExpression>
										</unaryOperatorExpression>
									</condition>
									<trueStatements>
										<variableDeclarationStatement type="JToken" name="token">
											<init>
												<primitiveExpression value="null"/>
											</init>
										</variableDeclarationStatement>
										<conditionStatement>
											<condition>
												<methodInvokeExpression methodName="StartsWith">
													<target>
														<variableReferenceExpression name="name"/>
													</target>
													<parameters>
														<primitiveExpression value="theme."/>
													</parameters>
												</methodInvokeExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="token"/>
													<methodInvokeExpression methodName="TryGetJsonProperty">
														<target>
															<typeReferenceExpression type="ApplicationServicesBase"/>
														</target>
														<parameters>
															<fieldReferenceExpression name="accent"/>
															<methodInvokeExpression methodName="Join">
																<target>
																	<typeReferenceExpression type="String"/>
																</target>
																<parameters>
																	<primitiveExpression value="."/>
																	<primitiveExpression value="theme"/>
																	<arrayIndexerExpression>
																		<target>
																			<fieldReferenceExpression name="theme"/>
																		</target>
																		<indices>
																			<primitiveExpression value="name"/>
																		</indices>
																	</arrayIndexerExpression>
																	<methodInvokeExpression methodName="Substring">
																		<target>
																			<variableReferenceExpression name="name"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="6"/>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanOr">
															<binaryOperatorExpression operator="IdentityEquality">
																<variableReferenceExpression name="token"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="ValueEquality">
																<propertyReferenceExpression name="Type">
																	<variableReferenceExpression name="token"/>
																</propertyReferenceExpression>
																<propertyReferenceExpression name="Null">
																	<typeReferenceExpression type="JTokenType"/>
																</propertyReferenceExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="token"/>
															<methodInvokeExpression methodName="TryGetJsonProperty">
																<target>
																	<typeReferenceExpression type="ApplicationServicesBase"/>
																</target>
																<parameters>
																	<fieldReferenceExpression name="theme"/>
																	<methodInvokeExpression methodName="Substring">
																		<target>
																			<variableReferenceExpression name="name"/>
																		</target>
																		<parameters>
																			<primitiveExpression value="6"/>
																		</parameters>
																	</methodInvokeExpression>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
											</trueStatements>
											<falseStatements>
												<assignStatement>
													<variableReferenceExpression name="token"/>
													<methodInvokeExpression methodName="TryGetJsonProperty">
														<target>
															<typeReferenceExpression type="ApplicationServicesBase"/>
														</target>
														<parameters>
															<fieldReferenceExpression name="accent"/>
															<methodInvokeExpression methodName="Join">
																<target>
																	<typeReferenceExpression type="String"/>
																</target>
																<parameters>
																	<primitiveExpression value="."/>
																	<primitiveExpression value="theme"/>
																	<arrayIndexerExpression>
																		<target>
																			<fieldReferenceExpression name="theme"/>
																		</target>
																		<indices>
																			<primitiveExpression value="name"/>
																		</indices>
																	</arrayIndexerExpression>
																	<variableReferenceExpression name="name"/>
																</parameters>
															</methodInvokeExpression>
														</parameters>
													</methodInvokeExpression>
												</assignStatement>
												<conditionStatement>
													<condition>
														<binaryOperatorExpression operator="BooleanOr">
															<binaryOperatorExpression operator="IdentityEquality">
																<variableReferenceExpression name="token"/>
																<primitiveExpression value="null"/>
															</binaryOperatorExpression>
															<binaryOperatorExpression operator="ValueEquality">
																<propertyReferenceExpression name="Type">
																	<variableReferenceExpression name="token"/>
																</propertyReferenceExpression>
																<propertyReferenceExpression name="Null">
																	<typeReferenceExpression type="JTokenType"/>
																</propertyReferenceExpression>
															</binaryOperatorExpression>
														</binaryOperatorExpression>
													</condition>
													<trueStatements>
														<assignStatement>
															<variableReferenceExpression name="token"/>
															<methodInvokeExpression methodName="TryGetJsonProperty">
																<target>
																	<typeReferenceExpression type="ApplicationServicesBase"/>
																</target>
																<parameters>
																	<fieldReferenceExpression name="accent"/>
																	<variableReferenceExpression name="name"/>
																</parameters>
															</methodInvokeExpression>
														</assignStatement>
													</trueStatements>
												</conditionStatement>
											</falseStatements>
										</conditionStatement>
										<conditionStatement>
											<condition>
												<binaryOperatorExpression operator="BooleanAnd">
													<binaryOperatorExpression operator="IdentityInequality">
														<variableReferenceExpression name="token"/>
														<primitiveExpression value="null"/>
													</binaryOperatorExpression>
													<binaryOperatorExpression operator="ValueInequality">
														<propertyReferenceExpression name="Type">
															<variableReferenceExpression name="token"/>
														</propertyReferenceExpression>
														<propertyReferenceExpression name="Null">
															<typeReferenceExpression type="JTokenType"/>
														</propertyReferenceExpression>
													</binaryOperatorExpression>
												</binaryOperatorExpression>
											</condition>
											<trueStatements>
												<assignStatement>
													<variableReferenceExpression name="value"/>
													<castExpression targetType="System.String">
														<variableReferenceExpression name="token"/>
													</castExpression>
												</assignStatement>
											</trueStatements>
										</conditionStatement>
										<assignStatement>
											<arrayIndexerExpression>
												<target>
													<fieldReferenceExpression name="themeVariables"/>
												</target>
												<indices>
													<variableReferenceExpression name="name"/>
												</indices>
											</arrayIndexerExpression>
											<variableReferenceExpression name="value"/>
										</assignStatement>
									</trueStatements>
								</conditionStatement>
								<methodReturnStatement>
									<unaryOperatorExpression operator="IsNotNullOrEmpty">
										<variableReferenceExpression name="value"/>
									</unaryOperatorExpression>
								</methodReturnStatement>
							</statements>
						</memberMethod>
					</members>
				</typeDeclaration>
			</types>
		</compileUnit>
	</xsl:template>

	<xsl:template name="RegisterTouchUICssLinks">
		<variableDeclarationStatement type="ApplicationServices" name="services">
			<init>
				<propertyReferenceExpression name="Current">
					<typeReferenceExpression type="ApplicationServices"/>
				</propertyReferenceExpression>
			</init>
		</variableDeclarationStatement>
		<variableDeclarationStatement type="System.String" name="jqmCss">
			<init>
				<primitiveExpression value="touch-core.min.css"/>
				<!--<stringFormatExpression format="jquery.mobile-{{0}}.min.css">
					<propertyReferenceExpression name="JqmVersion">
						<typeReferenceExpression type="ApplicationServices"/>
					</propertyReferenceExpression>
				</stringFormatExpression>-->
			</init>
		</variableDeclarationStatement>
		<assignStatement>
			<propertyReferenceExpression name="Href">
				<variableReferenceExpression name="l"/>
			</propertyReferenceExpression>
			<binaryOperatorExpression operator="Add">
				<primitiveExpression value="~/css/daf/"/>
				<variableReferenceExpression name="jqmCss"/>
			</binaryOperatorExpression>
		</assignStatement>
		<!--<variableDeclarationStatement type="HtmlMeta" name="meta">
			<init>
				<objectCreateExpression type="HtmlMeta"/>
			</init>
		</variableDeclarationStatement>
		<assignStatement>
			<arrayIndexerExpression>
				<target>
					<propertyReferenceExpression name="Attributes">
						<variableReferenceExpression name="meta"/>
					</propertyReferenceExpression>
				</target>
				<indices>
					<primitiveExpression value="name"/>
				</indices>
			</arrayIndexerExpression>
			<primitiveExpression value="viewport"/>
		</assignStatement>
		<assignStatement>
			<arrayIndexerExpression>
				<target>
					<propertyReferenceExpression name="Attributes">
						<variableReferenceExpression name="meta"/>
					</propertyReferenceExpression>
				</target>
				<indices>
					<primitiveExpression value="content"/>
				</indices>
			</arrayIndexerExpression>
			<primitiveExpression value="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
		</assignStatement>-->
		<variableDeclarationStatement name="meta">
			<init>
				<objectCreateExpression type="LiteralControl">
					<parameters>
						<primitiveExpression>
							<xsl:attribute name="value"><![CDATA[<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">]]></xsl:attribute>
						</primitiveExpression>
					</parameters>
				</objectCreateExpression>
			</init>
		</variableDeclarationStatement>
		<methodInvokeExpression methodName="AddAt">
			<target>
				<propertyReferenceExpression name="Controls">
					<propertyReferenceExpression name="Header">
						<argumentReferenceExpression name="p"/>
					</propertyReferenceExpression>
				</propertyReferenceExpression>
			</target>
			<parameters>
				<primitiveExpression value="1"/>
				<variableReferenceExpression name="meta"/>
			</parameters>
		</methodInvokeExpression>
		<xsl:choose>
			<xsl:when test="$IsUnlimited='true'">
				<conditionStatement>
					<condition>
						<propertyReferenceExpression name="EnableCombinedCss">
							<typeReferenceExpression type="ApplicationServices"/>
						</propertyReferenceExpression>
					</condition>
					<trueStatements>
						<assignStatement>
							<propertyReferenceExpression name="Href">
								<variableReferenceExpression name="l"/>
							</propertyReferenceExpression>
							<methodInvokeExpression methodName="ResolveUrl">
								<target>
									<argumentReferenceExpression name="p"/>
								</target>
								<parameters>
									<methodInvokeExpression methodName="Format">
										<target>
											<typeReferenceExpression type="System.String"/>
										</target>
										<parameters>
											<primitiveExpression value="~/appservices/stylesheet-{{0}}.min.css?_t={{1}}.{{2}}{{4}}&amp;_r={{3}}&amp;_cf="/>
											<propertyReferenceExpression name="Version">
												<typeReferenceExpression type="ApplicationServices"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="UserTheme">
												<variableReferenceExpression name="services"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="UserAccent">
												<variableReferenceExpression name="services"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="CombinedResourceType">
												<typeReferenceExpression type="ApplicationServices"/>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="ThemeIconsQueryParameter">
												<typeReferenceExpression type="StylesheetGenerator"/>
											</propertyReferenceExpression>
										</parameters>
									</methodInvokeExpression>
								</parameters>
							</methodInvokeExpression>
						</assignStatement>
						<assignStatement>
							<arrayIndexerExpression>
								<target>
									<propertyReferenceExpression name="Attributes">
										<variableReferenceExpression name="l"/>
									</propertyReferenceExpression>
								</target>
								<indices>
									<primitiveExpression value="class"/>
								</indices>
							</arrayIndexerExpression>
							<primitiveExpression value="app-theme"/>
						</assignStatement>
					</trueStatements>
					<falseStatements>
						<xsl:call-template name="RegisterUncompressedTouchCssLinks"/>
					</falseStatements>
				</conditionStatement>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="RegisterUncompressedTouchCssLinks"/>
			</xsl:otherwise>
		</xsl:choose>
		<variableDeclarationStatement type="List" name="removeList">
			<typeArguments>
				<typeReference type="Control"/>
			</typeArguments>
			<init>
				<objectCreateExpression type="List">
					<typeArguments>
						<typeReference type="Control"/>
					</typeArguments>
				</objectCreateExpression>
			</init>
		</variableDeclarationStatement>
		<foreachStatement>
			<variable type="Control" name="c2"/>
			<target>
				<propertyReferenceExpression name="Controls">
					<propertyReferenceExpression name="Header">
						<variableReferenceExpression name="p"/>
					</propertyReferenceExpression>
				</propertyReferenceExpression>
			</target>
			<statements>
				<conditionStatement>
					<condition>
						<binaryOperatorExpression operator="IsTypeOf">
							<variableReferenceExpression name="c2"/>
							<typeReferenceExpression type="HtmlLink"/>
						</binaryOperatorExpression>
					</condition>
					<trueStatements>
						<assignStatement>
							<variableReferenceExpression name="l"/>
							<castExpression targetType="HtmlLink">
								<variableReferenceExpression name="c2"/>
							</castExpression>
						</assignStatement>
						<conditionStatement>
							<condition>
								<methodInvokeExpression methodName="Contains">
									<target>
										<propertyReferenceExpression name="Href">
											<variableReferenceExpression name="l"/>
										</propertyReferenceExpression>
									</target>
									<parameters>
										<primitiveExpression value="App_Themes/"/>
									</parameters>
								</methodInvokeExpression>
							</condition>
							<trueStatements>
								<methodInvokeExpression methodName="Add">
									<target>
										<variableReferenceExpression name="removeList"/>
									</target>
									<parameters>
										<variableReferenceExpression name="l"/>
									</parameters>
								</methodInvokeExpression>
							</trueStatements>
						</conditionStatement>
					</trueStatements>
				</conditionStatement>
			</statements>
		</foreachStatement>
		<foreachStatement>
			<variable type="Control" name="c2"/>
			<target>
				<variableReferenceExpression name="removeList"/>
			</target>
			<statements>
				<methodInvokeExpression methodName="Remove">
					<target>
						<propertyReferenceExpression name="Controls">
							<propertyReferenceExpression name="Header">
								<variableReferenceExpression name="p"/>
							</propertyReferenceExpression>
						</propertyReferenceExpression>
					</target>
					<parameters>
						<variableReferenceExpression name="c2"/>
					</parameters>
				</methodInvokeExpression>
			</statements>
		</foreachStatement>
	</xsl:template>

	<xsl:template name="EnsureCssLinkVersion">
		<conditionStatement>
			<condition>
				<unaryOperatorExpression operator="Not">
					<methodInvokeExpression methodName="Contains">
						<target>
							<propertyReferenceExpression name="Href">
								<variableReferenceExpression name="l"/>
							</propertyReferenceExpression>
						</target>
						<parameters>
							<primitiveExpression value="?"/>
						</parameters>
					</methodInvokeExpression>
				</unaryOperatorExpression>
			</condition>
			<trueStatements>
				<assignStatement>
					<propertyReferenceExpression name="Href">
						<variableReferenceExpression name="l"/>
					</propertyReferenceExpression>
					<binaryOperatorExpression operator="Add">
						<propertyReferenceExpression name="Href">
							<variableReferenceExpression name="l"/>
						</propertyReferenceExpression>
						<stringFormatExpression format="?{{0}}">
							<propertyReferenceExpression name="Version">
								<typeReferenceExpression type="ApplicationServices"/>
							</propertyReferenceExpression>
						</stringFormatExpression>
					</binaryOperatorExpression>
				</assignStatement>
			</trueStatements>
		</conditionStatement>
	</xsl:template>

	<xsl:template name="RegisterUncompressedTouchCssLinks">
		<foreachStatement>
			<variable type="System.String" name="stylesheet"/>
			<target>
				<methodInvokeExpression methodName="EnumerateTouchUIStylesheets">
					<target>
						<variableReferenceExpression name="services"/>
					</target>
				</methodInvokeExpression>
			</target>
			<statements>
				<variableDeclarationStatement type="System.String" name="cssName">
					<init>
						<methodInvokeExpression methodName="GetFileName">
							<target>
								<typeReferenceExpression type="Path"/>
							</target>
							<parameters>
								<variableReferenceExpression name="stylesheet"/>
							</parameters>
						</methodInvokeExpression>
					</init>
				</variableDeclarationStatement>
				<conditionStatement>
					<condition>
						<binaryOperatorExpression operator="BooleanAnd">
							<unaryOperatorExpression operator="Not">
								<methodInvokeExpression methodName="StartsWith">
									<target>
										<variableReferenceExpression name="cssName"/>
									</target>
									<parameters>
										<primitiveExpression value="touch-core"/>
									</parameters>
								</methodInvokeExpression>
							</unaryOperatorExpression>
							<unaryOperatorExpression operator="Not">
								<methodInvokeExpression methodName="StartsWith">
									<target>
										<variableReferenceExpression name="cssName"/>
									</target>
									<parameters>
										<primitiveExpression value="bootstrap"/>
									</parameters>
								</methodInvokeExpression>
							</unaryOperatorExpression>
						</binaryOperatorExpression>
					</condition>
					<trueStatements>
						<variableDeclarationStatement type="HtmlLink" name="cssLink">
							<init>
								<objectCreateExpression type="HtmlLink"/>
							</init>
						</variableDeclarationStatement>
						<assignStatement>
							<propertyReferenceExpression name="Href">
								<variableReferenceExpression name="cssLink"/>
							</propertyReferenceExpression>
							<stringFormatExpression format="{{0}}?{{1}}">
								<methodInvokeExpression methodName="Replace">
									<target>
										<variableReferenceExpression name="stylesheet"/>
									</target>
									<parameters>
										<primitiveExpression value="\" convertTo="Char"/>
										<primitiveExpression value="/" convertTo="Char"/>
									</parameters>
								</methodInvokeExpression>
								<propertyReferenceExpression name="Version">
									<typeReferenceExpression type="ApplicationServices"/>
								</propertyReferenceExpression>
							</stringFormatExpression>
						</assignStatement>
						<conditionStatement>
							<condition>
								<methodInvokeExpression methodName="StartsWith">
									<target>
										<variableReferenceExpression name="cssName"/>
									</target>
									<parameters>
										<primitiveExpression value="touch-theme."/>
									</parameters>
								</methodInvokeExpression>
							</condition>
							<trueStatements>
								<xsl:if test="$IsUnlimited!='true'">
									<variableDeclarationStatement type="Match" name="themeVars">
										<init>
											<methodInvokeExpression methodName="Match">
												<target>
													<propertyReferenceExpression name="ThemeStylesheetRegex">
														<typeReferenceExpression type="StylesheetGenerator"/>
													</propertyReferenceExpression>
												</target>
												<parameters>
													<variableReferenceExpression name="cssName"/>
												</parameters>
											</methodInvokeExpression>
										</init>
									</variableDeclarationStatement>
									<assignStatement>
										<propertyReferenceExpression name="Href">
											<variableReferenceExpression name="cssLink"/>
										</propertyReferenceExpression>
										<stringFormatExpression format="~/Theme.ashx?theme={{0}}&amp;accent={{1}}&amp;v={{2}}">
											<propertyReferenceExpression name="Value">
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Groups">
															<variableReferenceExpression name="themeVars"/>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="Theme"/>
													</indices>
												</arrayIndexerExpression>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="Value">
												<arrayIndexerExpression>
													<target>
														<propertyReferenceExpression name="Groups">
															<variableReferenceExpression name="themeVars"/>
														</propertyReferenceExpression>
													</target>
													<indices>
														<primitiveExpression value="Accent"/>
													</indices>
												</arrayIndexerExpression>
											</propertyReferenceExpression>
											<propertyReferenceExpression name="Version">
												<typeReferenceExpression type="ApplicationServices"/>
											</propertyReferenceExpression>
										</stringFormatExpression>
									</assignStatement>
								</xsl:if>
								<assignStatement>
									<arrayIndexerExpression>
										<target>
											<propertyReferenceExpression name="Attributes">
												<variableReferenceExpression name="cssLink"/>
											</propertyReferenceExpression>
										</target>
										<indices>
											<primitiveExpression value="class"/>
										</indices>
									</arrayIndexerExpression>
									<primitiveExpression value="app-theme"/>
								</assignStatement>
							</trueStatements>
						</conditionStatement>
						<assignStatement>
							<arrayIndexerExpression>
								<target>
									<propertyReferenceExpression name="Attributes">
										<variableReferenceExpression name="cssLink"/>
									</propertyReferenceExpression>
								</target>
								<indices>
									<primitiveExpression value="type"/>
								</indices>
							</arrayIndexerExpression>
							<primitiveExpression value="text/css"/>
						</assignStatement>
						<assignStatement>
							<arrayIndexerExpression>
								<target>
									<propertyReferenceExpression name="Attributes">
										<variableReferenceExpression name="cssLink"/>
									</propertyReferenceExpression>
								</target>
								<indices>
									<primitiveExpression value="rel"/>
								</indices>
							</arrayIndexerExpression>
							<primitiveExpression value="stylesheet"/>
						</assignStatement>
						<methodInvokeExpression methodName="Add">
							<target>
								<propertyReferenceExpression name="Controls">
									<propertyReferenceExpression name="Header">
										<variableReferenceExpression name="p"/>
									</propertyReferenceExpression>
								</propertyReferenceExpression>
							</target>
							<parameters>
								<variableReferenceExpression name="cssLink"/>
							</parameters>
						</methodInvokeExpression>
					</trueStatements>
				</conditionStatement>
			</statements>
		</foreachStatement>
	</xsl:template>

	<xsl:template name="InitializeSetting">
		<xsl:param name="Name"/>
		<xsl:param name="DefaultValue">
			<objectCreateExpression type="JObject"/>
		</xsl:param>
		<xsl:variable name="Indexer">
			<xsl:call-template name="InitializeSettingArrayIndexer">
				<xsl:with-param name="Name" select="$Name"/>
			</xsl:call-template>
		</xsl:variable>
		<conditionStatement>
			<condition>
				<binaryOperatorExpression operator="IdentityEquality">
					<xsl:copy-of select="$Indexer"/>
					<primitiveExpression value="null"/>
				</binaryOperatorExpression>
			</condition>
			<trueStatements>
				<assignStatement>
					<xsl:copy-of select="$Indexer"/>
					<xsl:copy-of select="$DefaultValue"/>
				</assignStatement>
			</trueStatements>
		</conditionStatement>
	</xsl:template>

	<xsl:template name="InitializeSettingArrayIndexer">
		<xsl:param name="Name"/>
		<xsl:choose>
			<xsl:when test="contains($Name, '.')">
				<xsl:variable name="After" select="codeontime:SubstringAfterLast($Name, '.')"/>
				<arrayIndexerExpression>
					<target>
						<xsl:call-template name="InitializeSettingArrayIndexer">
							<xsl:with-param name="Name" select="codeontime:SubstringBeforeLast($Name, '.')"/>
						</xsl:call-template>
					</target>
					<indices>
						<primitiveExpression value="{$After}"/>
					</indices>
				</arrayIndexerExpression>
			</xsl:when>
			<xsl:otherwise>
				<arrayIndexerExpression>
					<target>
						<variableReferenceExpression name="settings"/>
					</target>
					<indices>
						<primitiveExpression value="{$Name}"/>
					</indices>
				</arrayIndexerExpression>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
</xsl:stylesheet>
